{
    "summary": "",
    "suspicious_code": [
        {
            "keyword": "EnumTest",
            "file_path": ""
        },
        {
            "keyword": "MyChoice",
            "file_path": ""
        },
        {
            "keyword": "gettext_lazy",
            "file_path": ""
        },
        {
            "keyword": "test_retrieved_object_is_str",
            "file_path": ""
        },
        {
            "keyword": "TestCase",
            "file_path": ""
        },
        {
            "keyword": "MyObject",
            "file_path": ""
        },
        {
            "keyword": "models",
            "file_path": ""
        },
        {
            "keyword": "test_created_object_is_str",
            "file_path": ""
        },
        {
            "keyword": "setUp",
            "file_path": ""
        }
    ],
    "suspicious_code_from_tracer": [],
    "related_source_code": "",
    "is_reproduce_pass": false,
    "reproduce_code": "from django.db import models\nfrom django.utils.translation import gettext_lazy as _\nclass MyChoice(models.TextChoices):\n FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\nclass MyObject(models.Model):\n my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n\nfrom django.test import TestCase\nfrom testing.pkg.models import MyObject, MyChoice\nclass EnumTest(TestCase):\n def setUp(self) -> None:\n self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n def test_created_object_is_str(self):\n my_object = self.my_object\n self.assertIsInstance(my_object.my_str_value, str)\n self.assertEqual(str(my_object.my_str_value), \"first\")\n def test_retrieved_object_is_str(self):\n my_object = MyObject.objects.last()\n self.assertIsInstance(my_object.my_str_value, str)\n self.assertEqual(str(my_object.my_str_value), \"first\")",
    "env_reproduce_path": "/django__django/reproducer_django__django-11964.py"
}