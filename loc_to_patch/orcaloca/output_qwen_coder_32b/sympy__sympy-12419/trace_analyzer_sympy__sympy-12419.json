{
    "summary": "",
    "suspicious_code": [
        {
            "keyword": "MutableMapping",
            "file_path": "sympy/assumptions/sathandlers.py"
        },
        {
            "keyword": "Mapping",
            "file_path": "sympy/core/basic.py"
        },
        {
            "keyword": "ask",
            "file_path": ""
        },
        {
            "keyword": "refine",
            "file_path": ""
        },
        {
            "keyword": "symbols",
            "file_path": ""
        },
        {
            "keyword": "Symbol",
            "file_path": ""
        },
        {
            "keyword": "T",
            "file_path": ""
        },
        {
            "keyword": "Query",
            "file_path": ""
        },
        {
            "keyword": "Sum",
            "file_path": ""
        },
        {
            "keyword": "assuming",
            "file_path": ""
        },
        {
            "keyword": "MatrixSymbol",
            "file_path": ""
        },
        {
            "keyword": "defaultdict",
            "file_path": "sympy/assumptions/sathandlers.py"
        },
        {
            "keyword": "Callable",
            "file_path": "sympy/plotting/plot.py"
        },
        {
            "keyword": "doit",
            "file_path": ""
        }
    ],
    "suspicious_code_from_tracer": [
        {
            "keyword": "eval_sum",
            "file_path": "sympy/concrete/summations.py",
            "class_name": "Sum"
        }
    ],
    "related_source_code": "",
    "is_reproduce_pass": true,
    "reproduce_code": "\nfrom sympy import *\nfrom sympy import Q as Query\n\nn = Symbol('n', integer=True, positive=True)\ni, j = symbols('i j', integer=True)\nM = MatrixSymbol('M', n, n)\n\ne = None\nwith assuming(Query.orthogonal(M)):\n    e = refine((M.T * M).doit())\n\n# Correct: M.T * M is an identity matrix.\nprint(e, e[0, 0], e[0, 1], e[1, 0], e[1, 1])\n\n# Correct: The output is True True\nprint(ask(Query.diagonal(e)), ask(Query.integer_elements(e)))\n\n# Correct: The sum of the diagonal elements is n\nprint(Sum(e[i, i], (i, 0, n-1)).doit())\n\n# So far so good\n# Total sum of the elements is expected to be 'n' but the answer is 0!\nprint(Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit())\n",
    "env_reproduce_path": "/sympy__sympy/reproducer_sympy__sympy-12419.py"
}