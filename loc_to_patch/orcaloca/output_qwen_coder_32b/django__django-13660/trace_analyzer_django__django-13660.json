{
    "summary": "",
    "suspicious_code": [
        {
            "keyword": "sys",
            "file_path": ""
        },
        {
            "keyword": "exec",
            "file_path": ""
        },
        {
            "keyword": "execute",
            "file_path": "django/core/management/__init__.py"
        },
        {
            "keyword": "fetch_command",
            "file_path": "django/core/management/__init__.py"
        },
        {
            "keyword": "execute",
            "file_path": "django/core/management/base.py"
        },
        {
            "keyword": "run_from_argv",
            "file_path": "django/core/management/base.py"
        },
        {
            "keyword": "execute_from_command_line",
            "file_path": "django/core/management/__init__.py"
        },
        {
            "keyword": "django",
            "file_path": ""
        },
        {
            "keyword": "handle",
            "file_path": "django/core/management/commands/shell.py"
        },
        {
            "keyword": "handle",
            "file_path": ""
        },
        {
            "keyword": "f",
            "file_path": ""
        },
        {
            "keyword": "select",
            "file_path": ""
        }
    ],
    "suspicious_code_from_tracer": [],
    "related_source_code": "def handle(self, **options):\n    # Execute the command and exit.\n    if options['command']:\n        exec(options['command'])\n        return\n    # Execute stdin if it has anything to read and exit.\n    # Not supported on Windows due to select.select() limitations.\n    if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n        exec(sys.stdin.read())\n        return\n",
    "is_reproduce_pass": false,
    "reproduce_code": "python -m django shell -c \"import django\\ndef f():\\n    print(django.__version__)\\nf()\"",
    "env_reproduce_path": "/django__django/reproducer_django__django-13660.py"
}