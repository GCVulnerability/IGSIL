{"model_name_or_path": "agentless", "instance_id": "django__django-13658", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-10914", "model_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex 034c3d0..9ba30e5 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13590", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex cc286ae..fc0d558 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,10 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            return type(value)(*(\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n-            )\n+            ))\n         return value\n \n     def solve_lookup_type(self, lookup):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13933", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 72ffbcc..6754796 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1283,8 +1283,8 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n-        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+        except (ValueError, TypeError, self.queryset.model.DoesNotExist) as e:\n+            raise ValidationError(self.error_messages['invalid_choice'] % {'value': value}, code='invalid_choice')\n         return value\n \n     def validate(self, value):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14365", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 92431f5..df06351 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -11,6 +11,7 @@ from collections.abc import Iterable\n \n import numpy as np\n \n+import re\n from astropy.table import Table\n from astropy.utils.exceptions import AstropyUserWarning\n \n@@ -68,7 +69,7 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13551", "model_patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 4505013..f01ee58 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -94,7 +94,7 @@ class PasswordResetTokenGenerator:\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + str(user.email)\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n@@ -104,4 +104,4 @@ class PasswordResetTokenGenerator:\n         return datetime.now()\n \n \n-default_token_generator = PasswordResetTokenGenerator()\n+default_token_generator = PasswordResetTokenGenerator()\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11848", "model_patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex ab0ad07..e23baa0 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,12 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n+            current_year = datetime.datetime.now().year\n+            cutoff_year = current_year - 50\n+            if year < cutoff_year % 100:\n+                year += (current_year // 100) * 100\n             else:\n-                year += 1900\n+                year += ((current_year // 100) - 1) * 100\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11099", "model_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex fe3a5d1..28b2658 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -1,3 +1,4 @@\n+\n import re\n \n from django.core import validators\n@@ -7,7 +8,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,9 +18,9 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n     )\n-    flags = 0\n+    flags = 0\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12308", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 07cdaa5..24364ba 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -398,6 +398,8 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, models.JSONField):\n+        return field.prepare_value(value)\n     else:\n         return display_for_value(value, empty_value_display)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14752", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..25b5b16 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,10 +90,12 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n+        parts = path.split(\".\")\n+        module = \".\".join(parts[:-1])\n+        name = \".\".join(parts[-2:])  # Adjust to handle inner classes\n         if module == \"django.db.models\":\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n+            name = \"models.%s\" % name.split('.')[-1]  # Adjust to handle inner classes\n         else:\n             imports = {\"import %s\" % module}\n             name = path\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14534", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-14238", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..5b03167 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2524,7 +2524,7 @@ class AutoFieldMeta(type):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n \n     def __subclasscheck__(self, subclass):\n-        return subclass in self._subclasses or super().__subclasscheck__(subclass)\n+        return (issubclass(subclass, BigAutoField) or issubclass(subclass, SmallAutoField) or super().__subclasscheck__(subclass))\n \n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c757b1f..bf4151d 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1160,6 +1160,9 @@ class Exists(Subquery):\n         clone.negated = not self.negated\n         return clone\n \n+    def __rand__(self, other):\n+        return self.__and__(other)\n+\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\n         sql, params = super().as_sql(\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14855", "model_patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex f4fe761..61f863f 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,11 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(\n+                url_name,\n+                args=[quote(remote_obj.pk)],\n+                current_app=self.model_admin.admin_site.name\n+            )\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 56fc5f8..2e91455 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1344,6 +1344,8 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         key = self.to_field_name or 'pk'\n         # deduplicate given values to avoid creating many querysets or\n         # requiring the database backend deduplicate efficiently.\n+        if not value:\n+            return self.queryset.none()\n         try:\n             value = frozenset(value)\n         except TypeError:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11133", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 5126111..6942545 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -231,6 +231,8 @@ class HttpResponseBase:\n         # - when self._charset != 'utf-8' it re-encodes the content\n         if isinstance(value, bytes):\n             return bytes(value)\n+        if isinstance(value, memoryview):\n+            return bytes(value)  # Convert memoryview to bytes\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n         # Handle non-string types.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..0936169 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,21 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        from functools import partial\n+        \n+        # Unwrap functools.partial if passed\n+        while isinstance(func, partial):\n+            func = func.func\n+        \n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             # A function-based view\n             self._func_path = func.__module__ + '.' + func.__name__\n+            \n+        # Store the original func to use in __repr__\n+        self._original_func = func\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,8 +68,16 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        if isinstance(self.func, partial):\n+            original_func_name = self.func.func.__module__ + '.' + self.func.func.__name__\n+            args_repr = ', '.join(repr(arg) for arg in self.func.args)\n+            kwargs_repr = ', '.join(f'{k}={v!r}' for k, v in self.func.keywords.items())\n+            func_repr = f'{original_func_name} with args: ({args_repr}) and kwargs: ({kwargs_repr})'\n+        else:\n+            func_repr = self._func_path\n+        \n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex fbb2aba..6319b17 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -517,11 +517,10 @@ class NDArithmeticMixin:\n             self.mask is None and operand is not None and operand.mask is None\n         ) or handle_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n-            return deepcopy(operand.mask)\n-        elif operand is None:\n-            return deepcopy(self.mask)\n+        elif self.mask is None:\n+            return deepcopy(operand.mask) if operand.mask is not None else None\n+        elif operand.mask is None:\n+            return deepcopy(self.mask) if self.mask is not None else None\n         else:\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..6f4bf4d 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -234,12 +234,12 @@ def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n \n     if isinstance(left, Model):\n-        cleft = _coord_matrix(left, 'left', noutp)\n+        cleft = _separable(left)\n     else:\n         cleft = np.zeros((noutp, left.shape[1]))\n         cleft[: left.shape[0], : left.shape[1]] = left\n     if isinstance(right, Model):\n-        cright = _coord_matrix(right, 'right', noutp)\n+        cright = _separable(right)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n         cright[-right.shape[0]:, -right.shape[1]:] = 1\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11815", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 472049c..8c0e529 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,7 +120,7 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n+        v_string, v_imports = serializer_factory(self.value.name).serialize()\n         imports = {'import %s' % module, *v_imports}\n         return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15851", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 55aff39..5a580e9 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -1,3 +1,4 @@\n+\n import signal\n \n from django.db.backends.base.client import BaseDatabaseClient\n@@ -32,9 +33,9 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [\"-h\", host]\n         if port:\n             args += [\"-p\", str(port)]\n+        args.extend(parameters)\n         if dbname:\n             args += [dbname]\n-        args.extend(parameters)\n \n         env = {}\n         if passwd:\n@@ -61,4 +62,4 @@ class DatabaseClient(BaseDatabaseClient):\n             super().runshell(parameters)\n         finally:\n             # Restore the original SIGINT handler.\n-            signal.signal(signal.SIGINT, sigint_handler)\n+            signal.signal(signal.SIGINT, sigint_handler)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13401", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 3f768d2..a6e34fc 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -516,17 +516,20 @@ class Field(RegisterLookupMixin):\n     def __eq__(self, other):\n         # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return self.creation_counter == other.creation_counter\n+            return self.creation_counter == other.creation_counter and self.model == other.model\n         return NotImplemented\n \n     def __lt__(self, other):\n         # This is needed because bisect does not take a comparison function.\n+        # Order first by creation_counter then by model to maintain the original order\n         if isinstance(other, Field):\n-            return self.creation_counter < other.creation_counter\n+            if self.creation_counter != other.creation_counter:\n+                return self.creation_counter < other.creation_counter\n+            return self.model < other.model\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash(self.creation_counter)\n+        return hash((self.creation_counter, self.model))\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..85dabc2 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,13 +407,8 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n-                model._meta.db_table,\n-                \", \".join(columns),\n-            ))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+        for constraint_name in constraint_names:\n+            self.execute(self._delete_constraint_sql(sql, model, constraint_name))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n         \"\"\"Rename the table a model points to.\"\"\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13028", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a6a3e97..9f96972 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,11 +1124,6 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16255", "model_patch": "diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 012efea..8076c09 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -168,7 +168,7 @@ class Sitemap:\n         if callable(self.lastmod):\n             try:\n                 return max([self.lastmod(item) for item in self.items()])\n-            except TypeError:\n+            except (TypeError, ValueError):\n                 return None\n         else:\n             return self.lastmod\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15814", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5314293..389ad3d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2596,7 +2596,7 @@ class RelatedPopulator:\n             )\n \n         self.model_cls = klass_info[\"model\"]\n-        self.pk_idx = self.init_list.index(self.model_cls._meta.pk.attname)\n+        self.pk_idx = self.init_list.index(self.model_cls._meta.concrete_model._meta.pk.attname)\n         self.related_populators = get_related_populators(klass_info, select, self.db)\n         self.local_setter = klass_info[\"local_setter\"]\n         self.remote_setter = klass_info[\"remote_setter\"]\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex b13a962..05cb604 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -251,15 +251,16 @@ class ForwardManyToOneDescriptor:\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, None)\n \n-        # Set the values of the related field.\n-        else:\n-            for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n-\n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n         self.field.set_cached_value(instance, value)\n \n+        # Set the values of the related field after related object is saved.\n+        if value is not None:\n+            value.save()\n+            for lh_field, rh_field in self.field.related_fields:\n+                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+\n         # If this is a one-to-one relation, set the reverse accessor cache on\n         # the related object to the current instance to avoid an extra SQL\n         # query if it's accessed later on.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13925", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-13315", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex e59da5c..3b5f8d7 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):\n     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\n         limit_choices_to = formfield.get_limit_choices_to()\n         if limit_choices_to is not None:\n-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)\n+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()\n \n \n def fields_for_model(model, fields=None, exclude=None, widgets=None,\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14608", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex beca557..f714050 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -444,17 +444,27 @@ class BaseFormSet:\n         # probably should be. It might make sense to render each form as a\n         # table row with each field as a td.\n         forms = ' '.join(form.as_table() for form in self)\n-        return mark_safe(str(self.management_form) + '\\n' + forms)\n+        non_form_errors = str(self.non_form_errors())\n+        if non_form_errors:\n+            non_form_errors = f'<tr><td colspan=\"2\">{non_form_errors}</td></tr>'\n+            non_form_errors = mark_safe(f'<tr class=\"nonform\"><td colspan=\"2\">{self.non_form_errors().as_ul()}</td></tr>')\n+        return mark_safe(str(self.management_form) + '\\n' + non_form_errors + '\\n' + forms)\n \n     def as_p(self):\n         \"Return this formset rendered as HTML <p>s.\"\n         forms = ' '.join(form.as_p() for form in self)\n-        return mark_safe(str(self.management_form) + '\\n' + forms)\n+        non_form_errors = self.non_form_errors().as_ul()\n+        if non_form_errors:\n+            non_form_errors = mark_safe(f'<p class=\"nonform\">{non_form_errors}</p>')\n+        return mark_safe(str(self.management_form) + '\\n' + non_form_errors + '\\n' + forms)\n \n     def as_ul(self):\n         \"Return this formset rendered as HTML <li>s.\"\n         forms = ' '.join(form.as_ul() for form in self)\n-        return mark_safe(str(self.management_form) + '\\n' + forms)\n+        non_form_errors = self.non_form_errors().as_ul()\n+        if non_form_errors:\n+            non_form_errors = mark_safe(f'<li class=\"nonform\">{non_form_errors}</li>')\n+        return mark_safe(str(self.management_form) + '\\n' + non_form_errors + '\\n' + forms)\n \n \n def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..50a4323 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,6 +1010,8 @@ class CharField(Field):\n     def to_python(self, value):\n         if isinstance(value, str) or value is None:\n             return value\n+        elif isinstance(value, Enum):\n+            return value.value\n         return str(value)\n \n     def get_prep_value(self, value):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16527", "model_patch": "diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 4d29402..1814767 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -100,6 +100,7 @@ def submit_row(context):\n                 and context.get(\"show_delete\", True)\n             ),\n             \"show_save_as_new\": not is_popup\n+            and has_add_permission\n             and has_change_permission\n             and change\n             and save_as,\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16595", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-14580", "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 36f0ec3..9e813b3 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -164,7 +164,8 @@ class MigrationWriter:\n \n         # django.db.migrations is always used, but models import may not be.\n         # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n+        # Ensure models is imported if models.Model is used in the bases of any operation.\n+        if \"from django.db import models\" in imports or any('models.Model' in str(op.bases) for op in self.migration.operations if hasattr(op, 'bases')):\n             imports.discard(\"from django.db import models\")\n             imports.add(\"from django.db import migrations, models\")\n         else:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11999", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e63da1b..7919852 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -939,9 +939,13 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n \n     def _get_FIELD_display(self, field):\n-        value = getattr(self, field.attname)\n-        # force_str() to coerce lazy strings.\n-        return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n+        if not hasattr(self.__class__, 'get_%s_display' % field.name):\n+            value = getattr(self, field.attname)\n+            # force_str() to coerce lazy strings.\n+            return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n+        else:\n+            # If a custom get_FOO_display method exists, use it.\n+            return getattr(self, 'get_%s_display' % field.name)()\n \n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n         if not self.pk:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 5562d34..e4c6534 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -225,7 +225,11 @@ class ProjectState:\n         for obj in objs:\n             if obj.name == old_index_name:\n                 obj = obj.clone()\n-                obj.name = new_index_name\n+                if old_index_name == \"\":\n+                    # If the old index name was unnamed, revert it to the auto-generated name.\n+                    obj.name = obj._get_auto_create_index_name(model_state.fields, obj.fields)\n+                else:\n+                    obj.name = new_index_name\n             new_indexes.append(obj)\n \n         model_state.options[\"indexes\"] = new_indexes\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15252", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex cf1aec2..d02c3c0 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -58,6 +58,10 @@ class MigrationRecorder:\n \n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migration is allowed on this db\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, self.Migration):\n+            return\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -93,4 +97,4 @@ class MigrationRecorder:\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n-        self.migration_qs.all().delete()\n+        self.migration_qs.all().delete()\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14999", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 165c6f5..dec0c4d 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -321,11 +321,12 @@ class RenameModel(ModelOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+            if new_model._meta.db_table != old_model._meta.db_table:\n+                schema_editor.alter_db_table(\n+                    new_model,\n+                    old_model._meta.db_table,\n+                    new_model._meta.db_table,\n+                )\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n@@ -354,11 +355,12 @@ class RenameModel(ModelOperation):\n                 # Rename the M2M table that's based on this model's name.\n                 old_m2m_model = old_field.remote_field.through\n                 new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n+                if new_m2m_model._meta.db_table != old_m2m_model._meta.db_table:\n+                    schema_editor.alter_db_table(\n+                        new_m2m_model,\n+                        old_m2m_model._meta.db_table,\n+                        new_m2m_model._meta.db_table,\n+                    )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10297", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7490", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 00bbbaf..a59a5cf 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,20 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows or []\n \n     def write(self, lines):\n         lines = super().write(lines)\n+        \n+        # Add additional header rows if specified\n+        if self.header_rows:\n+            header_format = \"{:>{}}}\" * len(self.header_class.names)\n+            header_widths = [len(name) for name in self.header_class.names]\n+            for row in self.header_rows:\n+                header_line = header_format.format(*row, *header_widths)\n+                lines.insert(1, header_line)\n+            \n         lines = [lines[1]] + lines + [lines[1]]\n         return lines\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13439", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..3ef7a5a 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -131,6 +131,10 @@ class Pipeline(_BaseComposition):\n         self._validate_steps()\n         self.memory = memory\n \n+    def __len__(self):\n+        \"\"\"Returns the number of steps in the pipeline.\"\"\"\n+        return len(self.steps)\n+\n     def get_params(self, deep=True):\n         \"\"\"Get parameters for this estimator.\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11179", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 1dfb454..3a462f1 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,7 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n@@ -324,4 +325,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..0b7c6cc 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -168,7 +168,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s\" % (module, klass.__qualname__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16139", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 58862c6..c7043c6 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13033", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 13e70df..f88738b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -279,11 +279,9 @@ class SQLCompiler:\n         \"\"\"\n         if self.query.extra_order_by:\n             ordering = self.query.extra_order_by\n-        elif not self.query.default_ordering:\n-            ordering = self.query.order_by\n         elif self.query.order_by:\n             ordering = self.query.order_by\n-        elif self.query.get_meta().ordering:\n+        elif not self.query.default_ordering:\n             ordering = self.query.get_meta().ordering\n             self._meta_ordering = ordering\n         else:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..a500457 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -73,6 +73,8 @@ def method_decorator(decorator, name=''):\n                 \"%s (%s).\" % (name, obj, method)\n             )\n         _wrapper = _multi_decorate(decorator, method)\n+        original_method = method.func if isinstance(method, functools.partial) else method\n+        update_wrapper(_wrapper, original_method)\n         setattr(obj, name, _wrapper)\n         return obj\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14672", "model_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex 7ae0a4d..e2afd05 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -308,9 +308,10 @@ class ManyToManyRel(ForeignObjectRel):\n \n     @property\n     def identity(self):\n+        from django.utils.functional import make_hashable\n         return super().identity + (\n             self.through,\n-            self.through_fields,\n+            make_hashable(self.through_fields),\n             self.db_constraint,\n         )\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24970", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bd73e56..03563e6 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -727,9 +727,9 @@ class Colormap:\n                 xa = xa.astype(int)\n         # Set the over-range indices before the under-range;\n         # otherwise the under-range values get converted to over-range.\n-        xa[xa > self.N - 1] = self._i_over\n-        xa[xa < 0] = self._i_under\n-        xa[mask_bad] = self._i_bad\n+        xa[xa > self.N - 1] = np.array(self._i_over).astype(xa.dtype)\n+        xa[xa < 0] = np.array(self._i_under).astype(xa.dtype)\n+        xa[mask_bad] = np.array(self._i_bad).astype(xa.dtype)\n \n         lut = self._lut\n         if bytes:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13142", "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a853e4a..6efce90 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -260,6 +260,7 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n         # Always do a final e-step to guarantee that the labels returned by\n         # fit_predict(X) are always consistent with fit(X).predict(X)\n         # for any value of max_iter and tol (and any random_state).\n+        self._set_parameters(best_params)\n         _, log_resp = self._e_step(X)\n \n         if not self.converged_:\n@@ -269,7 +270,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n-        self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n         self.lower_bound_ = max_lower_bound\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..bda2fac 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3462,6 +3462,11 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             # must be list for .expand_dims\n             expand_dims = list(expand_dims)\n \n+            # Add dummy values for missing dimensions\n+            for dim in expand_dims:\n+                if dim != variable_dim:\n+                    val = val.assign_coords({dim: [None] * val.shape[0]})\n+\n             return (\n                 val.assign_coords(**assign_coords)\n                 .expand_dims(expand_dims)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14915", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23314", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 392f89b..1db56c2 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -387,6 +387,9 @@ class Axes3D(Axes):\n \n     @martist.allow_rasterization\n     def draw(self, renderer):\n+        if not self.get_visible():\n+            return\n+\n         self._unstale_viewLim()\n \n         # draw the background patch\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 79b3d5e..d5a1300 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -601,6 +601,10 @@ class MatrixShaping(MatrixRequired):\n             return cls._new()\n \n         kls = type(args[0])\n+        if all(a.shape[1] == 0 for a in args):\n+            total_rows = sum(a.shape[0] for a in args)\n+            return kls._new(total_rows, 0)\n+\n         return reduce(kls.col_join, args)\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7432", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1e94c70..54cbaf3 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -284,16 +284,8 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"skipped\"\n                 rep.wasxfail = xfailed.reason\n-        elif call.when == \"call\":\n-            if xfailed.strict:\n-                rep.outcome = \"failed\"\n-                rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n-            else:\n-                rep.outcome = \"passed\"\n-                rep.wasxfail = xfailed.reason\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n-        and rep.skipped\n         and type(rep.longrepr) is tuple\n     ):\n         # skipped by mark.skipif; change the location of the failure\n@@ -311,4 +303,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..f759bea 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -909,18 +909,18 @@ class Permutation(Basic):\n                              max(temp))\n \n         if is_cycle:\n-            # it's not necessarily canonical so we won't store\n-            # it -- use the array form instead\n-            c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+            # Apply cycles in left-to-right order\n+            cycles = [Cycle(c) for c in args]\n+            # Start with the identity permutation\n+            aform = list(range(size or max(flatten(args)) + 1))\n+            for cycle in reversed(cycles):\n+                aform = _af_rmul(cycle.list(), aform)\n         else:\n             aform = list(args)\n-        if size and size > len(aform):\n-            # don't allow for truncation of permutation which\n-            # might split a cycle and lead to an invalid aform\n-            # but do allow the permutation size to be increased\n+        # Ensure size is correctly calculated when non-disjoint cycles are provided\n+        size = size or max(flatten(args)) + 1\n+        if size > len(aform):\n+            # allow the permutation size to be increased\n             aform.extend(list(range(len(aform), size)))\n         size = len(aform)\n         obj = Basic.__new__(cls, aform)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23299", "model_patch": "diff --git a/lib/matplotlib/_pylab_helpers.py b/lib/matplotlib/_pylab_helpers.py\nindex 3123d3a..d76feae 100644\n--- a/lib/matplotlib/_pylab_helpers.py\n+++ b/lib/matplotlib/_pylab_helpers.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Manage figures for the pyplot interface.\n \"\"\"\n@@ -123,6 +124,10 @@ class Gcf:\n         if label:\n             manager.set_window_title(label)\n         cls.set_active(manager)\n+        # Ensure the figure manager is not removed\n+        if manager.num not in cls.figs:\n+            cls.figs[manager.num] = manager\n+        cls.figs.move_to_end(manager.num)\n \n     @classmethod\n     def set_active(cls, manager):\n@@ -141,4 +146,4 @@ class Gcf:\n                 manager.canvas.draw_idle()\n \n \n-atexit.register(Gcf.destroy_all)\n+atexit.register(Gcf.destroy_all)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "psf__requests-2317", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14894", "model_patch": "diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex b637f36..3d93d2e 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -286,12 +286,15 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n             n_class = 1\n         n_SV = self.support_vectors_.shape[0]\n \n-        dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n-        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n-                                     dual_coef_indices.size / n_class)\n-        self.dual_coef_ = sp.csr_matrix(\n-            (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n-            (n_class, n_SV))\n+        if n_SV == 0:\n+            self.dual_coef_ = sp.csr_matrix((n_class, 0))\n+        else:\n+            dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n+            dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n+                                         dual_coef_indices.size / n_class)\n+            self.dual_coef_ = sp.csr_matrix(\n+                (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n+                (n_class, n_SV))\n \n     def predict(self, X):\n         \"\"\"Perform regression on samples in X.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8721", "model_patch": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex 27202ee..d316ef1 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -180,7 +180,9 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n \n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n-    if not hasattr(env, '_viewcode_modules'):\n+    # Check if the builder is epub and if viewcode_enable_epub is False\n+    if not hasattr(env, '_viewcode_modules') or \\\n+       (app.builder.name.startswith('epub') and not app.config.viewcode_enable_epub):\n         return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n@@ -282,7 +284,13 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_config_value('viewcode_follow_imported_members', True, False)\n     app.connect('doctree-read', doctree_read)\n     app.connect('env-merge-info', env_merge_info)\n-    app.connect('html-collect-pages', collect_pages)\n+    # Conditionally connect collect_pages only if we are not building an epub\n+    def html_collect_pages(app, pagename, templatename, context, outfilename):\n+        if not app.builder.name.startswith('epub'):\n+            for page in collect_pages(app):\n+                yield page\n+\n+    app.connect('html-collect-pages', html_collect_pages)\n     app.connect('missing-reference', missing_reference)\n     # app.add_config_value('viewcode_include_modules', [], 'env')\n     # app.add_config_value('viewcode_exclude_modules', [], 'env')\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13480", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex d6c64f7..3675548 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -586,10 +586,12 @@ class coth(HyperbolicFunction):\n             if arg.is_Add:\n                 x, m = _peeloff_ipi(arg)\n                 if m:\n-                    cothm = coth(m)\n+                    cotm = cot(m)\n                     if cotm is S.ComplexInfinity:\n                         return coth(x)\n-                    else: # cothm == 0\n+                    elif cotm is None:\n+                        return None\n+                    else: # cotm != S.ComplexInfinity\n                         return tanh(x)\n \n             if arg.func == asinh:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 85c454d..45282b3 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -189,6 +189,11 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n     # the members directly defined in the class\n     obj_dict = attrgetter(subject, '__dict__', {})\n \n+    # check if __all__ is explicitly set to an empty list\n+    __all__ = attrgetter(subject, '__all__', None)\n+    if __all__ == []:\n+        return {}  # return an empty dictionary if __all__ is empty\n+\n     members = {}  # type: Dict[str, Attribute]\n \n     # enum members\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py\nindex 9f5c4dd..3e14480 100644\n--- a/sympy/utilities/codegen.py\n+++ b/sympy/utilities/codegen.py\n@@ -910,8 +910,10 @@ class CCodeGen(CodeGen):\n         type_args = []\n         for arg in routine.arguments:\n             name = self.printer.doprint(arg.name)\n-            if arg.dimensions or isinstance(arg, ResultBase):\n+            if arg.dimensions:\n                 type_args.append((arg.get_datatype('C'), \"*%s\" % name))\n+            elif isinstance(arg, ResultBase):\n+                type_args.append((arg.get_datatype('C'), name))\n             else:\n                 type_args.append((arg.get_datatype('C'), name))\n         arguments = \", \".join([ \"%s %s\" % t for t in type_args])\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14983", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 8743303..5309968 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1267,7 +1267,7 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n         super().__init__(\n-            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n+            KFold, n_repeats, random_state, n_splits=n_splits)\n \n \n class BaseShuffleSplit(metaclass=ABCMeta):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14087", "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex dbd459e..50913d6 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2170,8 +2170,12 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n                 best_indices = np.argmax(scores, axis=1)\n-                if self.multi_class == 'ovr':\n-                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                if self.multi_class == 'ovr' and n_classes == 1:\n+                    w = np.mean([coefs_paths[0, i, best_indices[i]]\n+                                 for i in range(len(folds))], axis=0)\n+                elif self.multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[class_index, i, best_indices[i], :]\n+                                 for class_index in range(n_classes)\n                                  for i in range(len(folds))], axis=0)\n                 else:\n                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\n@@ -2190,9 +2194,16 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 if self.fit_intercept:\n                     self.intercept_ = w[:, -1]\n             else:\n-                self.coef_[index] = w[: X.shape[1]]\n+                if n_classes == 1:\n+                    self.coef_ = w[: X.shape[1]].reshape(1, -1)\n+                else:\n+                    self.coef_[index] = w[: X.shape[1]]\n+\n                 if self.fit_intercept:\n-                    self.intercept_[index] = w[-1]\n+                    if n_classes == 1:\n+                        self.intercept_ = np.array([w[-1]])\n+                    else:\n+                        self.intercept_[index] = w[-1]\n \n         self.C_ = np.asarray(self.C_)\n         self.l1_ratio_ = np.asarray(self.l1_ratio_)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13647", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-11445", "model_patch": "diff --git a/sphinx/environment/collectors/title.py b/sphinx/environment/collectors/title.py\nindex ec97f42..e1a7c67 100644\n--- a/sphinx/environment/collectors/title.py\n+++ b/sphinx/environment/collectors/title.py\n@@ -36,12 +36,14 @@ class TitleCollector(EnvironmentCollector):\n         if 'title' in doctree:\n             longtitlenode = nodes.title()\n             longtitlenode += nodes.Text(doctree['title'])\n-        # look for first section title and use that as the title\n-        for node in doctree.findall(nodes.section):\n+        # look for first section title and use that as the title, skipping over non-section nodes\n+        for node in doctree.traverse(nodes.section):\n             visitor = SphinxContentsFilter(doctree)\n             node[0].walkabout(visitor)\n-            titlenode += visitor.get_entry_text()\n-            break\n+            text = visitor.get_entry_text()\n+            if text:\n+                titlenode += text\n+                break\n         else:\n             # document has no title\n             titlenode += nodes.Text(doctree.get('title', '<no title>'))\n@@ -56,4 +58,4 @@ def setup(app: Sphinx) -> dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-7080", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 440e6fe..cb598bb 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -775,7 +775,7 @@ class PyLinter(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,  # Use self.config.ignore_paths instead of self._ignore_paths\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20154", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex aef37ab..aff8034 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1842,9 +1842,9 @@ def partitions(n, m=None, k=None, size=False):\n             break\n         room -= need\n         if size:\n-            yield sum(ms.values()), ms\n+            yield sum(ms.values()), ms.copy()\n         else:\n-            yield ms\n+            yield ms.copy()\n \n \n def ordered_partitions(n, m=None, sort=True):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13779", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 858d868..b0942af 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -78,7 +78,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18199", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17139", "model_patch": "diff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\nindex 0cdedc1..c52599c 100644\n--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -501,9 +501,9 @@ def _TR56(rv, f, g, h, max, pow):\n         if not (rv.is_Pow and rv.base.func == f):\n             return rv\n \n-        if (rv.exp < 0) == True:\n+        if rv.exp.is_real and rv.exp < 0:\n             return rv\n-        if (rv.exp > max) == True:\n+        if rv.exp.is_real and rv.exp > max:\n             return rv\n         if rv.exp == 2:\n             return h(g(rv.base.args[0])**2)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..4b47b0c 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -342,12 +342,15 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                 permuted_sign = set(lst)\n                 final_soln.update(permuted_sign)\n             elif do_permute_signs_var:\n-                permuted_sign_var = set(signed_permutations(sol))\n-                final_soln.update(permuted_sign_var)\n+                # Generate permutations of the solution\n+                permuted_sign_var = signed_permutations(sol)\n+                # Ensure permutations are in the order of the original symbols\n+                ordered_permutations = {tuple([t[v.index(i)] for i in var]) for t in permuted_sign_var}\n+                final_soln.update(ordered_permutations)\n             else:\n                 final_soln.add(sol)\n         else:\n-                final_soln.add(sol)\n+            final_soln.add(sol)\n     return final_soln\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..983c4ca 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -164,7 +164,13 @@ class BlockMatrix(MatrixExpr):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            new_blocks = self.blocks * other.blocks\n+            # Ensure that multiplication of ZeroMatrix results in ZeroMatrix\n+            for i in range(new_blocks.shape[0]):\n+                for j in range(new_blocks.shape[1]):\n+                    if isinstance(new_blocks[i, j], Zero):\n+                        new_blocks[i, j] = ZeroMatrix(self.colblocksizes[j], other.rowblocksizes[i])\n+            return BlockMatrix(new_blocks)\n \n         return self * other\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..7ed2832 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -1,3 +1,4 @@\n+\n from functools import wraps\n \n from scipy.sparse import issparse\n@@ -55,9 +56,16 @@ def _wrap_in_pandas_container(\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n-            data_to_wrap.index = index\n+        # Do not force the index of the transformed data if it is already a DataFrame\n         return data_to_wrap\n+    elif isinstance(data_to_wrap, pd.Series):\n+        # Convert Series to DataFrame and set the index and columns accordingly\n+        data_to_wrap = data_to_wrap.to_frame()\n+        if columns is not None:\n+            data_to_wrap.columns = columns\n+        return data_to_wrap\n+    \n+    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21612", "model_patch": "diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py\nindex 67c729c..b9b1b02 100644\n--- a/sympy/parsing/latex/_parse_latex_antlr.py\n+++ b/sympy/parsing/latex/_parse_latex_antlr.py\n@@ -382,11 +382,10 @@ def convert_frac(frac):\n \n     expr_top = convert_expr(frac.upper)\n     expr_bot = convert_expr(frac.lower)\n-    inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)\n     if expr_top == 1:\n-        return inverse_denom\n+        return 1 / expr_bot\n     else:\n-        return sympy.Mul(expr_top, inverse_denom, evaluate=False)\n+        return expr_top / expr_bot\n \n def convert_binom(binom):\n     expr_n = convert_expr(binom.n)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24213", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex f6b73be..0b1d671 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,10 +175,10 @@ class UnitSystem(_QuantityMapper):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().are_dimensions_compatible(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n-                        'but it should be {}'.format(\n+                        'but it should be compatible with {}'.format(\n                             addend, addend_dim, dim))\n                 factor += addend_factor\n             return factor, dim\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 973eb1a..0424b21 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3162,7 +3162,7 @@ None}, default: None\n         # The canvas cannot currently be pickled, but this has the benefit\n         # of meaning that a figure can be detached from one canvas, and\n         # re-attached to another.\n-        state.pop(\"canvas\")\n+        state.pop(\"canvas\", None)\n \n         # discard any changes to the dpi due to pixel ratio changes\n         state[\"_dpi\"] = state.get('_original_dpi', state['_dpi'])\n@@ -3170,9 +3170,16 @@ None}, default: None\n         # add version information to the state\n         state['__mpl_version__'] = mpl.__version__\n \n+        # Remove any non-pickleable objects that might have been added by align_labels()\n+        state.pop(\"_layoutgrid\", None)\n+        state.pop(\"_layoutdict\", None)\n+        state.pop(\"_layoutbox\", None)\n+        state.pop(\"_layoutgrids\", None)\n+        state.pop(\"_layout_engine\", None)\n+\n         # check whether the figure manager (if any) is registered with pyplot\n         from matplotlib import _pylab_helpers\n-        if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n+        if self.canvas and self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n         return state\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23262", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13496", "model_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 17608bc..27e4eb9 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -120,6 +120,11 @@ class IsolationForest(BaseBagging, OutlierMixin):\n     verbose : int, optional (default=0)\n         Controls the verbosity of the tree building process.\n \n+    warm_start : bool, optional (default=False)\n+        When set to ``True``, reuse the solution of the previous call to fit\n+        and add more estimators to the ensemble, otherwise, just fit a whole\n+        new forest. See :term:`the Glossary <warm_start>`.\n+\n \n     Attributes\n     ----------\n@@ -173,7 +178,8 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  n_jobs=None,\n                  behaviour='old',\n                  random_state=None,\n-                 verbose=0):\n+                 verbose=0,\n+                 warm_start=False):\n         super().__init__(\n             base_estimator=ExtraTreeRegressor(\n                 max_features=1,\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21847", "model_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 9019221..e50bdf3 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -127,7 +127,8 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                total_degree = sum(powers.values())\n+                if min_degree <= total_degree <= max_degree:\n                     monomials_list_comm.append(Mul(*item))\n             yield from set(monomials_list_comm)\n         else:\n@@ -139,7 +140,8 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                total_degree = sum(powers.values())\n+                if min_degree <= total_degree <= max_degree:\n                     monomials_list_non_comm.append(Mul(*item))\n             yield from set(monomials_list_non_comm)\n     else:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 4413d8e..af938b3 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -168,8 +168,8 @@ class UnitSystem(_QuantityMapper):\n             factor, dim = self._collect_factor_and_dimension(expr.base)\n             exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)\n             if self.get_dimension_system().is_dimensionless(exp_dim):\n-                exp_dim = 1\n-            return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n+                exp_dim = Dimension(1)  # Ensure exp_dim is a Dimension object\n+            return factor ** exp_factor, dim ** exp_factor\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22714", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex c16ec77..5dda0b2 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1201,8 +1201,8 @@ class EvaluateFalseTransformer(ast.NodeTransformer):\n \n     def visit_Call(self, node):\n         new_node = self.generic_visit(node)\n-        if isinstance(node.func, ast.Name) and node.func.id in self.functions:\n-            new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))\n+        if isinstance(node.func, ast.Name) and node.func.id in self.functions + ['Point2D']:\n+            new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.Constant(value=False, ctx=ast.Load())))\n         return new_node\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15345", "model_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex 7ecda40..201a091 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -99,7 +99,8 @@ class MCodePrinter(CodePrinter):\n             for cond, mfunc in cond_mfunc:\n                 if cond(*expr.args):\n                     return \"%s[%s]\" % (mfunc, self.stringify(expr.args, \", \"))\n-        return expr.func.__name__ + \"[%s]\" % self.stringify(expr.args, \", \")\n+        # Maintain the original order of the arguments\n+        return expr.func.__name__ + \"[%s]\" % ', '.join(self.doprint(a) for a in expr.args)\n \n     def _print_Integral(self, expr):\n         if len(expr.variables) == 1 and not expr.limits[0][1:]:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 1f2a00b..535c202 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -251,8 +251,11 @@ class sinh(HyperbolicFunction):\n         return (im%pi).is_zero\n \n     def _eval_is_extended_real(self):\n-        if self.args[0].is_extended_real:\n+        arg = self.args[0]\n+        if arg.is_extended_real:\n             return True\n+        if arg.is_Piecewise:\n+            return all(part.is_extended_real for part in arg.args)\n \n     def _eval_is_positive(self):\n         if self.args[0].is_extended_real:\n@@ -666,8 +669,11 @@ class tanh(HyperbolicFunction):\n         return (im % (pi/2)).is_zero\n \n     def _eval_is_extended_real(self):\n-        if self.args[0].is_extended_real:\n+        arg = self.args[0]\n+        if arg.is_extended_real:\n             return True\n+        if arg.is_Piecewise:\n+            return all(part.is_extended_real for part in arg.args)\n \n     def _eval_is_positive(self):\n         if self.args[0].is_extended_real:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..dabd5b6 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -328,7 +328,15 @@ def dup_sqf_list(f, K, all=False):\n         g, p, q = dup_inner_gcd(p, h, K)\n \n         if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+            # Check if g is already in the result list and update multiplicity if it is\n+            existed = False\n+            for j in range(len(result)):\n+                if dup_gcd(result[j][0], g, K) == result[j][0]:\n+                    result[j] = (result[j][0], result[j][1] + i)\n+                    existed = True\n+                    break\n+            if not existed:\n+                result.append((g, i))\n \n         i += 1\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..13641d2 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,8 +213,18 @@ class Point(GeometryEntity):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        from sympy.core.mul import Mul\n+\n         try:\n-            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n+            if isinstance(other, Mul) and any(arg.is_Point for arg in other.args):\n+                # Extract the point and the scalar\n+                scalar, point = [arg for arg in other.args if arg.is_Point][0], [arg for arg in other.args if not arg.is_Point][0]\n+                # Scale the point by the scalar\n+                scaled_point = Point([coord * scalar for coord in point.args])\n+                # Normalize dimensions and add\n+                s, o = Point._normalize_dimension(self, scaled_point)\n+            else:\n+                s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20590", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 3b46a26..a5bf507 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -180,6 +180,7 @@ def uniquely_named_symbol(xname, exprs=(), compare=str, modify=None, **assumptio\n _uniquely_named_symbol = uniquely_named_symbol\n \n class Symbol(AtomicExpr, Boolean):\n+    __slots__ = ('name', '_assumptions')\n     \"\"\"\n     Assumptions:\n        commutative = True\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11163", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-11066", "model_patch": "diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 1e6250e..ae897f9 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -24,7 +24,7 @@ class RenameContentType(migrations.RunPython):\n             content_type.model = new_model\n             try:\n                 with transaction.atomic(using=db):\n-                    content_type.save(update_fields={'model'})\n+                    content_type.save(using=db, update_fields={'model'})\n             except IntegrityError:\n                 # Gracefully fallback if a stale content type causes a\n                 # conflict as remove_stale_contenttypes will take care of\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13236", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7606", "model_patch": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e92aa72..6cc26e1 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1710,6 +1710,8 @@ class UnrecognizedUnit(IrreducibleUnit):\n         _unrecognized_operator\n \n     def __eq__(self, other):\n+        if other is None:\n+            return False\n         other = Unit(other, parse_strict='silent')\n         return isinstance(other, UnrecognizedUnit) and self.name == other.name\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7336", "model_patch": "diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py\nindex 5ce0659..cf03916 100644\n--- a/astropy/units/decorators.py\n+++ b/astropy/units/decorators.py\n@@ -220,7 +220,8 @@ class QuantityInput:\n             # Call the original function with any equivalencies in force.\n             with add_enabled_equivalencies(self.equivalencies):\n                 return_ = wrapped_function(*func_args, **func_kwargs)\n-            if wrapped_signature.return_annotation is not inspect.Signature.empty:\n+            if (wrapped_signature.return_annotation is not inspect.Signature.empty and\n+                return_ is not None):\n                 return return_.to(wrapped_signature.return_annotation)\n             else:\n                 return return_\n@@ -228,4 +229,4 @@ class QuantityInput:\n         return wrapper\n \n \n-quantity_input = QuantityInput.as_decorator\n+quantity_input = QuantityInput.as_decorator\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13579", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-10999", "model_patch": "diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py\nindex 131eab4..1c7bb45 100644\n--- a/django/utils/dateparse.py\n+++ b/django/utils/dateparse.py\n@@ -29,7 +29,7 @@ datetime_re = re.compile(\n standard_duration_re = re.compile(\n     r'^'\n     r'(?:(?P<days>-?\\d+) (days?, )?)?'\n-    r'((?:(?P<hours>-?\\d+):)(?=\\d+:\\d+))?'\n+    r'((?:(?P<hours>-?\\d+):)(?=-?\\d+:-?\\d+))?'\n     r'(?:(?P<minutes>-?\\d+):)?'\n     r'(?P<seconds>-?\\d+)'\n     r'(?:\\.(?P<microseconds>\\d{1,6})\\d{0,6})?'\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7671", "model_patch": "diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py\nindex c8df9c0..9886e71 100644\n--- a/astropy/utils/introspection.py\n+++ b/astropy/utils/introspection.py\n@@ -139,10 +139,11 @@ def minversion(module, version, inclusive=True, version_path='__version__'):\n     else:\n         have_version = resolve_name(module.__name__, version_path)\n \n+    from pkg_resources import parse_version\n     if inclusive:\n-        return LooseVersion(have_version) >= LooseVersion(version)\n+        return parse_version(have_version) >= parse_version(version)\n     else:\n-        return LooseVersion(have_version) > LooseVersion(version)\n+        return parse_version(have_version) > parse_version(version)\n \n \n def find_current_module(depth=1, finddiff=False):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11141", "model_patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex ab7f543..b9959c5 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -86,9 +86,6 @@ class MigrationLoader:\n             else:\n                 # Empty directories are namespaces.\n                 # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n-                    self.unmigrated_apps.add(app_config.label)\n-                    continue\n                 # Module is not a package (e.g. migrations.py).\n                 if not hasattr(module, '__path__'):\n                     self.unmigrated_apps.add(app_config.label)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14309", "model_patch": "diff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex c5ff3cd..9518c38 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -69,7 +69,9 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n             (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n         ):\n             return True\n-    return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n+    if args:\n+        return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n+    return False\n \n \n def _decode_mixins(tbl):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13033", "model_patch": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex 33e697b..da18291 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -74,11 +74,13 @@ class BaseTimeSeries(QTable):\n                                  \"as the first column{} but time series has no columns\"\n                                  .format(self.__class__.__name__, required_columns[0], plural))\n \n-            elif self.colnames[:len(required_columns)] != required_columns:\n+            elif not all(col in self.colnames for col in required_columns):\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                plural = 's' if len(missing_columns) > 1 else ''\n+\n+                raise ValueError(\"{} object is invalid - required column{} {} {} missing\"\n+                                 .format(self.__class__.__name__, plural, 'are' if plural else 'is', ', '.join(missing_columns)))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n@@ -89,4 +91,4 @@ class BaseTimeSeries(QTable):\n         self._required_columns_enabled = False\n         yield\n         self._required_columns_enabled = True\n-        self._check_required_columns()\n+        self._check_required_columns()\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-10097", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 1519f57..9f3c16d 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -94,7 +94,7 @@ class URLValidator(RegexValidator):\n \n     regex = _lazy_re_compile(\n         r'^(?:[a-z0-9\\.\\-\\+]*)://'  # scheme is validated separately\n-        r'(?:\\S+(?::\\S*)?@)?'  # user:pass authentication\n+        r'(?:[^\\s:\\/@]+(?::[^\\s:\\/@]+)?@)?'  # user:pass authentication, requiring %-encoding for :, @, /\n         r'(?:' + ipv4_re + '|' + ipv6_re + '|' + host_re + ')'\n         r'(?::\\d{2,5})?'  # port\n         r'(?:[/?#][^\\s]*)?'  # resource path\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14598", "model_patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex c54f5c8..19f2e68 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -859,7 +859,7 @@ class Card(_Verify):\n                     return kw, vc\n \n                 value = m.group(\"strg\") or \"\"\n-                value = value.rstrip().replace(\"''\", \"'\")\n+                value = value.rstrip()\n                 if value and value[-1] == \"&\":\n                     value = value[:-1]\n                 values.append(value)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11119", "model_patch": "diff --git a/django/template/engine.py b/django/template/engine.py\nindex 8cd3dab..c3c8fea 100644\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -160,7 +160,7 @@ class Engine:\n         if isinstance(context, Context):\n             return t.render(context)\n         else:\n-            return t.render(Context(context))\n+            return t.render(Context(context, autoescape=self.autoescape))\n \n     def select_template(self, template_name_list):\n         \"\"\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11095", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 62b54f5..e554fbb 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -580,9 +580,12 @@ class ModelAdmin(BaseModelAdmin):\n     def __str__(self):\n         return \"%s.%s\" % (self.model._meta.app_label, self.__class__.__name__)\n \n+    def get_inlines(self, request, obj=None):\n+        return self.inlines\n+\n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14508", "model_patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 471c162..b0d5a01 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,7 +1299,23 @@ def _format_value(value):\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = f\"{value:.16G}\"\n+    value_str = str(value)\n+    if len(value_str) > 20:\n+        value_str = f\"{value:.16G}\"\n+    if \".\" not in value_str and \"E\" not in value_str:\n+        value_str += \".0\"\n+    elif \"E\" in value_str:\n+        # On some Windows builds of Python (and possibly other platforms?) the\n+        # exponent is zero-padded out to, it seems, three digits.  Normalize\n+        # the format to pad only to two digits.\n+        significand, exponent = value_str.split(\"E\")\n+        if exponent[0] in (\"+\", \"-\"):\n+            sign = exponent[0]\n+            exponent = exponent[1:]\n+        else:\n+            sign = \"\"\n+        exponent = int(exponent)\n+        value_str = f\"{significand}E{sign}{exponent:02d}\"\n     if \".\" not in value_str and \"E\" not in value_str:\n         value_str += \".0\"\n     elif \"E\" in value_str:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11239", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex c7c6a11..dd9fdd6 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -24,6 +24,20 @@ class DatabaseClient(BaseDatabaseClient):\n             args += ['-h', host]\n         if port:\n             args += ['-p', str(port)]\n+        sslmode = conn_params.get('sslmode', '')\n+        sslrootcert = conn_params.get('sslrootcert', '')\n+        sslcert = conn_params.get('sslcert', '')\n+        sslkey = conn_params.get('sslkey', '')\n+\n+        if sslmode:\n+            args += ['-c', f\"sslmode={sslmode}\"]\n+        if sslrootcert:\n+            args += ['-c', f\"sslrootcert={sslrootcert}\"]\n+        if sslcert:\n+            args += ['-c', f\"sslcert={sslcert}\"]\n+        if sslkey:\n+            args += ['-c', f\"sslkey={sslkey}\"]\n+\n         args += [dbname]\n \n         sigint_handler = signal.getsignal(signal.SIGINT)\n@@ -39,4 +53,4 @@ class DatabaseClient(BaseDatabaseClient):\n             signal.signal(signal.SIGINT, sigint_handler)\n \n     def runshell(self):\n-        DatabaseClient.runshell_db(self.connection.get_connection_params())\n+        DatabaseClient.runshell_db(self.connection.get_connection_params())\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11087", "model_patch": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 7f93d07..143ddca 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -189,7 +189,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     def get_connection_params(self):\n         kwargs = {\n             'conv': django_conversions,\n-            'charset': 'utf8',\n+            'charset': self.settings_dict.get('CHARSET', 'utf8'),\n         }\n         settings_dict = self.settings_dict\n         if settings_dict['USER']:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11138", "model_patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 3337c6c..759b2ba 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -70,7 +70,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n \n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            db_timezone = self.connection.settings_dict.get('TIME_ZONE', 'UTC')\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, db_timezone, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-10880", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-11292", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex c0cee4d..268c6e3 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -286,6 +286,10 @@ class BaseCommand:\n             '--force-color', action='store_true',\n             help='Force colorization of the command output.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         self.add_arguments(parser)\n         return parser\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14369", "model_patch": "diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py\nindex adb3840..7406f4e 100644\n--- a/astropy/io/ascii/cds.py\n+++ b/astropy/io/ascii/cds.py\n@@ -130,7 +130,11 @@ class CdsHeader(core.BaseHeader):\n                 if unit == \"---\":\n                     col.unit = None  # \"---\" is the marker for no unit in CDS/MRT table\n                 else:\n-                    col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n+                    try:\n+                        col.unit = Unit(unit, format=\"cds\", parse_strict=\"warn\")\n+                    except ValueError as e:\n+                        warnings.warn(f'Could not parse unit \"{unit}\" from CDS format: {str(e)}')\n+                        col.unit = unit  # Fallback to raw string if parsing fails\n                 col.description = (match.group(\"descr\") or \"\").strip()\n                 col.raw_type = match.group(\"format\")\n                 col.type = self.get_col_type(col)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13977", "model_patch": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex cf3b2c2..a5adad7 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -2624,12 +2624,13 @@ def _condition_arg(value):\n     if isinstance(value, (np.ndarray, float, int, complex, np.void)):\n         return value\n \n+    # Check if the input is a Quantity or a duck type of Quantity\n+    if hasattr(value, 'to'):\n+        return value.to(u.dimensionless_unscaled).value\n+\n     avalue = np.array(value)\n     if avalue.dtype.kind not in [\"i\", \"f\", \"c\"]:\n-        raise ValueError(\n-            \"Value not scalar compatible or convertible to \"\n-            \"an int, float, or complex array\"\n-        )\n+        return NotImplemented\n     return avalue\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11477", "model_patch": "diff --git a/django/urls/base.py b/django/urls/base.py\nindex e420dc6..312c957 100644\n--- a/django/urls/base.py\n+++ b/django/urls/base.py\n@@ -172,9 +172,11 @@ def translate_url(url, lang_code):\n         to_be_reversed = \"%s:%s\" % (match.namespace, match.url_name) if match.namespace else match.url_name\n         with override(lang_code):\n             try:\n-                url = reverse(to_be_reversed, args=match.args, kwargs=match.kwargs)\n+                # Filter out None values from match.kwargs to handle missing optional arguments\n+                filtered_kwargs = {k: v for k, v in match.kwargs.items() if v is not None}\n+                url = reverse(to_be_reversed, args=match.args, kwargs=filtered_kwargs)\n             except NoReverseMatch:\n                 pass\n             else:\n                 url = urlunsplit((parsed.scheme, parsed.netloc, url, parsed.query, parsed.fragment))\n-    return url\n+    return url\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11276", "model_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex 1bacb5c..4f68075 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -24,14 +24,7 @@ word_split_re = re.compile(r'''([\\s<>\"']+)''')\n simple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\n simple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)\n \n-_html_escapes = {\n-    ord('&'): '&amp;',\n-    ord('<'): '&lt;',\n-    ord('>'): '&gt;',\n-    ord('\"'): '&quot;',\n-    ord(\"'\"): '&#39;',\n-}\n-\n+import html\n \n @keep_lazy(str, SafeString)\n def escape(text):\n@@ -43,7 +36,7 @@ def escape(text):\n     This may result in double-escaping. If this is a concern, use\n     conditional_escape() instead.\n     \"\"\"\n-    return mark_safe(str(text).translate(_html_escapes))\n+    return mark_safe(html.escape(str(text), quote=True))\n \n \n _js_escapes = {\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11603", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 8d54185..a2f1d88 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -99,6 +99,7 @@ class Aggregate(Func):\n class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):\n     function = 'AVG'\n     name = 'Avg'\n+    allow_distinct = True\n \n \n class Count(Aggregate):\n@@ -142,6 +143,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):\n class Sum(FixDurationInputMixin, Aggregate):\n     function = 'SUM'\n     name = 'Sum'\n+    allow_distinct = True\n \n \n class Variance(NumericOutputFieldMixin, Aggregate):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11532", "model_patch": "diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py\nindex af5ac38..c39eff4 100644\n--- a/django/core/mail/utils.py\n+++ b/django/core/mail/utils.py\n@@ -7,14 +7,17 @@ import socket\n \n # Cache the hostname, but do it lazily: socket.getfqdn() can take a couple of\n # seconds, which slows down the restart of the server.\n+import socket\n+import idna\n+\n class CachedDnsName:\n     def __str__(self):\n         return self.get_fqdn()\n \n     def get_fqdn(self):\n         if not hasattr(self, '_fqdn'):\n-            self._fqdn = socket.getfqdn()\n+            self._fqdn = idna.encode(socket.getfqdn()).decode('ascii')\n         return self._fqdn\n \n \n-DNS_NAME = CachedDnsName()\n+DNS_NAME = CachedDnsName()\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11400", "model_patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex 51b3fb2..f00e2dc 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -198,6 +198,8 @@ class RelatedFieldListFilter(FieldListFilter):\n         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = field.remote_field.model._meta.ordering\n         return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n@@ -419,4 +421,10 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+        ordering = ()\n+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        if related_admin is not None:\n+            ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = field.remote_field.model._meta.ordering\n+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-8872", "model_patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex 0ffb147..68a07e0 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -377,10 +377,10 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):\n                             \"Numpy numeric type.\")\n \n         # by default, cast any integer, boolean, etc., to float\n-        if dtype is None and (not (np.can_cast(np.float32, value.dtype)\n-                                   or value.dtype.fields)\n-                              or value.dtype.kind == 'O'):\n-            value = value.astype(float)\n+        if dtype is None and value.dtype != np.float16:\n+            # Only cast to float if the dtype is not float16, to prevent automatic promotion.\n+            if not (np.can_cast(np.float32, value.dtype) or value.dtype.fields) or value.dtype.kind == 'O':\n+                value = value.astype(float)\n \n         value = value.view(cls)\n         value._set_unit(value_unit)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11206", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex d5baf57..3e1152c 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n \n from django.conf import settings\n@@ -30,17 +31,10 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n         # Format values with more than 200 digits (an arbitrary cutoff) using\n         # scientific notation to avoid high memory usage in {:f}'.format().\n         _, digits, exponent = number.as_tuple()\n-        if abs(exponent) + len(digits) > 200:\n-            number = '{:e}'.format(number)\n-            coefficient, exponent = number.split('e')\n-            # Format the coefficient.\n-            coefficient = format(\n-                coefficient, decimal_sep, decimal_pos, grouping,\n-                thousand_sep, force_grouping, use_l10n,\n-            )\n-            return '{}e{}'.format(coefficient, exponent)\n-        else:\n-            str_number = '{:f}'.format(number)\n+        str_number = '{:f}'.format(number)\n+        if decimal_pos is not None:\n+            # Ensure the number is formatted with the specified decimal positions\n+            str_number = f\"{number:.{decimal_pos}f}\"\n     else:\n         str_number = str(number)\n     if str_number[0] == '-':\n@@ -76,4 +70,4 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n             int_part_gd += digit\n             cnt += 1\n         int_part = int_part_gd[::-1]\n-    return sign + int_part + dec_part\n+    return sign + int_part + dec_part\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11333", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex fa86ab6..557349d 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -63,10 +63,11 @@ class ResolverMatch:\n         )\n \n \n+from django.conf import settings\n+\n @functools.lru_cache(maxsize=None)\n-def get_resolver(urlconf=None):\n-    if urlconf is None:\n-        urlconf = settings.ROOT_URLCONF\n+def get_resolver():\n+    urlconf = settings.ROOT_URLCONF\n     return URLResolver(RegexPattern(r'^/'), urlconf)\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11451", "model_patch": "diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\nindex ada7461..4087f6e 100644\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -37,6 +37,8 @@ class ModelBackend(BaseBackend):\n     \"\"\"\n \n     def authenticate(self, request, username=None, password=None, **kwargs):\n+        if username is None or password is None:\n+            return\n         if username is None:\n             username = kwargs.get(UserModel.USERNAME_FIELD)\n         try:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12155", "model_patch": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 63ee2fc..51cb1ff 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -34,7 +34,7 @@ def trim_docstring(docstring):\n         return ''\n     # Convert tabs to spaces and split into lines\n     lines = docstring.expandtabs().splitlines()\n-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())\n+    indent = min(len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip())\n     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]\n     return \"\\n\".join(trimmed).strip()\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..52aec4b 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -131,10 +131,17 @@ def call_command(command_name, *args, **options):\n \n     parser_actions = list(get_actions(parser))\n     # Any required arguments which are passed in via **options must be passed\n-    # to parse_args().\n+    # to parse_args(). This includes arguments from required mutually exclusive groups.\n+    mutually_exclusive_groups = {action for action in parser_actions if isinstance(action, _MutuallyExclusiveGroupAction) and action.required}\n+    for group in mutually_exclusive_groups:\n+        for opt in group._group_actions:\n+            if opt.dest in arg_options:\n+                parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest])]\n+                break  # Since they are mutually exclusive, we can break after finding the first one\n+\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in parser_actions if opt.required and opt.dest in options and not isinstance(opt, _MutuallyExclusiveGroupAction)\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11299", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 709d8ae..53efe06 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -401,6 +401,11 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     def add_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and constraint.condition:\n             super().add_constraint(model, constraint)\n+        elif isinstance(constraint, CheckConstraint):\n+            # Generate the SQL for adding the constraint without table qualifications\n+            check = self._create_check_sql(model, constraint.name, constraint.check)\n+            check_sql = self._check_sql(constraint.name, check.check)\n+            self.execute(check_sql)\n         else:\n             self._remake_table(model)\n \n@@ -408,4 +413,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         if isinstance(constraint, UniqueConstraint) and constraint.condition:\n             super().remove_constraint(model, constraint)\n         else:\n-            self._remake_table(model)\n+            self._remake_table(model)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13453", "model_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 1220930..c8c39fb 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -355,6 +355,9 @@ class HTML(core.BaseReader):\n \n         self.data._set_fill_values(cols)\n \n+        # Set column formats based on the formats dictionary\n+        self.data._set_col_formats()\n+\n         lines = []\n \n         # Set HTML escaping to False for any column in the raw_html_cols input\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12143", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 0fb4989..b3ffb52 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1631,7 +1631,7 @@ class ModelAdmin(BaseModelAdmin):\n \n     def _get_edited_object_pks(self, request, prefix):\n         \"\"\"Return POST data values of list_editable primary keys.\"\"\"\n-        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(prefix, self.model._meta.pk.name))\n+        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name))\n         return [value for key, value in request.POST.items() if pk_pattern.match(key)]\n \n     def _get_list_editable_queryset(self, request, prefix):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14096", "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex f158027..32bb243 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -875,14 +875,28 @@ class SkyCoord(ShapedLikeNDArray):\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n \n-            # Anything in the set of all possible frame_attr_names is handled\n-            # here. If the attr is relevant for the current frame then delegate\n-            # to self.frame otherwise get it from self._<attr>.\n-            if attr in frame_transform_graph.frame_attributes:\n-                if attr in self.frame.frame_attributes:\n-                    return getattr(self.frame, attr)\n-                else:\n-                    return getattr(self, \"_\" + attr, None)\n+            # Handle frame attributes and private attributes\n+            try:\n+                if attr in frame_transform_graph.frame_attributes:\n+                    if attr in self.frame.frame_attributes:\n+                        return getattr(self.frame, attr)\n+                    else:\n+                        return getattr(self, \"_\" + attr, None)\n+                \n+                # Some attributes might not fall in the above category but still\n+                # are available through self._sky_coord_frame.\n+                if not attr.startswith(\"_\") and hasattr(self._sky_coord_frame, attr):\n+                    return getattr(self._sky_coord_frame, attr)\n+                \n+                # Try to interpret as a new frame for transforming.\n+                frame_cls = frame_transform_graph.lookup_name(attr)\n+                if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n+                    return self.transform_to(attr)\n+            except AttributeError as e:\n+                # If an AttributeError was raised, re-raise it with the correct attribute name\n+                raise AttributeError(\n+                    f\"'{self.__class__.__name__}' object has no attribute '{e.args[0].split('.')[-1]}'\"\n+                ) from e\n \n             # Some attributes might not fall in the above category but still\n             # are available through self._sky_coord_frame.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11149", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex acc7653..9ace548 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2147,10 +2147,7 @@ class InlineModelAdmin(BaseModelAdmin):\n                 if field.remote_field and field.remote_field.model != self.parent_model:\n                     opts = field.remote_field.model._meta\n                     break\n-            return (\n-                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) or\n-                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n-            )\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts)))\n         return super().has_view_permission(request)\n \n \n@@ -2159,4 +2156,4 @@ class StackedInline(InlineModelAdmin):\n \n \n class TabularInline(InlineModelAdmin):\n-    template = 'admin/edit_inline/tabular.html'\n+    template = 'admin/edit_inline/tabular.html'\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12039", "model_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 1e5b986..1636cd5 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -112,11 +112,13 @@ class IndexColumns(Columns):\n         def col_str(column, idx):\n             # Index.__init__() guarantees that self.opclasses is the same\n             # length as self.columns.\n-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n-            try:\n-                col = '{} {}'.format(col, self.col_suffixes[idx])\n-            except IndexError:\n-                pass\n+            col = self.quote_name(column)\n+            opclass = self.opclasses[idx]\n+            if opclass:\n+                col = '{} {}'.format(col, opclass)\n+            suffix = self.col_suffixes[idx]\n+            if suffix:\n+                col = '{} {}'.format(col, suffix)\n             return col\n \n         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-10973", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex f49b2f8..e2140ec 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -37,28 +37,12 @@ class DatabaseClient(BaseDatabaseClient):\n         temp_pgpass = None\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n-            if passwd:\n-                # Create temporary .pgpass file.\n-                temp_pgpass = NamedTemporaryFile(mode='w+')\n-                try:\n-                    print(\n-                        _escape_pgpass(host) or '*',\n-                        str(port) or '*',\n-                        _escape_pgpass(dbname) or '*',\n-                        _escape_pgpass(user) or '*',\n-                        _escape_pgpass(passwd),\n-                        file=temp_pgpass,\n-                        sep=':',\n-                        flush=True,\n-                    )\n-                    os.environ['PGPASSFILE'] = temp_pgpass.name\n-                except UnicodeEncodeError:\n-                    # If the current locale can't encode the data, let the\n-                    # user input the password manually.\n-                    pass\n+            env = os.environ.copy()\n+            env['PGPASSWORD'] = passwd\n+\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            subprocess.run(args, env=env, check=True)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n@@ -68,4 +52,4 @@ class DatabaseClient(BaseDatabaseClient):\n                     del os.environ['PGPASSFILE']\n \n     def runshell(self):\n-        DatabaseClient.runshell_db(self.connection.get_connection_params())\n+        DatabaseClient.runshell_db(self.connection.get_connection_params())\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12050", "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex ba8a5e5..f03e531 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -253,7 +253,7 @@ class FieldGetDbPrepValueIterableMixin(FieldGetDbPrepValueMixin):\n             for sql, param in zip(*pre_processed)\n         ))\n         params = itertools.chain.from_iterable(params)\n-        return sql, tuple(params)\n+        return sql, list(params)\n \n \n @Field.register_lookup\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..6c37b2e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -356,7 +356,12 @@ class SQLCompiler:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    # Add the column to the select list if it's not there\n+                    if self.query.combinator:\n+                        sql, params = self.compile(src, select_format=True)\n+                        self.select.append((src, (sql, params), 'temp_col_%d' % idx))\n+                        resolved.set_source_expressions([RawSQL('%d' % (len(self.select)), ())])\n+            sql, params = self.compile(resolved)\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12304", "model_patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex ab625f8..9c47569 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -60,6 +60,7 @@ class ChoicesMeta(enum.EnumMeta):\n \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n+    do_not_call_in_templates = True\n \n     def __str__(self):\n         \"\"\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12419", "model_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex be2f32a..8bb59a4 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -637,6 +637,6 @@ SECURE_HSTS_INCLUDE_SUBDOMAINS = False\n SECURE_HSTS_PRELOAD = False\n SECURE_HSTS_SECONDS = 0\n SECURE_REDIRECT_EXEMPT = []\n-SECURE_REFERRER_POLICY = None\n+SECURE_REFERRER_POLICY = 'same-origin'\n SECURE_SSL_HOST = None\n-SECURE_SSL_REDIRECT = False\n+SECURE_SSL_REDIRECT = False\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11790", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 4d607f6..fd4dffb 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -192,6 +192,7 @@ class AuthenticationForm(forms.Form):\n         # Set the max length and label for the \"username\" field.\n         self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n         self.fields['username'].max_length = self.username_field.max_length or 254\n+        self.fields['username'].widget.attrs['maxlength'] = str(self.fields['username'].max_length)\n         if self.fields['username'].label is None:\n             self.fields['username'].label = capfirst(self.username_field.verbose_name)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11551", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 2c6f2d7..f2848a0 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -720,33 +720,33 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         elif hasattr(obj, item):\n             return []\n-        elif hasattr(obj.model, item):\n+        else:\n             try:\n                 field = obj.model._meta.get_field(item)\n             except FieldDoesNotExist:\n-                return []\n-            else:\n-                if isinstance(field, models.ManyToManyField):\n+                try:\n+                    field = getattr(obj.model, item)\n+                except AttributeError:\n                     return [\n                         checks.Error(\n-                            \"The value of '%s' must not be a ManyToManyField.\" % label,\n+                            \"The value of '%s' refers to '%s', which is not a callable, \"\n+                            \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n+                                label, item, obj.__class__.__name__,\n+                                obj.model._meta.app_label, obj.model._meta.object_name,\n+                            ),\n                             obj=obj.__class__,\n-                            id='admin.E109',\n+                            id='admin.E108',\n                         )\n                     ]\n-                return []\n-        else:\n-            return [\n-                checks.Error(\n-                    \"The value of '%s' refers to '%s', which is not a callable, \"\n-                    \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n-                        label, item, obj.__class__.__name__,\n-                        obj.model._meta.app_label, obj.model._meta.object_name,\n-                    ),\n-                    obj=obj.__class__,\n-                    id='admin.E108',\n-                )\n-            ]\n+            if isinstance(field, models.ManyToManyField):\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' must not be a ManyToManyField.\" % label,\n+                        obj=obj.__class__,\n+                        id='admin.E109',\n+                    )\n+                ]\n+            return []\n \n     def _check_list_display_links(self, obj):\n         \"\"\" Check that list_display_links is a unique subset of list_display.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..14f74a9 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1081,6 +1081,9 @@ class Exists(Subquery):\n         queryset = queryset.order_by()\n         self.negated = negated\n         super().__init__(queryset, **kwargs)\n+        # Ensure the queryset is marked as a subquery if it contains OuterRef\n+        if queryset.query.subquery_related:\n+            self.queryset.query.subquery = True\n \n     def __invert__(self):\n         clone = self.copy()\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11265", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 1309ca5..de25798 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1666,6 +1666,8 @@ class Query(BaseExpression):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         # Generate the inner query.\n         query = Query(self.model)\n+        # Copy annotations from the original query to the inner query\n+        query.annotations = self.annotations.copy()\n         query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         # Try to have as simple as possible subquery -> trim leading joins from\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11880", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex f5c7cc2..8875861 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -200,6 +200,7 @@ class Field:\n         memo[id(self)] = result\n         result.widget = copy.deepcopy(self.widget, memo)\n         result.validators = self.validators[:]\n+        result.error_messages = copy.deepcopy(self.error_messages, memo)  # Added this line to deeply copy error_messages\n         return result\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12741", "model_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 5fc53dc..ed2f91a 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -400,9 +400,9 @@ class BaseDatabaseOperations:\n         \"\"\"\n         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')\n \n-    def execute_sql_flush(self, using, sql_list):\n+    def execute_sql_flush(self, sql_list):\n         \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n-        with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):\n+        with transaction.atomic(using=self.connection.alias, savepoint=self.connection.features.can_rollback_ddl):\n             with self.connection.cursor() as cursor:\n                 for sql in sql_list:\n                     cursor.execute(sql)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11728", "model_patch": "diff --git a/django/utils/regex_helper.py b/django/utils/regex_helper.py\nindex 0f25cd8..11be991 100644\n--- a/django/utils/regex_helper.py\n+++ b/django/utils/regex_helper.py\n@@ -83,8 +83,8 @@ def normalize(pattern):\n                 raise NotImplementedError('Awaiting Implementation')\n             elif ch == \"^\":\n                 pass\n-            elif ch == '$':\n-                break\n+            # elif ch == '$':\n+            #     break\n             elif ch == ')':\n                 # This can only be the end of a non-capturing group, since all\n                 # other unescaped parentheses are handled by the grouping\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12193", "model_patch": "diff --git a/django/contrib/postgres/forms/array.py b/django/contrib/postgres/forms/array.py\nindex 9bc059d..4d1489c 100644\n--- a/django/contrib/postgres/forms/array.py\n+++ b/django/contrib/postgres/forms/array.py\n@@ -145,9 +145,11 @@ class SplitArrayWidget(forms.Widget):\n             except IndexError:\n                 widget_value = None\n             if id_:\n-                final_attrs = {**final_attrs, 'id': '%s_%s' % (id_, i)}\n+                subwidget_attrs = {**final_attrs, 'id': '%s_%s' % (id_, i)}\n+            else:\n+                subwidget_attrs = final_attrs\n             context['widget']['subwidgets'].append(\n-                self.widget.get_context(name + '_%s' % i, widget_value, final_attrs)['widget']\n+                self.widget.get_context(name + '_%s' % i, widget_value, subwidget_attrs)['widget']\n             )\n         return context\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13109", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 72731ef..42136c1 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -914,7 +914,7 @@ class ForeignKey(ForeignObject):\n             return\n \n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\n-        qs = self.remote_field.model._default_manager.using(using).filter(\n+        qs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n         qs = qs.complex_filter(self.get_limit_choices_to())\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12209", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex a315aef..f756b26 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -852,7 +852,8 @@ class Model(metaclass=ModelBase):\n             not force_insert and\n             self._state.adding and\n             self._meta.pk.default and\n-            self._meta.pk.default is not NOT_PROVIDED\n+            self._meta.pk.default is not NOT_PROVIDED and\n+            getattr(self, self._meta.pk.attname) is None  # Check if pk is not explicitly set\n         ):\n             force_insert = True\n         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13112", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-12276", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex e858b4f..d0d7af7 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -452,7 +452,7 @@ class ClearableFileInput(FileInput):\n         return upload\n \n     def use_required_attribute(self, initial):\n-        return super().use_required_attribute(initial) and not initial\n+        return super().use_required_attribute(initial)\n \n     def value_omitted_from_data(self, data, files, name):\n         return (\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12663", "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9cf4391..a0e87e2 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -68,6 +68,9 @@ class Lookup:\n             self.lhs, self.rhs = new_exprs\n \n     def get_prep_lookup(self):\n+        from django.utils.functional import SimpleLazyObject\n+        if isinstance(self.rhs, SimpleLazyObject):\n+            self.rhs = self.rhs._setup()\n         if hasattr(self.rhs, 'resolve_expression'):\n             return self.rhs\n         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13297", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3bf5851..3c0440f 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -202,8 +202,11 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n-                        model)\n+                if issubclass(model._meta.pk.get_prep_value(getattr(obj, self.fk_field)), uuid.UUID):\n+                    fk_val = uuid.UUID(getattr(obj, self.fk_field))\n+                else:\n+                    fk_val = model._meta.pk.get_prep_value(getattr(obj, self.fk_field))\n+                return (fk_val, model)\n \n         return (\n             ret_val,\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11740", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-13089", "model_patch": "diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex a65b985..45383f9 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -267,13 +267,15 @@ class DatabaseCache(BaseDatabaseCache):\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\n-                cursor.execute(\"DELETE FROM %s \"\n-                               \"WHERE cache_key < %%s\" % table,\n-                               [cursor.fetchone()[0]])\n+                row = cursor.fetchone()\n+                if row is not None:\n+                    cursor.execute(\"DELETE FROM %s \"\n+                                   \"WHERE cache_key < %%s\" % table,\n+                                   [row[0]])\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n         connection = connections[db]\n         table = connection.ops.quote_name(self._table)\n         with connection.cursor() as cursor:\n-            cursor.execute('DELETE FROM %s' % table)\n+            cursor.execute('DELETE FROM %s' % table)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11490", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 78e67cd..9e355ca 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -501,14 +501,24 @@ class SQLCompiler:\n \n                 out_cols = []\n                 col_idx = 1\n-                for _, (s_sql, s_params), alias in self.select + extra_select:\n-                    if alias:\n-                        s_sql = '%s AS %s' % (s_sql, self.connection.ops.quote_name(alias))\n-                    elif with_col_aliases:\n-                        s_sql = '%s AS %s' % (s_sql, 'Col%d' % col_idx)\n-                        col_idx += 1\n-                    params.extend(s_params)\n-                    out_cols.append(s_sql)\n+                if self.query.select_fields:\n+                    for field in self.query.select_fields:\n+                        s_sql = self.get_field_sql(field)\n+                        s_params = self.get_field_params(field)\n+                        if with_col_aliases:\n+                            s_sql = '%s AS %s' % (s_sql, 'Col%d' % col_idx)\n+                            col_idx += 1\n+                        params.extend(s_params)\n+                        out_cols.append(s_sql)\n+                else:\n+                    for _, (s_sql, s_params), alias in self.select + extra_select:\n+                        if alias:\n+                            s_sql = '%s AS %s' % (s_sql, self.connection.ops.quote_name(alias))\n+                        elif with_col_aliases:\n+                            s_sql = '%s AS %s' % (s_sql, 'Col%d' % col_idx)\n+                            col_idx += 1\n+                        params.extend(s_params)\n+                        out_cols.append(s_sql)\n \n                 result += [', '.join(out_cols), 'FROM', *from_]\n                 params.extend(f_params)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13023", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex b1fce64..2c90ed6 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1495,6 +1495,12 @@ class DecimalField(Field):\n         return \"DecimalField\"\n \n     def to_python(self, value):\n+        if isinstance(value, dict):\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         if value is None:\n             return value\n         if isinstance(value, float):\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 26e4726..b7a2ec4 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -339,6 +339,8 @@ class DecimalField(IntegerField):\n         than max_digits in the number and no more than decimal_places digits\n         after the decimal point.\n         \"\"\"\n+        if isinstance(value, dict):\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n         if value in self.empty_values:\n             return None\n         if self.localize:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11951", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex ba5549a..631d83e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -456,6 +456,11 @@ class QuerySet:\n         # Oracle as well, but the semantics for extracting the primary keys is\n         # trickier so it's not done yet.\n         assert batch_size is None or batch_size > 0\n+        max_batch_size = connection.ops.bulk_batch_size(opts)\n+        if batch_size is not None:\n+            batch_size = min(batch_size, max_batch_size)\n+        else:\n+            batch_size = max_batch_size\n         # Check that the parents share the same concrete model with the our\n         # model to detect the inheritance pattern ConcreteGrandParent ->\n         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12406", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 3670478..f995f88 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1185,7 +1185,7 @@ class ModelChoiceField(ChoiceField):\n                  required=True, widget=None, label=None, initial=None,\n                  help_text='', to_field_name=None, limit_choices_to=None,\n                  **kwargs):\n-        if required and (initial is not None):\n+        if required and not blank:\n             self.empty_label = None\n         else:\n             self.empty_label = empty_label\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12262", "model_patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex e9453ed..2adb69d 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -253,7 +253,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n     unhandled_params = list(params)\n     unhandled_kwargs = [\n         kwarg for kwarg in kwonly\n-        if not kwonly_defaults or kwarg not in kwonly_defaults\n+        if kwonly_defaults is None or kwarg not in kwonly_defaults\n     ]\n     for bit in bits:\n         # First we try to extract a potential kwarg from the bit\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13398", "model_patch": "diff --git a/astropy/coordinates/transformations.py b/astropy/coordinates/transformations.py\nindex 59d2041..0d39d07 100644\n--- a/astropy/coordinates/transformations.py\n+++ b/astropy/coordinates/transformations.py\n@@ -1072,6 +1072,14 @@ class FunctionTransformWithFiniteDifference(FunctionTransform):\n \n                 diffxyz += (fwd.cartesian - back.cartesian).xyz / dt\n \n+            # If attrname is None, we do not perform the finite difference\n+            # calculation on the frame attribute, as it does not make sense.\n+            # We simply return the representation without the induced velocities.\n+            else:\n+                newdiff = CartesianDifferential(diffxyz)\n+                reprwithdiff = reprwithoutdiff.data.to_cartesian().with_differentials(newdiff)\n+                return reprwithoutdiff.realize_frame(reprwithdiff)\n+\n             newdiff = CartesianDifferential(diffxyz)\n             reprwithdiff = reprwithoutdiff.data.to_cartesian().with_differentials(newdiff)\n             return reprwithoutdiff.realize_frame(reprwithdiff)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13279", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 5b06482..805e447 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -116,10 +116,11 @@ class SessionBase:\n     def decode(self, session_data):\n         try:\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n-        # RemovedInDjango40Warning: when the deprecation ends, handle here\n-        # exceptions similar to what _legacy_decode() does now.\n         except Exception:\n-            return self._legacy_decode(session_data)\n+            if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+                return self._legacy_decode(session_data)\n+            else:\n+                raise\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13195", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 244654c..ed6ef76 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -210,13 +210,14 @@ class HttpResponseBase:\n         value = signing.get_cookie_signer(salt=key + salt).sign(value)\n         return self.set_cookie(key, value, **kwargs)\n \n-    def delete_cookie(self, key, path='/', domain=None):\n+    def delete_cookie(self, key, path='/', domain=None, samesite=None):\n         # Most browsers ignore the Set-Cookie header if the cookie name starts\n         # with __Host- or __Secure- and the cookie doesn't use the secure flag.\n         secure = key.startswith(('__Secure-', '__Host-'))\n         self.set_cookie(\n             key, max_age=0, path=path, domain=domain, secure=secure,\n             expires='Thu, 01 Jan 1970 00:00:00 GMT',\n+            samesite=samesite,\n         )\n \n     # Common methods used by subclasses\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 1540a78..f35e8e0 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -569,6 +569,16 @@ class Options:\n                     \"be available yet.\" % (self.object_name, field_name)\n                 )\n \n+        # Check for __isnull lookup\n+        if '__isnull' in field_name:\n+            try:\n+                # Remove __isnull to check the actual field\n+                actual_field_name = field_name.replace('__isnull', '')\n+                actual_field = self.fields_map[actual_field_name]\n+                return actual_field\n+            except KeyError:\n+                raise FieldDoesNotExist(\"%s has no field named '%s'\" % (self.object_name, actual_field_name))\n+\n         try:\n             # Retrieve field instance by name from cached or just-computed\n             # field map.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12965", "model_patch": "diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex b3d1d61..96232af 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -15,7 +15,7 @@ class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):\n \n class SQLDeleteCompiler(compiler.SQLDeleteCompiler, SQLCompiler):\n     def as_sql(self):\n-        if self.connection.features.update_can_self_select or self.single_alias:\n+        if self.single_alias:\n             return super().as_sql()\n         # MySQL and MariaDB < 10.3.2 doesn't support deletion with a subquery\n         # which is what the default implementation of SQLDeleteCompiler uses\n@@ -40,4 +40,4 @@ class SQLUpdateCompiler(compiler.SQLUpdateCompiler, SQLCompiler):\n \n \n class SQLAggregateCompiler(compiler.SQLAggregateCompiler, SQLCompiler):\n-    pass\n+    pass\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13410", "model_patch": "diff --git a/django/core/files/locks.py b/django/core/files/locks.py\nindex 19083f2..4938347 100644\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,15 @@ else:\n             return True\n     else:\n         def lock(f, flags):\n-            ret = fcntl.flock(_fd(f), flags)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), flags)\n+                return True\n+            except OSError:\n+                return False\n \n         def unlock(f):\n-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+                return True\n+            except OSError:\n+                return False\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13121", "model_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 0403e91..12332d3 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -580,7 +580,8 @@ class BaseDatabaseOperations:\n \n     def convert_durationfield_value(self, value, expression, connection):\n         if value is not None:\n-            return datetime.timedelta(0, 0, value)\n+            # Assuming value is in microseconds based on the backend's conversion\n+            return datetime.timedelta(microseconds=value)\n \n     def check_expression_support(self, expression):\n         \"\"\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13513", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex d064033..3e62fdc 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -396,10 +396,11 @@ class ExceptionReporter:\n \n     def get_traceback_frames(self):\n         def explicit_or_implicit_cause(exc_value):\n-            explicit = getattr(exc_value, '__cause__', None)\n-            suppress_context = getattr(exc_value, '__suppress_context__', None)\n-            implicit = getattr(exc_value, '__context__', None)\n-            return explicit or (None if suppress_context else implicit)\n+            return (\n+                exc_value.__cause__ or\n+                (None if exc_value.__suppress_context__ else\n+                    exc_value.__context__)\n+            )\n \n         # Get the exception and all its causes\n         exceptions = []\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13343", "model_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 4e9ee79..0e8ec89 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -279,7 +279,10 @@ class FileField(Field):\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n         if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+            if callable(self.storage):\n+                kwargs['storage'] = self.storage\n+            else:\n+                kwargs['storage'] = self.storage\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13363", "model_patch": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 68c26c6..147419e 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -292,7 +292,7 @@ class TruncDate(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to date rather than truncate to date.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.tzinfo.zone if self.tzinfo else (timezone.get_current_timezone_name() if settings.USE_TZ else None)\n         sql = connection.ops.datetime_cast_date_sql(lhs, tzname)\n         return sql, lhs_params\n \n@@ -305,7 +305,7 @@ class TruncTime(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to time rather than truncate to time.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.tzinfo.zone if self.tzinfo else (timezone.get_current_timezone_name() if settings.USE_TZ else None)\n         sql = connection.ops.datetime_cast_time_sql(lhs, tzname)\n         return sql, lhs_params\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13569", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 324369a..d599c3b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -129,7 +129,10 @@ class SQLCompiler:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n             if not is_ref:\n-                expressions.extend(expr.get_group_by_cols())\n+                expressions.extend([\n+                    exp for exp in expr.get_source_expressions()\n+                    if not isinstance(exp, Random)\n+                ])\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13741", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex ac42308..4e1c8e0 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):\n \n     def __init__(self, *args, **kwargs):\n         kwargs.setdefault(\"required\", False)\n+        kwargs.setdefault(\"disabled\", True)\n         super().__init__(*args, **kwargs)\n \n     def bound_data(self, data, initial):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13670", "model_patch": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex d97c9c0..8ea9543 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -326,7 +326,7 @@ class DateFormat(TimeFormat):\n \n     def y(self):\n         \"Year, 2 digits; e.g. '99'\"\n-        return str(self.data.year)[2:]\n+        return str(self.data.year % 100).zfill(2)\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12713", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 75fe555..9eaeb65 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -249,16 +249,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             return None\n         db = kwargs.get('using')\n \n-        autocomplete_fields = self.get_autocomplete_fields(request)\n-        if db_field.name in autocomplete_fields:\n-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in self.raw_id_fields:\n-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n-            kwargs['widget'] = widgets.FilteredSelectMultiple(\n-                db_field.verbose_name,\n-                db_field.name in self.filter_vertical\n-            )\n+        if 'widget' not in kwargs:\n+            autocomplete_fields = self.get_autocomplete_fields(request)\n+            if db_field.name in autocomplete_fields:\n+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n+            elif db_field.name in self.raw_id_fields:\n+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n+                kwargs['widget'] = widgets.FilteredSelectMultiple(\n+                    db_field.verbose_name,\n+                    db_field.name in self.filter_vertical\n+                )\n \n         if 'queryset' not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13512", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 1bfa7e4..c60f623 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -81,7 +81,7 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13212", "model_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex 4683cf8..efb2287 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -1,3 +1,4 @@\n+\n import re\n \n from django.core import validators\n@@ -22,4 +23,4 @@ class UnicodeUsernameValidator(validators.RegexValidator):\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n     )\n-    flags = 0\n+    flags = 0\ndiff --git a/django/core/validators.py b/django/core/validators.py\nindex 1b74a94..ab5d84c 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -48,7 +48,7 @@ class RegexValidator:\n         regex_matches = self.regex.search(str(value))\n         invalid_input = regex_matches if self.inverse_match else not regex_matches\n         if invalid_input:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def __eq__(self, other):\n         return (\n@@ -100,11 +100,11 @@ class URLValidator(RegexValidator):\n \n     def __call__(self, value):\n         if not isinstance(value, str):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # Then check full URL\n         try:\n@@ -139,7 +139,7 @@ class URLValidator(RegexValidator):\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n         if len(urlsplit(value).netloc) > 253:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n integer_validator = RegexValidator(\n@@ -208,12 +208,12 @@ class EmailValidator:\n \n     def __call__(self, value):\n         if not value or '@' not in value:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         user_part, domain_part = value.rsplit('@', 1)\n \n         if not self.user_regex.match(user_part):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         if (domain_part not in self.domain_allowlist and\n                 not self.validate_domain_part(domain_part)):\n@@ -225,7 +225,7 @@ class EmailValidator:\n             else:\n                 if self.validate_domain_part(domain_part):\n                     return\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def validate_domain_part(self, domain_part):\n         if self.domain_regex.match(domain_part):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13417", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5049ae4..4da909b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1218,13 +1218,13 @@ class QuerySet:\n     def ordered(self):\n         \"\"\"\n         Return True if the QuerySet is ordered -- i.e. has an order_by()\n-        clause or a default ordering on the model (or is empty).\n+        clause or a default ordering on the model that is not overridden by GROUP BY (or is empty).\n         \"\"\"\n         if isinstance(self, EmptyQuerySet):\n             return True\n         if self.query.extra_order_by or self.query.order_by:\n             return True\n-        elif self.query.default_ordering and self.query.get_meta().ordering:\n+        elif self.query.default_ordering and self.query.get_meta().ordering and not self.query.group_by:\n             return True\n         else:\n             return False\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13794", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 9115325..50470bf 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -678,7 +678,7 @@ def add(value, arg):\n         return int(value) + int(arg)\n     except (ValueError, TypeError):\n         try:\n-            return value + arg\n+            return str(value) + str(arg)\n         except Exception:\n             return ''\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13786", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 05e9a94..7582f24 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -137,11 +137,15 @@ class CreateModel(ModelOperation):\n                 ),\n             ]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n+            if operation.options:\n+                options = {**self.options, **operation.options}\n+            else:\n+                options = {}\n             return [\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13406", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 3533127..b047fc4 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -238,7 +238,7 @@ class QuerySet:\n     def __getstate__(self):\n         # Force the cache to be fully populated.\n         self._fetch_all()\n-        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__, '_fields': self._fields}\n \n     def __setstate__(self, state):\n         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n@@ -258,6 +258,7 @@ class QuerySet:\n                 stacklevel=2,\n             )\n         self.__dict__.update(state)\n+        self._fields = state.get('_fields', None)\n \n     def __repr__(self):\n         data = list(self[:REPR_OUTPUT_SIZE + 1])\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13820", "model_patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 3ec0678..a97016d 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -90,7 +90,10 @@ class MigrationLoader:\n             else:\n                 # Empty directories are namespaces.\n                 # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n+                if (\n+                    getattr(module, '__file__', None) is None and\n+                    not isinstance(module.__path__, list)\n+                ):\n                     self.unmigrated_apps.add(app_config.label)\n                     continue\n                 # Module is not a package (e.g. migrations.py).\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13344", "model_patch": "diff --git a/django/middleware/security.py b/django/middleware/security.py\nindex ea7b1fc..bdd266b 100644\n--- a/django/middleware/security.py\n+++ b/django/middleware/security.py\n@@ -31,7 +31,8 @@ class SecurityMiddleware(MiddlewareMixin):\n                 \"https://%s%s\" % (host, request.get_full_path())\n             )\n \n-    def process_response(self, request, response):\n+    async def process_response(self, request, response):\n+        response = await sync_to_async(super().process_response)(request, response)\n         if (self.sts_seconds and request.is_secure() and\n                 'Strict-Transport-Security' not in response):\n             sts_header = \"max-age=%s\" % self.sts_seconds\n@@ -55,4 +56,4 @@ class SecurityMiddleware(MiddlewareMixin):\n                 if isinstance(self.referrer_policy, str) else self.referrer_policy\n             ))\n \n-        return response\n+        return response\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 3a8f013..13741eb 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -396,6 +396,12 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n         max_in_list_size = connection.ops.max_in_list_size()\n         if self.rhs_is_direct_value() and max_in_list_size and len(self.rhs) > max_in_list_size:\n             return self.split_parameter_list_as_sql(compiler, connection)\n+        \n+        # Apply key transform to the right-hand side\n+        rhs, rhs_params = self.process_rhs(compiler, connection)\n+        if hasattr(self.lhs, 'get_transformed_rhs'):\n+            rhs, rhs_params = self.lhs.get_transformed_rhs(rhs, rhs_params, connection)\n+        \n         return super().as_sql(compiler, connection)\n \n     def split_parameter_list_as_sql(self, compiler, connection):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..a3b121c 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -191,8 +191,19 @@ class Collector:\n         If 'keep_parents' is True, data of parent model's will be not deleted.\n         \"\"\"\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            self._merge_fast_deletes(objs)\n             return\n+\n+    def _merge_fast_deletes(self, objs):\n+        \"\"\"\n+        Merge fast deletes for the same model into a single query.\n+        \"\"\"\n+        model = objs[0].__class__\n+        if model in self.fast_deletes:\n+            existing_objs = self.fast_deletes[model]\n+            self.fast_deletes[model] = existing_objs + objs\n+        else:\n+            self.fast_deletes[model] = objs\n         new_objs = self.add(objs, source, nullable,\n                             reverse_dependency=reverse_dependency)\n         if not new_objs:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py\nindex 01e5980..e1f5317 100644\n--- a/django/db/models/functions/window.py\n+++ b/django/db/models/functions/window.py\n@@ -46,7 +46,10 @@ class LagLeadFunction(Func):\n \n     def _resolve_output_field(self):\n         sources = self.get_source_expressions()\n-        return sources[0].output_field\n+        output_field = sources[0].output_field\n+        if output_field.get_internal_type() == 'DecimalField' and self.window.connection.vendor == 'sqlite':\n+            return FloatField()\n+        return output_field\n \n \n class Lag(LagLeadFunction):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13516", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex c1c76e0..ab68a8f 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -149,6 +149,7 @@ class OutputWrapper(TextIOBase):\n             msg += ending\n         style_func = style_func or self.style_func\n         self._out.write(style_func(msg))\n+        self._out.flush()\n \n \n class BaseCommand:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13809", "model_patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 85f7e9c..5674614 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -51,6 +51,10 @@ class Command(BaseCommand):\n             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n \n     def execute(self, *args, **options):\n         if options['no_color']:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14089", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-13807", "model_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 3a40a2e..52dbaa3 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -327,13 +327,13 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n                 else:\n                     violations = chain.from_iterable(\n-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n+                        cursor.execute('PRAGMA foreign_key_check(`%s`)' % table_name).fetchall()\n                         for table_name in table_names\n                     )\n                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\n                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                     foreign_key = cursor.execute(\n-                        'PRAGMA foreign_key_list(%s)' % table_name\n+                        'PRAGMA foreign_key_list(`%s`)' % table_name\n                     ).fetchall()[foreign_key_index]\n                     column_name, referenced_column_name = foreign_key[3:5]\n                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14311", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex ac16894..8804a8c 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -223,8 +223,8 @@ def get_child_arguments():\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n-    if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:\n-        args += ['-m', __main__.__spec__.parent]\n+    if getattr(__main__, '__spec__', None) is not None:\n+        args += ['-m', __main__.__spec__.name]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14373", "model_patch": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex 38cb1c1..98b904c 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -314,7 +314,7 @@ class DateFormat(TimeFormat):\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n-        return self.data.year\n+        return '%04d' % self.data.year\n \n     def z(self):\n         \"\"\"Day of the year, i.e. 1 to 366.\"\"\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13821", "model_patch": "diff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\nindex c24ce20..a587db6 100644\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -101,6 +101,8 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n \n     @cached_property\n     def supports_json_field(self):\n+        if self.connection.sqlite_version_info < (3, 9, 0):\n+            return False\n         with self.connection.cursor() as cursor:\n             try:\n                 with transaction.atomic(self.connection.alias):\n@@ -110,4 +112,14 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n         return True\n \n     can_introspect_json_field = property(operator.attrgetter('supports_json_field'))\n-    has_json_object_function = property(operator.attrgetter('supports_json_field'))\n+    @cached_property\n+    def has_json_object_function(self):\n+        if self.connection.sqlite_version_info < (3, 9, 0):\n+            return False\n+        with self.connection.cursor() as cursor:\n+            try:\n+                with transaction.atomic(self.connection.alias):\n+                    cursor.execute('SELECT JSON_OBJECT(\\'a\\', \\'b\\')')\n+            except OperationalError:\n+                return False\n+        return True\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e895f59..a8b25ed 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -451,6 +451,11 @@ class QuerySet:\n         obj = self.model(**kwargs)\n         self._for_write = True\n         obj.save(force_insert=True, using=self.db)\n+        connection = connections[self.db]\n+        if obj.pk is not None:\n+            pk_field = opts.pk\n+            converted_value = pk_field.from_db_value(obj.pk, None, connection)\n+            obj.pk = converted_value\n         return obj\n \n     def _prepare_for_bulk_create(self, objs):\n@@ -518,7 +523,8 @@ class QuerySet:\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n-                        setattr(obj_without_pk, field.attname, result)\n+                        converted_value = field.from_db_value(result, None, connection)\n+                        setattr(obj_without_pk, field.attname, converted_value)\n                     obj_without_pk._state.adding = False\n                     obj_without_pk._state.db = self.db\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14376", "model_patch": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 66049be..c23cc0d 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -200,9 +200,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14315", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 8b69ea1..bf4d2da 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -1,3 +1,4 @@\n+\n import signal\n \n from django.db.backends.base.client import BaseDatabaseClient\n@@ -36,7 +37,8 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [dbname]\n         args.extend(parameters)\n \n-        env = {}\n+        import os\n+        env = os.environ.copy()  # Start with a copy of the existing environment\n         if passwd:\n             env['PGPASSWORD'] = str(passwd)\n         if service:\n@@ -61,4 +63,4 @@ class DatabaseClient(BaseDatabaseClient):\n             super().runshell(parameters)\n         finally:\n             # Restore the original SIGINT handler.\n-            signal.signal(signal.SIGINT, sigint_handler)\n+            signal.signal(signal.SIGINT, sigint_handler)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14140", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex b9069df..3435530 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -87,7 +87,10 @@ class Q(tree.Node):\n         args, kwargs = (), {}\n         if len(self.children) == 1 and not isinstance(self.children[0], Q):\n             child = self.children[0]\n-            kwargs = {child[0]: child[1]}\n+            if isinstance(child, tuple) and len(child) == 2:\n+                kwargs = {child[0]: child[1]}\n+            else:\n+                args = (child,)\n         else:\n             args = tuple(self.children)\n             if self.connector != self.default:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..6fdc79e 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1041,12 +1041,10 @@ class MultiValueField(Field):\n                     if self.required:\n                         raise ValidationError(self.error_messages['required'], code='required')\n                 elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n+                    # Otherwise, raise a 'required' error if a required\n                     # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+                    raise ValidationError(field.error_messages['required'], code='required')\n+                continue\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-11433", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 74a2377..ec90072 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -428,15 +428,18 @@ class BaseModelForm(BaseForm):\n         # Note that for historical reasons we want to include also\n         # private_fields here. (GenericRelation was previously a fake\n         # m2m field).\n-        for f in chain(opts.many_to_many, opts.private_fields):\n-            if not hasattr(f, 'save_form_data'):\n+        for name, value in cleaned_data.items():\n+            try:\n+                field = self.instance._meta.get_field(name)\n+            except FieldDoesNotExist:\n+                continue  # skip fields not defined in the model\n+            if not hasattr(field, 'save_form_data'):\n                 continue\n-            if fields and f.name not in fields:\n+            if fields and name not in fields:\n                 continue\n-            if exclude and f.name in exclude:\n+            if exclude and name in exclude:\n                 continue\n-            if f.name in cleaned_data:\n-                f.save_form_data(self.instance, cleaned_data[f.name])\n+            field.save_form_data(self.instance, value)\n \n     def save(self, commit=True):\n         \"\"\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14765", "model_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 6496bf2..27636dc 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -92,7 +92,8 @@ class ProjectState:\n         self.models = models or {}\n         # Apps to include from main registry, usually unmigrated ones\n         if real_apps:\n-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n+            assert isinstance(real_apps, set), \"real_apps must be a set\"\n+            self.real_apps = real_apps\n         else:\n             self.real_apps = set()\n         self.is_delayed = False\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14053", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 04c866a..1516e1e 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -226,17 +226,25 @@ class HashedFilesMixin:\n             path for path in paths\n             if matches_patterns(path, self._patterns)\n         ]\n+\n+        # Track which files have been yielded\n+        yielded_files = set()\n+\n         # Do a single pass first. Post-process all files once, then repeat for\n         # adjustable files.\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n+            if name not in yielded_files:\n+                yield name, hashed_name, processed\n+                yielded_files.add(name)\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+                if name not in yielded_files:\n+                    yield name, hashed_name, processed\n+                    yielded_files.add(name)\n                 substitutions = substitutions or subst\n \n             if not substitutions:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14349", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex fde6d56..d05d545 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -101,6 +101,11 @@ class URLValidator(RegexValidator):\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+        \n+        # Explicitly reject URLs containing newline, carriage return, or tab characters.\n+        if any(char in value for char in '\\n\\r\\t'):\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+        \n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14170", "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 5eaf345..448c200 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -549,7 +549,7 @@ class YearLookup(Lookup):\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n-        if self.rhs_is_direct_value():\n+        if self.rhs_is_direct_value() and self.lookup_name == 'year':\n             # Skip the extract part by directly using the originating field,\n             # that is self.lhs.lhs.\n             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14404", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 0cf39d7..0f88376 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -242,19 +242,23 @@ class Options:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n                 # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n+                # Look for the parent link with parent_link=True\n+                parent_link_field = None\n+                for fld in self.parents.values():\n+                    if fld.remote_field.parent_link:\n+                        parent_link_field = fld\n+                        break\n+                if parent_link_field is None:\n+                    raise ImproperlyConfigured(\n+                        'No parent_link=True found for model %s.%s.' % (model._meta.app_label, model.__name__)\n+                    )\n+                already_created = [fld for fld in self.local_fields if fld.name == parent_link_field.name]\n                 if already_created:\n                     field = already_created[0]\n+                else:\n+                    field = parent_link_field\n                 field.primary_key = True\n                 self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n-                    raise ImproperlyConfigured(\n-                        'Add parent_link=True to %s.' % field,\n-                    )\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13810", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 2cbbab1..c06f84d 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -50,11 +50,6 @@ class BaseHandler:\n             else:\n                 middleware_is_async = middleware_can_async\n             try:\n-                # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n-                    middleware_is_async, handler, handler_is_async,\n-                    debug=settings.DEBUG, name='middleware %s' % middleware_path,\n-                )\n                 mw_instance = middleware(handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n@@ -85,6 +80,10 @@ class BaseHandler:\n                     self.adapt_method_mode(False, mw_instance.process_exception),\n                 )\n \n+            handler = self.adapt_method_mode(\n+                middleware_is_async, handler, handler_is_async,\n+                debug=settings.DEBUG, name='middleware %s' % middleware_path,\n+            )\n             handler = convert_exception_to_response(mw_instance)\n             handler_is_async = middleware_is_async\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13837", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 3b7178c..93eef35 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -216,15 +216,15 @@ def get_child_arguments():\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n-    py_script = Path(sys.argv[0])\n-\n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n-        args += sys.argv[1:]\n+    if '__main__' in sys.modules and sys.modules['__main__'].__spec__ is not None:\n+        main_spec = sys.modules['__main__'].__spec__\n+        if main_spec.parent == 'pkg_other_than_django':  # Adjust this package name as needed\n+            args += ['-m', 'pkg_other_than_django']  # Adjust this package name as needed\n+            args += sys.argv[1:]\n+        elif main_spec.parent == 'django':\n+            args += ['-m', 'django']\n+            args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n         # It may exist with a .exe extension or have a -script.py suffix.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14011", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 73cceb9..76ca316 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -401,7 +401,7 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n             placeholder = '(' + ', '.join(sqls) + ')'\n             return (placeholder, sqls_params)\n         else:\n-            if not getattr(self.rhs, 'has_select_fields', True):\n+            if getattr(self.rhs, 'has_select_fields', True) and not self.rhs.select_fields:\n                 self.rhs.clear_select_clause()\n                 self.rhs.add_fields(['pk'])\n             return super().process_rhs(compiler, connection)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14434", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 941fcdc..408fc59 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1250,7 +1250,9 @@ class BaseDatabaseSchemaEditor:\n             sql = self.sql_create_unique_index\n         else:\n             sql = self.sql_create_unique\n-        if columns:\n+        if isinstance(columns, Columns):\n+            columns = columns\n+        elif columns:\n             columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)\n         else:\n             columns = Expressions(model._meta.db_table, expressions, compiler, self.quote_value)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14559", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e895f59..9f7a4e3 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -563,9 +563,11 @@ class QuerySet:\n                     case_statement = Cast(case_statement, output_field=field)\n                 update_kwargs[field.attname] = case_statement\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n+        matched_rows = 0\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\n-                self.filter(pk__in=pks).update(**update_kwargs)\n+                matched_rows += self.filter(pk__in=pks).update(**update_kwargs)\n+        return matched_rows\n     bulk_update.alters_data = True\n \n     def get_or_create(self, defaults=None, **kwargs):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15104", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 7df5f70..6db1dcc 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -96,7 +96,7 @@ class MigrationAutodetector:\n         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n-                del deconstruction[2]['to']\n+                deconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14771", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b817434..4def962 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,7 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X', 'utf8']\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14792", "model_patch": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 12df5a3..fc662ad 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -44,10 +44,15 @@ class DatabaseOperations(BaseDatabaseOperations):\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n     def _prepare_tzname_delta(self, tzname):\n-        if '+' in tzname:\n-            return tzname.replace('+', '-')\n-        elif '-' in tzname:\n-            return tzname.replace('-', '+')\n+        if tzname.startswith('Etc/GMT'):\n+            # Do not flip the sign for Etc/GMT time zones\n+            return tzname\n+        else:\n+            # Flip the sign for other time zones\n+            if '+' in tzname:\n+                return tzname.replace('+', '-')\n+            elif '-' in tzname:\n+                return tzname.replace('-', '+')\n         return tzname\n \n     def _convert_field_to_tz(self, field_name, tzname):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14539", "model_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex 809fc0f..801cbf8 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -283,8 +283,8 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):\n             middle_unescaped = html.unescape(middle)\n             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)\n             if middle_unescaped != stripped:\n-                trail = middle[len(stripped):] + trail\n-                middle = middle[:len(stripped) - len(middle_unescaped)]\n+                trail = middle_unescaped[len(stripped):] + trail\n+                middle = middle[:len(middle) - len(middle_unescaped[len(stripped):])]\n                 trimmed_something = True\n         return lead, middle, trail\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15277", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0cf1917..422b890 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14500", "model_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 9e05ef1..ed9fe57 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -254,8 +254,7 @@ class MigrationExecutor:\n         if migration.replaces:\n             for app_label, name in migration.replaces:\n                 self.recorder.record_unapplied(app_label, name)\n-        else:\n-            self.recorder.record_unapplied(migration.app_label, migration.name)\n+        # Do not record the squashed migration as unapplied\n         # Report progress\n         if self.progress_callback:\n             self.progress_callback(\"unapply_success\", migration, fake)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14493", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 94188f6..c91c9fc 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -251,6 +251,9 @@ class HashedFilesMixin:\n         # Adjustable files to yield at end, keyed by the original path.\n         processed_adjustable_paths = {}\n \n+        # Initialize substitutions to avoid UnboundLocalError when max_post_process_passes is 0\n+        substitutions = {}\n+\n         # Do a single pass first. Post-process all files once, yielding not\n         # adjustable files and exceptions, and collecting adjustable files.\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15098", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-15368", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 8c5f021..974a957 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -670,7 +670,7 @@ class QuerySet:\n                 when_statements = []\n                 for obj in batch_objs:\n                     attr = getattr(obj, field.attname)\n-                    if not isinstance(attr, Expression):\n+                    if not hasattr(attr, 'resolve_expression'):\n                         attr = Value(attr, output_field=field)\n                     when_statements.append(When(pk=obj.pk, then=attr))\n                 case_statement = Case(*when_statements, output_field=field)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15315", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 422b890..a7ecc1d 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -542,11 +542,7 @@ class Field(RegisterLookupMixin):\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash((\n-            self.creation_counter,\n-            self.model._meta.app_label if hasattr(self, 'model') else None,\n-            self.model._meta.model_name if hasattr(self, 'model') else None,\n-        ))\n+        return hash(self.creation_counter)\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15127", "model_patch": "diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py\nindex b6f1796..9d43f81 100644\n--- a/django/contrib/messages/storage/base.py\n+++ b/django/contrib/messages/storage/base.py\n@@ -38,9 +38,19 @@ class Message:\n \n     @property\n     def level_tag(self):\n+        from django.conf import settings\n+        LEVEL_TAGS = getattr(settings, 'MESSAGE_LEVEL_TAGS', DEFAULT_LEVEL_TAGS)\n         return LEVEL_TAGS.get(self.level, '')\n \n \n+DEFAULT_LEVEL_TAGS = {\n+    10: 'debug',\n+    20: 'info',\n+    25: 'success',\n+    30: 'warning',\n+    40: 'error',\n+}\n+\n class BaseStorage:\n     \"\"\"\n     This is the base backend for temporary message storage.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15467", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 471e637..b21bf98 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -269,7 +269,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                         \"class\": get_ul_class(self.radio_fields[db_field.name]),\n                     }\n                 )\n-                kwargs[\"empty_label\"] = _(\"None\") if db_field.blank else None\n+                kwargs[\"empty_label\"] = (kwargs.get('empty_label') or _('None')) if db_field.blank else None\n \n         if \"queryset\" not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15380", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 6db1dcc..3005e7e 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -824,7 +824,7 @@ class MigrationAutodetector:\n         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n-            new_model_state = self.to_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n             field = new_model_state.get_field(field_name)\n             # Scan to see if this is actually a rename!\n             field_dec = self.deep_deconstruct(field)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1013471..cae3400 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1352,7 +1352,7 @@ class QuerySet:\n         c._prefetch_related_lookups = self._prefetch_related_lookups[:]\n         c._known_related_objects = self._known_related_objects\n         c._iterable_class = self._iterable_class\n-        c._fields = self._fields\n+        c._fields = None  # Reset fields to avoid inheriting deferred fields from the outer queryset\n         return c\n \n     def _fetch_all(self):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14631", "model_patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex b5c646b..7bebbd3 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -27,6 +27,11 @@ class BoundField:\n             self.label = self.field.label\n         self.help_text = field.help_text or ''\n \n+    def did_change(self):\n+        data_value = self.data\n+        initial_value = self.initial\n+        return self.field.has_changed(initial_value, data_value)\n+\n     def __str__(self):\n         \"\"\"Render this field as an HTML widget.\"\"\"\n         if self.field.show_hidden_initial:\ndiff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 2c0336e..e219c8d 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -387,17 +387,17 @@ class BaseForm:\n         self._post_clean()\n \n     def _clean_fields(self):\n-        for name, field in self.fields.items():\n-            if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n+        for name, bf in self._bound_items():\n+            if bf.field.disabled:\n+                value = bf.initial\n             else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+                value = bf.data\n             try:\n-                if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n-                    value = field.clean(value, initial)\n+                if isinstance(bf.field, FileField):\n+                    initial = bf.initial\n+                    value = bf.field.clean(value, initial)\n                 else:\n-                    value = field.clean(value)\n+                    value = bf.field.clean(value)\n                 self.cleaned_data[name] = value\n                 if hasattr(self, 'clean_%s' % name):\n                     value = getattr(self, 'clean_%s' % name)()\n@@ -436,27 +436,7 @@ class BaseForm:\n \n     @cached_property\n     def changed_data(self):\n-        data = []\n-        for name, field in self.fields.items():\n-            data_value = self._field_data_value(field, self.add_prefix(name))\n-            if not field.show_hidden_initial:\n-                # Use the BoundField's initial as this is the value passed to\n-                # the widget.\n-                initial_value = self[name].initial\n-            else:\n-                initial_prefixed_name = self.add_initial_prefix(name)\n-                hidden_widget = field.hidden_widget()\n-                try:\n-                    initial_value = field.to_python(\n-                        self._widget_data_value(hidden_widget, initial_prefixed_name)\n-                    )\n-                except ValidationError:\n-                    # Always assume data has changed if validation fails.\n-                    data.append(name)\n-                    continue\n-            if field.has_changed(initial_value, data_value):\n-                data.append(name)\n-        return data\n+        return [name for name, bf in self._bound_items() if bf.did_change()]\n \n     @property\n     def media(self):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..f7b2b96 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -761,11 +761,21 @@ class Query(BaseExpression):\n \n         # Create a new alias for this table.\n         if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            alias_base = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            alias = alias_base\n+            # Ensure the new alias does not conflict with an existing alias in change_map\n+            while alias in change_map or (alias_base in change_map and change_map[alias_base] == alias):\n+                alias_base = '%s%d' % (self.alias_prefix, self.alias_map[alias_base][-1] + 1)\n+                alias = alias_base\n             alias_list.append(alias)\n         else:\n             # The first occurrence of a table uses the table name directly.\n             alias = filtered_relation.alias if filtered_relation is not None else table_name\n+            alias_base = alias\n+            # Ensure the new alias does not conflict with an existing alias in change_map\n+            while alias in change_map or (alias_base in change_map and change_map[alias_base] == alias):\n+                alias_base = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+                alias = alias_base\n             self.table_map[table_name] = [alias]\n         self.alias_refcount[alias] = 1\n         return alias, True\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15732", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-11555", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..3629cda 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -40,30 +40,25 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n-        for i, operation in enumerate(operations):\n-            right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n-            for j, other in enumerate(operations[i + 1:]):\n-                result = operation.reduce(other, app_label)\n+        i = 0\n+        while i < len(operations):\n+            operation = operations[i]\n+            # Check if the current operation is a removal operation and the next one is an addition operation\n+            if i + 1 < len(operations):\n+                next_operation = operations[i + 1]\n+                result = operation.reduce(next_operation, app_label)\n                 if isinstance(result, list):\n-                    in_between = operations[i + 1:i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all(op.reduce(other, app_label) is True for op in in_between):\n-                        # Perform a left reduction if all of the in-between\n-                        # operations can optimize through other.\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        # Otherwise keep trying.\n-                        new_operations.append(operation)\n-                        break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n+                    # If they can be combined, extend new_operations with the result and skip the next operation\n+                    new_operations.extend(result)\n+                    i += 2  # Skip the next operation as it's already combined\n+                    continue\n+                elif result is True:\n+                    # If the next operation is a simple no-op reduction, skip the next operation\n+                    i += 2\n+                    continue\n                 elif not result:\n                     # Can't perform a right reduction.\n-                    right = False\n-            else:\n-                new_operations.append(operation)\n-        return new_operations\n+                    pass\n+            new_operations.append(operation)\n+            i += 1\n+        return new_operations\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15731", "model_patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex 768c26e..24d4bbf 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -81,11 +81,11 @@ class BaseManager:\n     @classmethod\n     def _get_queryset_methods(cls, queryset_class):\n         def create_method(name, method):\n+            from functools import wraps\n+\n+            @wraps(method)\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n-\n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n             return manager_method\n \n         new_methods = {}\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15037", "model_patch": "diff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\nindex bdb6b4c..7ce6c70 100644\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -163,7 +163,7 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 (SELECT fkc.relname || '.' || fka.attname\n                 FROM pg_attribute AS fka\n                 JOIN pg_class AS fkc ON fka.attrelid = fkc.oid\n-                WHERE fka.attrelid = c.confrelid AND fka.attnum = c.confkey[1]),\n+                WHERE fka.attrelid = c.confrelid AND fka.attnum = ANY(c.confkey)),\n                 cl.reloptions\n             FROM pg_constraint AS c\n             JOIN pg_class AS cl ON c.conrelid = cl.oid\n@@ -231,4 +231,4 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                     \"definition\": definition,\n                     \"options\": options,\n                 }\n-        return constraints\n+        return constraints\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15554", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b69bf1f..f64648a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -804,15 +804,18 @@ class Query(BaseExpression):\n             return alias, False\n \n         # Create a new alias for this table.\n-        if alias_list:\n+        if filtered_relation is not None:\n             alias = \"%s%d\" % (self.alias_prefix, len(self.alias_map) + 1)\n-            alias_list.append(alias)\n+            self.table_map.setdefault(table_name, []).append(alias)\n         else:\n-            # The first occurrence of a table uses the table name directly.\n-            alias = (\n-                filtered_relation.alias if filtered_relation is not None else table_name\n-            )\n-            self.table_map[table_name] = [alias]\n+            alias_list = self.table_map.get(table_name)\n+            if alias_list:\n+                alias = alias_list[0]\n+                self.alias_refcount[alias] += 1\n+            else:\n+                alias = table_name\n+                self.table_map[table_name] = [alias]\n+                self.alias_refcount[alias] = 1\n         self.alias_refcount[alias] = 1\n         return alias, True\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15375", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 3a34bd9..300fce4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1677,7 +1677,11 @@ class SQLAggregateCompiler(SQLCompiler):\n             sql.append(ann_sql)\n             params.extend(ann_params)\n         self.col_count = len(self.query.annotation_select)\n-        sql = ', '.join(sql)\n+        # Ensure the SQL string is properly constructed even if there's only one column\n+        if len(sql) == 1:\n+            sql = sql[0]\n+        else:\n+            sql = ', '.join(sql)\n         params = tuple(params)\n \n         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex 07a02ab..ada8438 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -152,7 +152,7 @@ def Deserializer(\n             ):\n                 try:\n                     value = base.deserialize_fk_value(\n-                        field, field_value, using, handle_forward_references\n+                        field, field_value, using, handle_forward_references, db=using\n                     )\n                 except Exception as e:\n                     raise base.DeserializationError.WithData(\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13568", "model_patch": "diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex 2983afb..109701d 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -1,3 +1,4 @@\n+\n from itertools import chain\n from types import MethodType\n \n@@ -52,7 +53,11 @@ def check_user_model(app_configs=None, **kwargs):\n         )\n \n     # Check that the username field is unique\n-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n+    username_field = cls._meta.get_field(cls.USERNAME_FIELD)\n+    if not username_field.unique and not any(\n+        isinstance(constraint, models.UniqueConstraint) and constraint.fields == [cls.USERNAME_FIELD]\n+        for constraint in cls._meta.constraints\n+    ):\n         if (settings.AUTHENTICATION_BACKENDS ==\n                 ['django.contrib.auth.backends.ModelBackend']):\n             errors.append(\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15499", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 111e13a..7b47cef 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -170,6 +170,20 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            managers = operation.managers\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, AlterTogetherOptionOperation)\n             and self.name_lower == operation.name_lower\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15503", "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex c783773..ed54e3d 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -93,6 +93,10 @@ class Lookup(Expression):\n         return Value(self.lhs)\n \n     def get_db_prep_lookup(self, value, connection):\n+        if isinstance(value, list):\n+            value = [str(v) for v in value]  # Convert all items in list to string\n+        else:\n+            value = str(value)  # Convert value to string\n         return (\"%s\", [value])\n \n     def process_lhs(self, compiler, connection, lhs=None):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15572", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..2202a2d 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -875,7 +875,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None, disallow_new=False):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -896,6 +896,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                               renderer=renderer)\n     FormSet.model = model\n+    FormSet.disallow_new = disallow_new\n     return FormSet\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15629", "model_patch": "diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\nindex a65d38d..c5223ec 100644\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -167,8 +167,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     def _alter_column_type_sql(self, model, old_field, new_field, new_type):\n         new_type = self._set_field_new_type_null_status(old_field, new_type)\n+        if hasattr(new_field, 'db_collation'):\n+            new_type += f\" COLLATE `{new_field.db_collation}`\"\n         return super()._alter_column_type_sql(model, old_field, new_field, new_type)\n \n     def _rename_field_sql(self, table, old_field, new_field, new_type):\n         new_type = self._set_field_new_type_null_status(old_field, new_type)\n-        return super()._rename_field_sql(table, old_field, new_field, new_type)\n+        return super()._rename_field_sql(table, old_field, new_field, new_type)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15863", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 9a0415d..3c29856 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -150,14 +150,17 @@ def floatformat(text, arg=-1):\n         elif last_char == \"u\":\n             use_l10n = False\n             arg = arg[:-1] or -1\n-    try:\n-        input_val = repr(text)\n-        d = Decimal(input_val)\n-    except InvalidOperation:\n+    if isinstance(text, Decimal):\n+        d = text\n+    else:\n         try:\n-            d = Decimal(str(float(text)))\n-        except (ValueError, InvalidOperation, TypeError):\n-            return \"\"\n+            input_val = repr(text)\n+            d = Decimal(input_val)\n+        except InvalidOperation:\n+            try:\n+                d = Decimal(str(float(text)))\n+            except (ValueError, InvalidOperation, TypeError):\n+                return \"\"\n     try:\n         p = int(arg)\n     except ValueError:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15741", "model_patch": "diff --git a/django/utils/formats.py b/django/utils/formats.py\nindex 82173e8..53bc251 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -125,7 +125,7 @@ def get_format(format_type, lang=None, use_l10n=None):\n     val = None\n     if use_l10n:\n         for module in get_format_modules(lang):\n-            val = getattr(module, format_type, None)\n+            val = getattr(module, str(format_type), None)\n             if val is not None:\n                 break\n     if val is None:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15916", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 646bf68..a9aeab1 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -630,6 +630,8 @@ def modelform_factory(\n     # creating needs to inherit from the parent's inner meta.\n     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n     Meta = type(\"Meta\", bases, attrs)\n+    if formfield_callback is None and hasattr(form, \"Meta\") and hasattr(form.Meta, \"formfield_callback\"):\n+        formfield_callback = form.Meta.formfield_callback\n     if formfield_callback:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n     # Give this new form class a reasonable name.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15022", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex ff74678..83b02ef 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1031,6 +1031,7 @@ class ModelAdmin(BaseModelAdmin):\n         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field))\n                            for search_field in search_fields]\n+            combined_or_queries = models.Q()\n             for bit in smart_split(search_term):\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\n@@ -1038,7 +1039,8 @@ class ModelAdmin(BaseModelAdmin):\n                     *((orm_lookup, bit) for orm_lookup in orm_lookups),\n                     _connector=models.Q.OR,\n                 )\n-                queryset = queryset.filter(or_queries)\n+                combined_or_queries |= or_queries\n+            queryset = queryset.filter(combined_or_queries)\n             may_have_duplicates |= any(\n                 lookup_spawns_duplicates(self.opts, search_spec)\n                 for search_spec in orm_lookups\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15987", "model_patch": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex c98b0b6..8d14dba 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,7 +362,7 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+        if len(fixture_dirs) != len(set(str(d) for d in fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16333", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 9d4c3a8..a8b6a65 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,7 @@ class UserCreationForm(forms.ModelForm):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            self.save_m2m()  # Add this line to save ManyToManyField data\n         return user\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15957", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-16429", "model_patch": "diff --git a/django/utils/timesince.py b/django/utils/timesince.py\nindex 4a5247a..f582d0e 100644\n--- a/django/utils/timesince.py\n+++ b/django/utils/timesince.py\n@@ -97,6 +97,7 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):\n             d.hour,\n             d.minute,\n             d.second,\n+            tzinfo=d.tzinfo,\n         )\n     else:\n         pivot = d\n@@ -134,4 +135,4 @@ def timeuntil(d, now=None, time_strings=None, depth=2):\n     \"\"\"\n     Like timesince, but return a string measuring the time until the given time.\n     \"\"\"\n-    return timesince(d, now, reversed=True, time_strings=time_strings, depth=depth)\n+    return timesince(d, now, reversed=True, time_strings=time_strings, depth=depth)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16315", "model_patch": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 7b1b714..db90c78 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -353,12 +353,15 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if on_conflict == OnConflict.IGNORE:\n             return \"ON CONFLICT DO NOTHING\"\n         if on_conflict == OnConflict.UPDATE:\n+            opts = self.model._meta\n+            unique_fields_db = [opts.get_field(name).db_column or name for name in unique_fields]\n+            update_fields_db = [opts.get_field(name).db_column or name for name in update_fields]\n             return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n-                \", \".join(map(self.quote_name, unique_fields)),\n+                \", \".join(map(self.quote_name, unique_fields_db)),\n                 \", \".join(\n                     [\n-                        f\"{field} = EXCLUDED.{field}\"\n-                        for field in map(self.quote_name, update_fields)\n+                        f\"{self.quote_name(field)} = EXCLUDED.{self.quote_name(field)}\"\n+                        for field in update_fields_db\n                     ]\n                 ),\n             )\n@@ -367,4 +370,4 @@ class DatabaseOperations(BaseDatabaseOperations):\n             on_conflict,\n             update_fields,\n             unique_fields,\n-        )\n+        )\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16082", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c783b41..67f51e3 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -612,6 +612,10 @@ def register_combinable_fields(lhs, connector, rhs, result):\n     _connector_combinators[connector].append((lhs, rhs, result))\n \n \n+# Manually adding the MOD operation for Decimal and Integer types\n+_connector_combinators['%'].append((DecimalField, IntegerField, DecimalField))\n+_connector_combinators['%'].append((IntegerField, DecimalField, DecimalField))\n+\n for d in _connector_combinations:\n     for connector, field_types in d.items():\n         for lhs, rhs, result in field_types:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16136", "model_patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex d6fb4a7..0a82913 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -141,7 +141,7 @@ class View:\n             handler = self.http_method_not_allowed\n         return handler(request, *args, **kwargs)\n \n-    def http_method_not_allowed(self, request, *args, **kwargs):\n+    async def http_method_not_allowed(self, request, *args, **kwargs):\n         logger.warning(\n             \"Method Not Allowed (%s): %s\",\n             request.method,\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15930", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 47df1a9..c6cfd44 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1379,7 +1379,8 @@ class Case(SQLiteNumericMixin, Expression):\n     ):\n         connection.ops.check_expression_support(self)\n         if not self.cases:\n-            return compiler.compile(self.default)\n+            default_sql, default_params = compiler.compile(self.default)\n+            return default_sql, default_params\n         template_params = {**self.extra, **extra_context}\n         case_parts = []\n         sql_params = []\n@@ -1402,6 +1403,15 @@ class Case(SQLiteNumericMixin, Expression):\n         if self._output_field_or_none is not None:\n             sql = connection.ops.unification_cast_sql(self.output_field) % sql\n         return sql, sql_params\n+        case_joiner = case_joiner or self.case_joiner\n+        template_params[\"cases\"] = case_joiner.join(case_parts)\n+        template_params[\"default\"] = default_sql\n+        sql_params.extend(default_params)\n+        template = template or template_params.get(\"template\", self.template)\n+        sql = template % template_params\n+        if self._output_field_or_none is not None:\n+            sql = connection.ops.unification_cast_sql(self.output_field) % sql\n+        return sql, sql_params\n \n     def get_group_by_cols(self, alias=None):\n         if not self.cases:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16485", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex edd25c0..c07100e 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -183,7 +183,7 @@ def floatformat(text, arg=-1):\n     tupl = d.as_tuple()\n     units = len(tupl[1])\n     units += -tupl[2] if m else tupl[2]\n-    prec = abs(p) + units + 1\n+    prec = max(1, abs(p) + units + 1)\n \n     # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n     # and `exponent` from Decimal.as_tuple() directly.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16116", "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex f0e76b4..fec23da 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -248,12 +248,12 @@ class Command(BaseCommand):\n                 else:\n                     self.log(\"No changes detected\")\n         else:\n+            if check_changes:\n+                sys.exit(1)\n             if self.update:\n                 self.write_to_last_migration_files(changes)\n             else:\n                 self.write_migration_files(changes)\n-            if check_changes:\n-                sys.exit(1)\n \n     def write_to_last_migration_files(self, changes):\n         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ab02d72..c338e10 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,6 +550,14 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        # Check if there are any annotations that are used in the query\n+        if obj.annotation_select:\n+            # If there are annotations, we need to determine if they are used\n+            # in filters, ordering, or other annotations. For simplicity, we\n+            # will assume that if there are no filters, ordering, or other\n+            # annotations, we can strip the annotations.\n+            if not obj.where and not obj.order_by and not obj.group_by:\n+                obj.annotation_select = {}\n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16145", "model_patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex c4f663b..78d12f3 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -96,6 +96,8 @@ class Command(BaseCommand):\n                     \"or address:port pair.\" % options[\"addrport\"]\n                 )\n             self.addr, _ipv4, _ipv6, _fqdn, self.port = m.groups()\n+            if self.addr == \"0\":\n+                self.addr = \"0.0.0.0\"\n             if not self.port.isdigit():\n                 raise CommandError(\"%r is not a valid port number.\" % self.port)\n             if self.addr:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16569", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex d028801..d179ddf 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -490,7 +490,7 @@ class BaseFormSet(RenderableFormMixin):\n                     required=False,\n                     widget=self.get_ordering_widget(),\n                 )\n-        if self.can_delete and (self.can_delete_extra or index < initial_form_count):\n+        if self.can_delete and (self.can_delete_extra or (index is not None and index < initial_form_count)):\n             form.fields[DELETION_FIELD_NAME] = BooleanField(\n                 label=_(\"Delete\"),\n                 required=False,\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16454", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-16493", "model_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 53d7755..746121d 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -295,8 +295,10 @@ class FileField(Field):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs[\"upload_to\"] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs[\"storage\"] = getattr(self, \"_storage_callable\", self.storage)\n+        if hasattr(self, \"_storage_callable\"):\n+            kwargs[\"storage\"] = self._storage_callable\n+        elif self.storage is not default_storage:\n+            kwargs[\"storage\"] = self.storage\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16100", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 32995ac..9564c25 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2000,6 +2000,8 @@ class ModelAdmin(BaseModelAdmin):\n \n         # Handle POSTed bulk-edit data.\n         if request.method == \"POST\" and cl.list_editable and \"_save\" in request.POST:\n+            from django.db import transaction\n+\n             if not self.has_change_permission(request):\n                 raise PermissionDenied\n             FormSet = self.get_changelist_formset(request)\n@@ -2010,28 +2012,29 @@ class ModelAdmin(BaseModelAdmin):\n                 request.POST, request.FILES, queryset=modified_objects\n             )\n             if formset.is_valid():\n-                changecount = 0\n-                for form in formset.forms:\n-                    if form.has_changed():\n-                        obj = self.save_form(request, form, change=True)\n-                        self.save_model(request, obj, form, change=True)\n-                        self.save_related(request, form, formsets=[], change=True)\n-                        change_msg = self.construct_change_message(request, form, None)\n-                        self.log_change(request, obj, change_msg)\n-                        changecount += 1\n-\n-                if changecount:\n-                    msg = ngettext(\n-                        \"%(count)s %(name)s was changed successfully.\",\n-                        \"%(count)s %(name)s were changed successfully.\",\n-                        changecount,\n-                    ) % {\n-                        \"count\": changecount,\n-                        \"name\": model_ngettext(self.opts, changecount),\n-                    }\n-                    self.message_user(request, msg, messages.SUCCESS)\n+                with transaction.atomic():\n+                    changecount = 0\n+                    for form in formset.forms:\n+                        if form.has_changed():\n+                            obj = self.save_form(request, form, change=True)\n+                            self.save_model(request, obj, form, change=True)\n+                            self.save_related(request, form, formsets=[], change=True)\n+                            change_msg = self.construct_change_message(request, form, None)\n+                            self.log_change(request, obj, change_msg)\n+                            changecount += 1\n+\n+                    if changecount:\n+                        msg = ngettext(\n+                            \"%(count)s %(name)s was changed successfully.\",\n+                            \"%(count)s %(name)s were changed successfully.\",\n+                            changecount,\n+                        ) % {\n+                            \"count\": changecount,\n+                            \"name\": model_ngettext(self.opts, changecount),\n+                        }\n+                        self.message_user(request, msg, messages.SUCCESS)\n \n-                return HttpResponseRedirect(request.get_full_path())\n+                    return HttpResponseRedirect(request.get_full_path())\n \n         # Handle GET -- construct a formset for display.\n         elif cl.list_editable and self.has_change_permission(request):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16612", "model_patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex d64bf65..906e8bd 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -453,7 +453,7 @@ class AdminSite:\n                 pass\n             else:\n                 if getattr(match.func, \"should_append_slash\", True):\n-                    return HttpResponsePermanentRedirect(\"%s/\" % request.path)\n+                    return HttpResponsePermanentRedirect(\"%s/?%s\" % (request.path, request.META.get('QUERY_STRING', '')))\n         raise Http404\n \n     def _build_app_dict(self, request, label=None):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..2a41300 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -444,6 +444,14 @@ def _resolve_combined_type(connector, lhs_type, rhs_type):\n \n class CombinedExpression(SQLiteNumericMixin, Expression):\n \n+    def deconstruct(self):\n+        path = 'django.db.models.CombinedExpression'\n+        args = [self.lhs, self.connector, self.rhs]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n     def __init__(self, lhs, connector, rhs, output_field=None):\n         super().__init__(output_field=output_field)\n         self.connector = connector\n@@ -518,6 +526,13 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n \n \n class DurationExpression(CombinedExpression):\n+    def deconstruct(self):\n+        path = 'django.db.models.DurationExpression'\n+        args = [self.lhs, self.connector, self.rhs]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n     def compile(self, side, compiler, connection):\n         try:\n             output = side.output_field\n@@ -566,6 +581,13 @@ class DurationExpression(CombinedExpression):\n \n \n class TemporalSubtraction(CombinedExpression):\n+    def deconstruct(self):\n+        path = 'django.db.models.TemporalSubtraction'\n+        args = [self.lhs, self.rhs]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n     output_field = fields.DurationField()\n \n     def __init__(self, lhs, rhs):\n@@ -610,6 +632,11 @@ class F(Combinable):\n \n \n class ResolvedOuterRef(F):\n+    def deconstruct(self):\n+        path = 'django.db.models.ResolvedOuterRef'\n+        args = [self.name]\n+        kwargs = {}\n+        return path, args, kwargs\n     \"\"\"\n     An object that contains a reference to an outer query.\n \n@@ -640,6 +667,11 @@ class ResolvedOuterRef(F):\n \n \n class OuterRef(F):\n+    def deconstruct(self):\n+        path = 'django.db.models.OuterRef'\n+        args = [self.name]\n+        kwargs = {}\n+        return path, args, kwargs\n     contains_aggregate = False\n \n     def resolve_expression(self, *args, **kwargs):\n@@ -652,6 +684,13 @@ class OuterRef(F):\n \n \n class Func(SQLiteNumericMixin, Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.Func'\n+        args = self.source_expressions[:]\n+        kwargs = self.extra.copy()\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n     \"\"\"An SQL function call.\"\"\"\n     function = None\n     template = '%(function)s(%(expressions)s)'\n@@ -732,6 +771,13 @@ class Func(SQLiteNumericMixin, Expression):\n \n \n class Value(SQLiteNumericMixin, Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.Value'\n+        args = [self.value]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n     # instances to be compiled until a decision is taken in #25425.\n@@ -808,6 +854,13 @@ class Value(SQLiteNumericMixin, Expression):\n \n \n class RawSQL(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n     def __init__(self, sql, params, output_field=None):\n         if output_field is None:\n             output_field = fields.Field()\n@@ -835,6 +888,11 @@ class RawSQL(Expression):\n \n \n class Star(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.Star'\n+        args = []\n+        kwargs = {}\n+        return path, args, kwargs\n     def __repr__(self):\n         return \"'*'\"\n \n@@ -843,6 +901,13 @@ class Star(Expression):\n \n \n class Col(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.Col'\n+        args = [self.alias, self.target]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n \n     contains_column_references = True\n     possibly_multivalued = False\n@@ -880,6 +945,11 @@ class Col(Expression):\n \n \n class Ref(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.Ref'\n+        args = [self.refs, self.source]\n+        kwargs = {}\n+        return path, args, kwargs\n     \"\"\"\n     Reference to column alias of the query. For example, Ref('sum_cost') in\n     qs.annotate(sum_cost=Sum('cost')) query.\n@@ -913,6 +983,11 @@ class Ref(Expression):\n \n \n class ExpressionList(Func):\n+    def deconstruct(self):\n+        path = 'django.db.models.ExpressionList'\n+        args = self.source_expressions[:]\n+        kwargs = self.extra.copy()\n+        return path, args, kwargs\n     \"\"\"\n     An expression containing multiple expressions. Can be used to provide a\n     list of expressions as an argument to another expression, like a partition\n@@ -954,6 +1029,11 @@ class OrderByList(Func):\n \n \n class ExpressionWrapper(SQLiteNumericMixin, Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.ExpressionWrapper'\n+        args = [self.expression]\n+        kwargs = {'output_field': self.output_field}\n+        return path, args, kwargs\n     \"\"\"\n     An expression that can wrap another expression so that it can provide\n     extra context to the inner expression, such as the output_field.\n@@ -986,6 +1066,11 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n \n \n class When(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {'condition': self.condition, 'then': self.then}\n+        return path, args, kwargs\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n@@ -1053,6 +1138,11 @@ class When(Expression):\n \n \n class Case(SQLiteNumericMixin, Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = self.source_expressions[:]\n+        kwargs = {}\n+        return path, args, kwargs\n     \"\"\"\n     An SQL searched CASE expression:\n \n@@ -1226,6 +1316,15 @@ class Exists(Subquery):\n \n \n class OrderBy(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.OrderBy'\n+        args = [self.expression]\n+        kwargs = {\n+            'descending': self.descending,\n+            'nulls_first': self.nulls_first,\n+            'nulls_last': self.nulls_last,\n+        }\n+        return path, args, kwargs\n     template = '%(expression)s %(ordering)s'\n     conditional = False\n \n@@ -1308,6 +1407,16 @@ class OrderBy(Expression):\n \n \n class Window(SQLiteNumericMixin, Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.Window'\n+        args = [self.expression]\n+        kwargs = {\n+            'partition_by': self.partition_by,\n+            'order_by': self.order_by,\n+            'frame': self.frame,\n+            'output_field': self.output_field,\n+        }\n+        return path, args, kwargs\n     template = '%(expression)s OVER (%(window)s)'\n     # Although the main expression may either be an aggregate or an\n     # expression with an aggregate function, the GROUP BY that will\n@@ -1413,6 +1522,14 @@ class Window(SQLiteNumericMixin, Expression):\n \n \n class WindowFrame(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.WindowFrame'\n+        args = []\n+        kwargs = {\n+            'start': self.start,\n+            'end': self.end,\n+        }\n+        return path, args, kwargs\n     \"\"\"\n     Model the frame clause in window expressions. There are two types of frame\n     clauses which are subclasses, however, all processing and validation (by no\n@@ -1472,6 +1589,14 @@ class WindowFrame(Expression):\n \n \n class RowRange(WindowFrame):\n+    def deconstruct(self):\n+        path = 'django.db.models.RowRange'\n+        args = []\n+        kwargs = {\n+            'start': self.start,\n+            'end': self.end,\n+        }\n+        return path, args, kwargs\n     frame_type = 'ROWS'\n \n     def window_frame_start_end(self, connection, start, end):\n@@ -1479,6 +1604,14 @@ class RowRange(WindowFrame):\n \n \n class ValueRange(WindowFrame):\n+    def deconstruct(self):\n+        path = 'django.db.models.ValueRange'\n+        args = []\n+        kwargs = {\n+            'start': self.start,\n+            'end': self.end,\n+        }\n+        return path, args, kwargs\n     frame_type = 'RANGE'\n \n     def window_frame_start_end(self, connection, start, end):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16801", "model_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 3d75101..e7d882e 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -441,7 +441,7 @@ class ImageField(FileField):\n         # after their corresponding image field don't stay cleared by\n         # Model.__init__, see bug #11196.\n         # Only run post-initialization dimension update on non-abstract models\n-        if not cls._meta.abstract:\n+        if not cls._meta.abstract and (self.width_field or self.height_field):\n             signals.post_init.connect(self.update_dimension_fields, sender=cls)\n \n     def update_dimension_fields(self, instance, force=False, *args, **kwargs):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16502", "model_patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 70fd79d..2503271 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -224,7 +224,10 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n             self.rfile, self.wfile, self.get_stderr(), self.get_environ()\n         )\n         handler.request_handler = self  # backpointer for logging & connection closing\n-        handler.run(self.server.get_app())\n+        response = handler.run(self.server.get_app())\n+        if self.command == 'HEAD':\n+            # Strip the response body for HEAD requests\n+            response.content = b''\n \n \n def run(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGIServer):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-9296", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-16899", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex b568a3a..1b609ac 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -771,10 +771,11 @@ class BaseModelAdminChecks:\n             except FieldDoesNotExist:\n                 return [\n                     checks.Error(\n-                        \"The value of '%s' is not a callable, an attribute of \"\n+                        \"The value of '%s' ('%s') is not a callable, an attribute of \"\n                         \"'%s', or an attribute of '%s'.\"\n                         % (\n                             label,\n+                            field_name,\n                             obj.__class__.__name__,\n                             obj.model._meta.label,\n                         ),\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16662", "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex bdf1f93..dbecba6 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -173,10 +173,22 @@ class MigrationWriter:\n         else:\n             imports.add(\"from django.db import migrations\")\n \n-        # Sort imports by the package / module to be imported (the part after\n-        # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])\n-        items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n+        # Separate import and from-import statements\n+        import_statements = []\n+        from_import_statements = []\n+        for line in imports:\n+            if line.startswith(\"import \"):\n+                import_statements.append(line)\n+            else:\n+                from_import_statements.append(line)\n+        \n+        # Sort import statements and from-import statements separately\n+        sorted_import_statements = sorted(import_statements, key=lambda i: i.split()[1])\n+        sorted_from_import_statements = sorted(from_import_statements, key=lambda i: i.split()[2])\n+        \n+        # Combine them with import statements first\n+        combined_imports = sorted_import_statements + sorted_from_import_statements\n+        items[\"imports\"] = \"\\n\".join(combined_imports) + \"\\n\" if combined_imports else \"\"\n         if migration_imports:\n             items[\"imports\"] += (\n                 \"\\n\\n# Functions from the following migrations need manual \"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16667", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex d370339..824fe33 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1153,10 +1153,16 @@ class SelectDateWidget(Widget):\n         if y == m == d == \"\":\n             return None\n         if y is not None and m is not None and d is not None:\n-            input_format = get_format(\"DATE_INPUT_FORMATS\")[0]\n-            input_format = formats.sanitize_strftime_format(input_format)\n             try:\n-                date_value = datetime.date(int(y), int(m), int(d))\n+                year = int(y)\n+                month = int(m)\n+                day = int(d)\n+                # Check for reasonable date values to prevent OverflowError\n+                if year < 1 or year > 9999 or month < 1 or month > 12 or day < 1 or day > 31:\n+                    raise ValueError(\"Date components are out of range.\")\n+                input_format = get_format(\"DATE_INPUT_FORMATS\")[0]\n+                input_format = formats.sanitize_strftime_format(input_format)\n+                date_value = datetime.date(year, month, day)\n             except ValueError:\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n@@ -1168,4 +1174,4 @@ class SelectDateWidget(Widget):\n         return not any(\n             (\"{}_{}\".format(name, interval) in data)\n             for interval in (\"year\", \"month\", \"day\")\n-        )\n+        )\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16661", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 67768da..0399699 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -504,12 +504,17 @@ def reverse_field_path(model, path):\n                 break\n \n         # Field should point to another model\n-        if field.is_relation and not (field.auto_created and not field.concrete):\n+        # Treat OneToOneField with primary_key=True as a regular relation\n+        if field.is_relation and not (field.auto_created and not field.concrete) and not (isinstance(field, models.OneToOneField) and field.primary_key):\n             related_name = field.related_query_name()\n             parent = field.remote_field.model\n         else:\n-            related_name = field.field.name\n-            parent = field.related_model\n+            if isinstance(field, models.OneToOneField):\n+                related_name = field.name\n+                parent = field.remote_field.model\n+            else:\n+                related_name = field.field.name\n+                parent = field.related_model\n         reversed_path.insert(0, related_name)\n     return (parent, LOOKUP_SEP.join(reversed_path))\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16032", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5314293..0faa6f4 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1590,7 +1590,7 @@ class QuerySet:\n         self._not_support_combined_queries(\"alias\")\n         return self._annotate(args, kwargs, select=False)\n \n-    def _annotate(self, args, kwargs, select=True):\n+    def _annotate(self, args, kwargs, select=True, force_select=False):\n         self._validate_values_are_expressions(\n             args + tuple(kwargs.values()), method_name=\"annotate\"\n         )\n@@ -1633,7 +1633,7 @@ class QuerySet:\n                     annotation,\n                     alias,\n                     is_summary=False,\n-                    select=select,\n+                    select=(select and force_select),\n                 )\n         for alias, annotation in clone.query.annotations.items():\n             if alias in annotations and annotation.contains_aggregate:\n@@ -1645,6 +1645,13 @@ class QuerySet:\n \n         return clone\n \n+    def alias(self, *args, **kwargs):\n+        \"\"\"\n+        Return a query set with added aliases for extra data or aggregations.\n+        \"\"\"\n+        self._not_support_combined_queries(\"alias\")\n+        return self._annotate(args, kwargs, select=False, force_select=True)\n+\n     def order_by(self, *field_names):\n         \"\"\"Return a new QuerySet instance with the ordering changed.\"\"\"\n         if self.query.is_sliced:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16642", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex b918697..6994731 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -612,6 +612,8 @@ class FileResponse(StreamingHttpResponse):\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"br\": \"application/x-brotli\",\n+                    \"Z\": \"application/x-compress\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-17029", "model_patch": "diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex ca85962..9580af9 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -376,6 +376,7 @@ class Apps:\n         # Call expire cache on each model. This will purge\n         # the relation tree and the fields cache.\n         self.get_models.cache_clear()\n+        self.get_swappable_settings_name.cache_clear()  # Added line to clear this specific cache\n         if self.ready:\n             # Circumvent self.get_models() to prevent that the cache is refilled.\n             # This particularly prevents that an empty value is cached while cloning.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16256", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex a01cd24..1e22820 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -793,6 +793,14 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         create.alters_data = True\n \n+        async def acreate(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            db = router.db_for_write(self.model, instance=self.instance)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).create)(**kwargs)\n+\n+        acreate.alters_data = True\n+\n         def get_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -801,6 +809,14 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         get_or_create.alters_data = True\n \n+        async def aget_or_create(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            db = router.db_for_write(self.model, instance=self.instance)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).get_or_create)(**kwargs)\n+\n+        aget_or_create.alters_data = True\n+\n         def update_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -809,6 +825,14 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         update_or_create.alters_data = True\n \n+        async def aupdate_or_create(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            db = router.db_for_write(self.model, instance=self.instance)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).update_or_create)(**kwargs)\n+\n+        aupdate_or_create.alters_data = True\n+\n         # remove() and clear() are only provided if the ForeignKey can have a\n         # value of null.\n         if rel.field.null:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16877", "model_patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex 7a643a9..c6ec956 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -99,6 +99,15 @@ class Library:\n     def filter_function(self, func, **flags):\n         return self.filter(func.__name__, func, **flags)\n \n+    @filter(name='escapeseq', needs_autoescape=True)\n+    def escapeseq_filter(value, autoescape=True):\n+        from django.utils.html import escape\n+        if autoescape:\n+            esc = escape\n+        else:\n+            esc = lambda x: x\n+        return [esc(item) for item in value]\n+\n     def simple_tag(self, func=None, takes_context=None, name=None):\n         \"\"\"\n         Register a callable as a compiled template tag. Example:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16631", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 662c574..a035a49 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -106,10 +106,21 @@ class SessionBase:\n         except signing.BadSignature:\n             logger = logging.getLogger(\"django.security.SuspiciousSession\")\n             logger.warning(\"Session data corrupted\")\n+        except signing.BadSignature:\n+            logger = logging.getLogger(\"django.security.SuspiciousSession\")\n+            logger.warning(\"Session data corrupted\")\n         except Exception:\n-            # ValueError, unpickling exceptions. If any of these happen, just\n-            # return an empty dictionary (an empty session).\n-            pass\n+            # ValueError, unpickling exceptions. If any of these happen, try\n+            # the fallback secret keys.\n+            for secret_key in settings.SECRET_KEY_FALLBACKS:\n+                try:\n+                    return signing.loads(\n+                        session_data, salt=self.key_salt, serializer=self.serializer, secret=secret_key\n+                    )\n+                except signing.BadSignature:\n+                    continue\n+                except Exception:\n+                    pass\n         return {}\n \n     def update(self, dict_):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16938", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..310d4b2 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -331,6 +331,8 @@ def select_related_descend(field, restricted, requested, select_mask, reverse=Fa\n         return False\n     if field.remote_field.parent_link and not reverse:\n         return False\n+    if field.many_to_many:  # avoid using select_related on many-to-many fields\n+        return False\n     if restricted:\n         if reverse and field.related_query_name() not in requested:\n             return False\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 5801e03..1992948 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -668,8 +668,18 @@ class BaseDatabaseOperations:\n         can vary between backends (e.g., Oracle with %% and &) and between\n         subexpression types (e.g., date expressions).\n         \"\"\"\n-        conn = \" %s \" % connector\n-        return conn.join(sub_expressions)\n+        if connector == sql.XOR:\n+            # Manually implement XOR for databases lacking native support\n+            # Convert the list of sub_expressions into a CASE WHEN structure\n+            # that counts the number of True values and checks if it is odd.\n+            case_statement = \" + \".join(\n+                [\"CASE WHEN %s THEN 1 ELSE 0 END\" % expr for expr in sub_expressions]\n+            )\n+            # The overall expression is true if the sum of True values is odd\n+            return \"(%s) %% 2 = 1\" % case_statement\n+        else:\n+            conn = \" %s \" % connector\n+            return conn.join(sub_expressions)\n \n     def combine_duration_expression(self, connector, sub_expressions):\n         return self.combine_expression(connector, sub_expressions)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16560", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 8b23275..ad5c024 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -18,11 +18,13 @@ __all__ = [\"BaseConstraint\", \"CheckConstraint\", \"Deferrable\", \"UniqueConstraint\"\n \n class BaseConstraint:\n     default_violation_error_message = _(\"Constraint \u201c%(name)s\u201d is violated.\")\n+    default_violation_error_code = \"constraint_violated\"\n     violation_error_message = None\n+    violation_error_code = None\n \n     # RemovedInDjango60Warning: When the deprecation ends, replace with:\n-    # def __init__(self, *, name, violation_error_message=None):\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):\n+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):\n         # RemovedInDjango60Warning.\n         if name is None and not args:\n             raise TypeError(\n@@ -34,6 +36,10 @@ class BaseConstraint:\n             self.violation_error_message = violation_error_message\n         else:\n             self.violation_error_message = self.default_violation_error_message\n+        if violation_error_code is not None:\n+            self.violation_error_code = violation_error_code\n+        else:\n+            self.violation_error_code = self.default_violation_error_code\n         # RemovedInDjango60Warning.\n         if args:\n             warnings.warn(\n@@ -42,7 +48,7 @@ class BaseConstraint:\n                 RemovedInDjango60Warning,\n                 stacklevel=2,\n             )\n-            for arg, attr in zip(args, [\"name\", \"violation_error_message\"]):\n+            for arg, attr in zip(args, [\"name\", \"violation_error_message\", \"violation_error_code\"]):\n                 if arg:\n                     setattr(self, attr, arg)\n \n@@ -65,6 +71,9 @@ class BaseConstraint:\n     def get_violation_error_message(self):\n         return self.violation_error_message % {\"name\": self.name}\n \n+    def get_violation_error_code(self):\n+        return self.violation_error_code\n+\n     def deconstruct(self):\n         path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n         path = path.replace(\"django.db.models.constraints\", \"django.db.models\")\n@@ -112,7 +121,7 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(self.get_violation_error_message(), code=self.get_violation_error_code())\n         except FieldError:\n             pass\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22719", "model_patch": "diff --git a/lib/matplotlib/category.py b/lib/matplotlib/category.py\nindex a559ed2..419f9cf 100644\n--- a/lib/matplotlib/category.py\n+++ b/lib/matplotlib/category.py\n@@ -54,6 +54,8 @@ class StrCategoryConverter(units.ConversionInterface):\n         # dtype = object preserves numerical pass throughs\n         values = np.atleast_1d(np.array(value, dtype=object))\n         # pass through sequence of non binary numbers\n+        if len(values) == 0:\n+            return np.asarray(values, dtype=float)\n         with _api.suppress_matplotlib_deprecation_warning():\n             is_numlike = all(units.ConversionInterface.is_numlike(v)\n                              and not isinstance(v, (str, bytes))\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23412", "model_patch": "diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\nindex 1eefb1e..2c29e57 100644\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -587,9 +587,7 @@ class Patch(artist.Artist):\n         if not self.get_visible():\n             return\n         # Patch has traditionally ignored the dashoffset.\n-        with cbook._setattr_cm(\n-                 self, _dash_pattern=(0, self._dash_pattern[1])), \\\n-             self._bind_draw_path_function(renderer) as draw_path:\n+        with self._bind_draw_path_function(renderer) as draw_path:\n             path = self.get_path()\n             transform = self.get_transform()\n             tpath = transform.transform_path_non_affine(path)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-7530", "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex bea18af..00e0698 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -103,9 +103,8 @@ class Command(BaseCommand):\n             connection = connections[alias]\n             if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(\n                     # At least one model must be migrated to the database.\n-                    router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n-                    for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n+                    router.allow_migrate(connection.alias, model._meta.app_label, model_name=model._meta.object_name)\n+                    for model in apps.get_models()\n             )):\n                 loader.check_consistent_history(connection)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20826", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 07605b5..1e8f767 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1471,9 +1471,26 @@ class _AxesBase(martist.Artist):\n                                valid_types=mtext.Text)\n \n     def clear(self):\n-        \"\"\"Clear the axes.\"\"\"\n+        \"\"\"Clear the axes while preserving shared axis visibility settings.\"\"\"\n+\n+        # Save visibility settings of shared ticks and labels\n+        if self._shared_x_axes:\n+            x_visibility = self.xaxis.get_tick_params(which='both', direction='inout')[\"direction\"]\n+            x_label_visibility = self.xaxis.get_label().get_visible()\n+        if self._shared_y_axes:\n+            y_visibility = self.yaxis.get_tick_params(which='both', direction='inout')[\"direction\"]\n+            y_label_visibility = self.yaxis.get_label().get_visible()\n+\n         self.cla()\n \n+        # Restore visibility settings of shared ticks and labels if applicable\n+        if self._shared_x_axes:\n+            self.xaxis.set_tick_params(direction=x_visibility)\n+            self.xaxis.get_label().set_visible(x_label_visibility)\n+        if self._shared_y_axes:\n+            self.yaxis.set_tick_params(direction=y_visibility)\n+            self.yaxis.get_label().set_visible(y_label_visibility)\n+\n     def get_facecolor(self):\n         \"\"\"Get the facecolor of the Axes.\"\"\"\n         return self.patch.get_facecolor()\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex a6c5dd7..5e5da57 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -77,7 +77,7 @@ class Aggregate(Func):\n             # returning self.filter and including that in this loop.\n             expressions = super(Aggregate, c).get_source_expressions()\n             for index, expr in enumerate(expressions):\n-                if expr.contains_aggregate:\n+                if expr.contains_aggregate and not isinstance(expr, Window):\n                     before_resolved = self.get_source_expressions()[index]\n                     name = (\n                         before_resolved.name\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-8707", "model_patch": "diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex d23f312..b958bc8 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -329,13 +329,13 @@ class Header:\n     @classmethod\n     def fromstring(cls, data, sep=''):\n         \"\"\"\n-        Creates an HDU header from a byte string containing the entire header\n-        data.\n+        Creates an HDU header from a string containing the entire header\n+        data. The string can be either a byte string or a unicode string.\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : str, bytes\n+           String containing the entire header. Can be a byte string or a unicode string.\n \n         sep : str, optional\n             The string separating cards from each other, such as a newline.  By\n@@ -348,6 +348,9 @@ class Header:\n             A new `Header` instance.\n         \"\"\"\n \n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n+\n         cards = []\n \n         # If the card separator contains characters that may validly appear in\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\nindex 7f3e359..46870a8 100644\n--- a/lib/matplotlib/image.py\n+++ b/lib/matplotlib/image.py\n@@ -533,8 +533,10 @@ class _ImageBase(martist.Artist, cm.ScalarMappable):\n                 # that may have moved input values in/out of range\n                 s_vmin, s_vmax = vrange\n                 if isinstance(self.norm, mcolors.LogNorm):\n-                    if s_vmin < 0:\n+                    if s_vmin <= 0:\n                         s_vmin = max(s_vmin, np.finfo(scaled_dtype).eps)\n+                    if s_vmax <= 0:\n+                        s_vmax = max(s_vmax, np.finfo(scaled_dtype).eps)\n                 with cbook._setattr_cm(self.norm,\n                                        vmin=s_vmin,\n                                        vmax=s_vmax,\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22871", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex cc65fc1..ebb903d 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -797,13 +797,14 @@ class ConciseDateFormatter(ticker.Formatter):\n         # 3: hours, 4: minutes, 5: seconds, 6: microseconds\n         for level in range(5, -1, -1):\n             if len(np.unique(tickdate[:, level])) > 1:\n-                if level < 2:\n-                    show_offset = False\n+                # Adjusted to always show the year in the offset when plotting less than a year\n+                show_offset = True\n                 break\n             elif level == 0:\n                 # all tickdate are the same, so only micros might be different\n                 # set to the most precise (6: microseconds doesn't exist...)\n                 level = 5\n+                show_offset = False\n \n         # level is the basic level we will label at.\n         # now loop through and decide the actual ticklabels\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4075", "model_patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 8119fa7..a0bca18 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -142,7 +142,7 @@ class Weighted:\n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        sum_of_weights = self._reduce(mask, self.weights * 1, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20859", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex f63ebf0..eb5fcb9 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -434,11 +434,11 @@ class Legend(Artist):\n             self.isaxes = True\n             self.axes = parent\n             self.set_figure(parent.figure)\n-        elif isinstance(parent, Figure):\n+        elif isinstance(parent, FigureBase):\n             self.isaxes = False\n             self.set_figure(parent)\n         else:\n-            raise TypeError(\"Legend needs either Axes or Figure as parent\")\n+            raise TypeError(\"Legend needs either Axes or FigureBase as parent\")\n         self.parent = parent\n \n         self._loc_used_default = loc is None\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-26113", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-14623", "model_patch": "diff --git a/lib/matplotlib/transforms.py b/lib/matplotlib/transforms.py\nindex ebf1196..0a86ee9 100644\n--- a/lib/matplotlib/transforms.py\n+++ b/lib/matplotlib/transforms.py\n@@ -2819,10 +2819,9 @@ def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n     if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n         return -expander, expander\n \n-    swapped = False\n-    if vmax < vmin:\n+    swapped = vmax < vmin\n+    if swapped:\n         vmin, vmax = vmax, vmin\n-        swapped = True\n \n     maxabsvalue = max(abs(vmin), abs(vmax))\n     if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:\n@@ -2839,6 +2838,11 @@ def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n \n     if swapped and not increasing:\n         vmin, vmax = vmax, vmin\n+    # Ensure the limits are valid for log scale\n+    if yscale == 'log' and vmin <= 0:\n+        vmin = nonsingular(vmin, vmax)[0]\n+    if yscale == 'log' and vmax <= 0:\n+        vmax = nonsingular(vmin, vmax)[1]\n     return vmin, vmax\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex a9ec258..aee2c35 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -44,26 +44,32 @@ class MigrationOptimizer:\n             right = True  # Should we reduce on the right or on the left.\n             # Compare it to each operation after it\n             for j, other in enumerate(operations[i + 1 :]):\n-                result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n-                    in_between = operations[i + 1 : i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all(op.reduce(other, app_label) is True for op in in_between):\n-                        # Perform a left reduction if all of the in-between\n-                        # operations can optimize through other.\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        # Otherwise keep trying.\n-                        new_operations.append(operation)\n-                        break\n+                if isinstance(operation, migrations.AddIndex) and isinstance(other, migrations.RemoveIndex) and operation.index.name == other.index.name:\n+                    # Skip both AddIndex and RemoveIndex operations if they are on the same index\n+                    new_operations.extend(operations[i + 1 : i + j + 1])\n                     new_operations.extend(operations[i + j + 2 :])\n-                    return new_operations\n-                elif not result:\n-                    # Can't perform a right reduction.\n-                    right = False\n+                    break  # No need to continue checking further operations\n+                else:\n+                    result = operation.reduce(other, app_label)\n+                    if isinstance(result, list):\n+                        in_between = operations[i + 1 : i + j + 1]\n+                        if right:\n+                            new_operations.extend(in_between)\n+                            new_operations.extend(result)\n+                        elif all(op.reduce(other, app_label) is True for op in in_between):\n+                            # Perform a left reduction if all of the in-between\n+                            # operations can optimize through other.\n+                            new_operations.extend(result)\n+                            new_operations.extend(in_between)\n+                        else:\n+                            # Otherwise keep trying.\n+                            new_operations.append(operation)\n+                            break\n+                        new_operations.extend(operations[i + j + 2 :])\n+                        return new_operations\n+                    elif not result:\n+                        # Can't perform a right reduction.\n+                        right = False\n             else:\n                 new_operations.append(operation)\n-        return new_operations\n+        return new_operations\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22865", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 5ebeaf9..29f3eb4 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -625,9 +625,9 @@ class Colorbar:\n \n         if self._filled:\n             ind = np.arange(len(self._values))\n-            if self._extend_lower():\n+            if self._extend_lower() and not self.drawedges:\n                 ind = ind[1:]\n-            if self._extend_upper():\n+            if self._extend_upper() and not self.drawedges:\n                 ind = ind[:-1]\n             self._add_solids(X, Y, self._values[ind, np.newaxis])\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4356", "model_patch": "diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py\nindex 74e25c7..fde1039 100644\n--- a/xarray/core/nanops.py\n+++ b/xarray/core/nanops.py\n@@ -27,11 +27,15 @@ def _maybe_null_out(result, axis, mask, min_count=1):\n     xarray version of pandas.core.nanops._maybe_null_out\n     \"\"\"\n     if hasattr(axis, \"__len__\"):  # if tuple or list\n-        raise ValueError(\n-            \"min_count is not available for reduction with more than one dimensions.\"\n-        )\n+        axis_shape_prod = np.take(a.shape, axis).prod()\n+        valid_count = axis_shape_prod - mask.sum(axis)\n+        null_mask = (valid_count - min_count) < 0\n+        if null_mask.any():\n+            dtype, fill_value = dtypes.maybe_promote(result.dtype)\n+            result = result.astype(dtype)\n+            result[null_mask] = fill_value\n \n-    if axis is not None and getattr(result, \"ndim\", False):\n+    elif axis is not None and getattr(result, \"ndim\", False):\n         null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n         if null_mask.any():\n             dtype, fill_value = dtypes.maybe_promote(result.dtype)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24570", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex a767323..fbe89e0 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -169,9 +169,12 @@ def _get_aligned_offsets(hd_list, height, align=\"baseline\"):\n     elif align in [\"left\", \"top\"]:\n         descent = 0.\n         offsets = [d for h, d in hd_list]\n-    elif align in [\"right\", \"bottom\"]:\n+    elif align in [\"right\", \"top\"]:\n         descent = 0.\n         offsets = [height - h + d for h, d in hd_list]\n+    elif align in [\"left\", \"bottom\"]:\n+        descent = max(d for h, d in hd_list)\n+        offsets = [descent - d for h, d in hd_list]\n     elif align == \"center\":\n         descent = 0.\n         offsets = [(height - h) * .5 + d for h, d in hd_list]\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7393", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 0194550..f7c158f 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -4541,6 +4541,10 @@ class Dataset(\n                 # keep consistent multi-index coordinate order\n                 for k in idx_vars:\n                     new_variables.pop(k, None)\n+                # Preserve the original data type for the new index variables\n+                for k, v in idx_vars.items():\n+                    original_var = product_vars[k]\n+                    idx_vars[k] = Variable(v.dims, v.values.astype(original_var.dtype))\n                 new_variables.update(idx_vars)\n                 new_coord_names.update(idx_vars)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7166", "model_patch": "diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py\nindex 024356b..70f7b78 100644\n--- a/astropy/utils/introspection.py\n+++ b/astropy/utils/introspection.py\n@@ -384,7 +384,7 @@ def isinstancemethod(cls, obj):\n \n \n def _isinstancemethod(cls, obj):\n-    if not isinstance(obj, types.FunctionType):\n+    if not isinstance(obj, (types.FunctionType, property)):\n         return False\n \n     # Unfortunately it seems the easiest way to get to the original\n@@ -398,4 +398,4 @@ def _isinstancemethod(cls, obj):\n \n     # This shouldn't happen, though this is the most sensible response if\n     # it does.\n-    raise AttributeError(name)\n+    raise AttributeError(name)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24177", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4661", "model_patch": "diff --git a/pylint/config/find_default_config_files.py b/pylint/config/find_default_config_files.py\nindex 4b2d9f4..f7b11ce 100644\n--- a/pylint/config/find_default_config_files.py\n+++ b/pylint/config/find_default_config_files.py\n@@ -61,9 +61,9 @@ def find_default_config_files():\n             home_rc = os.path.join(user_home, \".pylintrc\")\n             if os.path.isfile(home_rc):\n                 yield home_rc\n-            home_rc = os.path.join(user_home, \".config\", \"pylintrc\")\n+            home_rc = os.path.join(user_home, \".config\", \"pylint\", \"pylintrc\")\n             if os.path.isfile(home_rc):\n                 yield home_rc\n \n     if os.path.isfile(\"/etc/pylintrc\"):\n-        yield \"/etc/pylintrc\"\n+        yield \"/etc/pylintrc\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3151", "model_patch": "diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex fe3f23b..15c989f 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -73,15 +73,22 @@ def _infer_concat_order_from_coords(datasets):\n                 # Infer order datasets should be arranged in along this dim\n                 concat_dims.append(dim)\n \n-                if all(index.is_monotonic_increasing for index in indexes):\n-                    ascending = True\n-                elif all(index.is_monotonic_decreasing for index in indexes):\n-                    ascending = False\n+                if not all(index.equals(indexes[0]) for index in indexes[1:]):\n+                    # Infer order datasets should be arranged in along this dim\n+                    concat_dims.append(dim)\n+\n+                    if all(index.is_monotonic_increasing for index in indexes):\n+                        ascending = True\n+                    elif all(index.is_monotonic_decreasing for index in indexes):\n+                        ascending = False\n+                    else:\n+                        raise ValueError(\"Coordinate variable {} is neither \"\n+                                         \"monotonically increasing nor \"\n+                                         \"monotonically decreasing on all datasets\"\n+                                         .format(dim))\n                 else:\n-                    raise ValueError(\"Coordinate variable {} is neither \"\n-                                     \"monotonically increasing nor \"\n-                                     \"monotonically decreasing on all datasets\"\n-                                     .format(dim))\n+                    concat_dims.append(dim)\n+                    ascending = True  # or False, it doesn't matter for identical coords\n \n                 # Assume that any two datasets whose coord along dim starts\n                 # with the same value have the same coord values throughout.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15103", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-26291", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14539", "model_patch": "diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py\nindex 0a08301..9f0589f 100644\n--- a/astropy/io/fits/diff.py\n+++ b/astropy/io/fits/diff.py\n@@ -1449,18 +1449,14 @@ class TableDataDiff(_BaseDiff):\n                 arrb.dtype, np.floating\n             ):\n                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)\n-            elif \"P\" in col.format:\n-                diffs = (\n-                    [\n-                        idx\n-                        for idx in range(len(arra))\n-                        if not np.allclose(\n-                            arra[idx], arrb[idx], rtol=self.rtol, atol=self.atol\n-                        )\n-                    ],\n-                )\n+            elif \"P\" in col.format or \"Q\" in col.format:\n+                diffs = [\n+                    idx\n+                    for idx in range(len(arra))\n+                    if not np.array_equal(arra[idx], arrb[idx])\n+                ]\n             else:\n-                diffs = np.where(arra != arrb)\n+                diffs = np.where(arra != arrb)[0]  # Ensure it returns indices\n \n             self.diff_total += len(set(diffs[0]))\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3993", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 4198249..b0af6e5 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3481,12 +3481,12 @@ class DataArray(AbstractArray, DataWithCoords):\n         return self._from_temp_dataset(ds)\n \n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n         .. note::\n-            This feature is limited to simple cartesian geometry, i.e. dim\n+            This feature is limited to simple cartesian geometry, i.e. coord\n             must be one dimensional.\n \n         Parameters\n@@ -3528,7 +3528,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3095", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex c3f88b5..a20183b 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1947,7 +1947,10 @@ class IndexVariable(Variable):\n                 # point, which doesn't have a copy method, so make a deep copy\n                 # of the underlying `pandas.MultiIndex` and create a new\n                 # `PandasIndexAdapter` instance with it.\n-                data = PandasIndexAdapter(self._data.array.copy(deep=True))\n+                if isinstance(self._data, pd.MultiIndex):\n+                    data = PandasIndexAdapter(self._data.copy())\n+                else:\n+                    data = PandasIndexAdapter(self._data.array.copy(deep=True))\n             else:\n                 data = self._data\n         else:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12774", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 398c1d7..ad52764 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -689,8 +689,10 @@ class QuerySet:\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\n-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n-            raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n+        if field_name != 'pk':\n+            field = self.model._meta.get_field(field_name)\n+            if not field.unique and not any(constraint.fields == [field_name] for constraint in self.model._meta.total_unique_constraints):\n+                raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n                 return {}\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15278", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-15561", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "django__django-11820", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e5aab8e..0b7fa97 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1506,6 +1506,10 @@ class Query(BaseExpression):\n                 final_field = field\n                 targets = (field,)\n                 if fail_on_missing and pos + 1 != len(names):\n+                    if names[pos + 1] == 'pk':\n+                        final_field = field.model._meta.pk\n+                        targets = (field.model._meta.pk,)\n+                        break\n                     raise FieldError(\n                         \"Cannot resolve keyword %r into field. Join on '%s'\"\n                         \" not permitted.\" % (names[pos + 1], name))\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24637", "model_patch": "diff --git a/lib/matplotlib/backends/backend_svg.py b/lib/matplotlib/backends/backend_svg.py\nindex eb6cb13..c4d05b0 100644\n--- a/lib/matplotlib/backends/backend_svg.py\n+++ b/lib/matplotlib/backends/backend_svg.py\n@@ -948,7 +948,7 @@ class RendererSVG(RendererBase):\n     def get_image_magnification(self):\n         return self.image_dpi / 72.0\n \n-    def draw_image(self, gc, x, y, im, transform=None):\n+    def draw_image(self, gc, x, y, im, transform=None, gid=None):\n         # docstring inherited\n \n         h, w = im.shape[:2]\n@@ -967,25 +967,28 @@ class RendererSVG(RendererBase):\n             self.writer.start('a', attrib={'xlink:href': url})\n \n         attrib = {}\n-        oid = gc.get_gid()\n-        if mpl.rcParams['svg.image_inline']:\n-            buf = BytesIO()\n-            Image.fromarray(im).save(buf, format=\"png\")\n-            oid = oid or self._make_id('image', buf.getvalue())\n-            attrib['xlink:href'] = (\n-                \"data:image/png;base64,\\n\" +\n-                base64.b64encode(buf.getvalue()).decode('ascii'))\n+        if gid is not None:\n+            attrib['id'] = gid\n         else:\n-            if self.basename is None:\n-                raise ValueError(\"Cannot save image data to filesystem when \"\n-                                 \"writing SVG to an in-memory buffer\")\n-            filename = '{}.image{}.png'.format(\n-                self.basename, next(self._image_counter))\n-            _log.info('Writing image file for inclusion: %s', filename)\n-            Image.fromarray(im).save(filename)\n-            oid = oid or 'Im_' + self._make_id('image', filename)\n-            attrib['xlink:href'] = filename\n-        attrib['id'] = oid\n+            oid = gc.get_gid()\n+            if mpl.rcParams['svg.image_inline']:\n+                buf = BytesIO()\n+                Image.fromarray(im).save(buf, format=\"png\")\n+                oid = oid or self._make_id('image', buf.getvalue())\n+                attrib['xlink:href'] = (\n+                    \"data:image/png;base64,\\n\" +\n+                    base64.b64encode(buf.getvalue()).decode('ascii'))\n+            else:\n+                if self.basename is None:\n+                    raise ValueError(\"Cannot save image data to filesystem when \"\n+                                     \"writing SVG to an in-memory buffer\")\n+                filename = '{}.image{}.png'.format(\n+                    self.basename, next(self._image_counter))\n+                _log.info('Writing image file for inclusion: %s', filename)\n+                Image.fromarray(im).save(filename)\n+                oid = oid or 'Im_' + self._make_id('image', filename)\n+                attrib['xlink:href'] = filename\n+            attrib['id'] = oid\n \n         if transform is None:\n             w = 72.0 * w / self.image_dpi\ndiff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex e7f0196..97e6c92 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1458,7 +1458,7 @@ or callable, default: value of *xycoords*\n                 self.arrow_patch.figure = self.figure\n             self.arrow_patch.draw(renderer)\n         self.patch.draw(renderer)\n-        self.offsetbox.draw(renderer)\n+        self.offsetbox.draw(renderer, gid=self.get_gid())\n         self.stale = False\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3305", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex baab678..e760ed2 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -2872,10 +2872,16 @@ class DataArray(AbstractArray, DataWithCoords):\n         numpy.nanpercentile, pandas.Series.quantile, Dataset.quantile\n         \"\"\"\n \n+        if keep_attrs is None:\n+            keep_attrs = _get_keep_attrs(default=False)\n+\n         ds = self._to_temp_dataset().quantile(\n             q, dim=dim, keep_attrs=keep_attrs, interpolation=interpolation\n         )\n-        return self._from_temp_dataset(ds)\n+        quantile_da = self._from_temp_dataset(ds)\n+        if keep_attrs:\n+            quantile_da.attrs = self.attrs\n+        return quantile_da\n \n     def rank(\n         self, dim: Hashable, pct: bool = False, keep_attrs: bool = None\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4970", "model_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex 79a566f..83316b9 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -236,6 +236,9 @@ def hash_lineset(\n     :return: a dict linking hashes to corresponding start index and a dict that links this\n              index to the start and end lines in the file\n     \"\"\"\n+    if min_common_lines == 0:\n+        return {}, {}\n+    \n     hash2index = defaultdict(list)\n     index2lines = {}\n     # Comments, docstring and other specific patterns maybe excluded -> call to stripped_lines\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25122", "model_patch": "diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py\nindex e9c7d39..073dc39 100644\n--- a/lib/matplotlib/mlab.py\n+++ b/lib/matplotlib/mlab.py\n@@ -395,12 +395,12 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,\n     elif mode == 'psd':\n         result = np.conj(result) * result\n     elif mode == 'magnitude':\n-        result = np.abs(result) / np.abs(window).sum()\n+        result = np.abs(result) / window.sum()\n     elif mode == 'angle' or mode == 'phase':\n         # we unwrap the phase later to handle the onesided vs. twosided case\n         result = np.angle(result)\n     elif mode == 'complex':\n-        result /= np.abs(window).sum()\n+        result /= window.sum()\n \n     if mode == 'psd':\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24870", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 908a24f..f1fa4d0 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1126,6 +1126,9 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n                 levels_arg = 7  # Default, hard-wired.\n             else:\n                 levels_arg = args[0]\n+            # Autodetect boolean input and set levels to [0.5] if so\n+            if isinstance(args[0], np.ndarray) and args[0].dtype == bool:\n+                levels_arg = [0.5]\n         else:\n             levels_arg = self.levels\n         if isinstance(levels_arg, Integral):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15569", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex a485155..d8674ef 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -217,6 +217,7 @@ class RegisterLookupMixin:\n         if lookup_name is None:\n             lookup_name = lookup.lookup_name\n         del cls.class_lookups[lookup_name]\n+        cls._clear_cached_lookups()\n \n \n def select_related_descend(field, restricted, requested, load_fields, reverse=False):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12754", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 12ebcde..dbf0a9a 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -217,9 +217,18 @@ class MigrationAutodetector:\n         }\n         self.new_field_keys = {\n             (app_label, model_name, field_name)\n-            for app_label, model_name in self.kept_model_keys\n+            for app_label, model_name in self.kept_model_keys | self.new_model_keys\n             for field_name in self.to_state.models[app_label, model_name].fields\n         }\n+        self.moved_fields = {\n+            (app_label, model_name, field_name)\n+            for app_label, old_model_name, field_name in self.old_field_keys\n+            if (app_label, old_model_name, field_name) not in self.new_field_keys\n+            for new_model_name in self.new_model_keys if new_model_name[0] == app_label\n+            if field_name in self.to_state.models[new_model_name].fields\n+        }\n+        self.old_field_keys -= self.moved_fields\n+        self.new_field_keys -= self.moved_fields\n \n     def _generate_through_model_map(self):\n         \"\"\"Through model map generation.\"\"\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-13012", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 13e70df..5013232 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -104,9 +104,12 @@ class SQLCompiler:\n             # If the group by is set to a list (by .values() call most likely),\n             # then we need to add everything in it to the GROUP BY clause.\n             # Backwards compatibility hack for setting query.group_by. Remove\n-            # when  we have public API way of forcing the GROUP BY clause.\n+            # when we have public API way of forcing the GROUP BY clause.\n             # Converts string references to expressions.\n             for expr in self.query.group_by:\n+                if isinstance(expr, ExpressionWrapper) and isinstance(expr.expression, Value):\n+                    # Skip constant expressions wrapped by ExpressionWrapper\n+                    continue\n                 if not hasattr(expr, 'as_sql'):\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..2dd45af 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -843,6 +843,14 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         except ImportError:\n             pass\n \n+        # Check if the imported module is used in type comments\n+        for child in node.root().get_children():\n+            if isinstance(child, astroid.Assign) and child.type_comment:\n+                if importedmodname in child.type_comment:\n+                    # Mark the import as used\n+                    self._used_imports.add(importedmodname)\n+                    break\n+\n         if context_name == importedmodname:\n             self.add_message(\"import-self\", node=node)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24627", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex eec4e31..5affae5 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1403,6 +1403,10 @@ class _AxesBase(martist.Artist):\n \n     def cla(self):\n         \"\"\"Clear the Axes.\"\"\"\n+        # Unset the .axes attribute of all artists\n+        for artist in self.get_children():\n+            artist.set_axes(None)\n+        \n         # Act as an alias, or as the superclass implementation depending on the\n         # subclass implementation.\n         if self._subclass_uses_cla:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-12273", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 07c5013..3826b41 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import inspect\n import warnings\n@@ -857,11 +858,18 @@ class Model(metaclass=ModelBase):\n         ):\n             force_insert = True\n         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.\n-        if pk_set and not force_insert:\n-            base_qs = cls._base_manager.using(using)\n-            values = [(f, None, (getattr(self, f.attname) if raw else f.pre_save(self, False)))\n-                      for f in non_pks]\n-            forced_update = update_fields or force_update\n+        if (pk_set and not force_insert) or force_update:\n+            if not force_update:\n+                base_qs = cls._base_manager.using(using)\n+                values = [(f, None, (getattr(self, f.attname) if raw else f.pre_save(self, False)))\n+                          for f in non_pks]\n+                forced_update = update_fields or force_update\n+            else:\n+                # Resetting pk to None when force_update is True.\n+                base_qs = cls._base_manager.using(using).filter(pk=pk_val)\n+                values = [(f, None, (getattr(self, f.attname) if raw else f.pre_save(self, False)))\n+                          for f in non_pks]\n+                updated = base_qs._update({f.name: val for f, _, val in values}) > 0\n             updated = self._do_update(base_qs, using, pk_val, values, update_fields,\n                                       forced_update)\n             if force_update and not updated:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-26466", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex a4bce05..ed82b81 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1811,7 +1811,7 @@ or callable, default: value of *xycoords*\n \n         \"\"\"\n         _AnnotationBase.__init__(self,\n-                                 xy,\n+                                 xy.copy() if isinstance(xy, np.ndarray) else xy,\n                                  xycoords=xycoords,\n                                  annotation_clip=annotation_clip)\n         # warn about wonky input data\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "psf__requests-1142", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 0d4482a..d468d9a 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -377,7 +377,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                     else:\n                         content_type = 'application/x-www-form-urlencoded'\n \n-            self.prepare_content_length(body)\n+            if body is not None:\n+                self.prepare_content_length(body)\n \n             # Add content-type if it wasn't explicitly provided.\n             if (content_type) and (not 'content-type' in self.headers):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15382", "model_patch": "diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex 7a540c9..1ce8e1e 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -79,8 +79,12 @@ class WhereNode(tree.Node):\n         for child in self.children:\n             try:\n                 sql, params = compiler.compile(child)\n-            except EmptyResultSet:\n-                empty_needed -= 1\n+            except EmptyResultSet as e:\n+                if isinstance(child, models.Exists):\n+                    # Treat an empty EXISTS subquery as False\n+                    result.append('FALSE')\n+                else:\n+                    empty_needed -= 1\n             else:\n                 if sql:\n                     result.append(sql)\n@@ -96,7 +100,12 @@ class WhereNode(tree.Node):\n                 if self.negated:\n                     return '', []\n                 else:\n-                    raise EmptyResultSet\n+                    # If all children are empty and there are no full ones, raise EmptyResultSet\n+                    # unless we are in the EXISTS case handled above.\n+                    if all(isinstance(c, models.Exists) for c in self.children):\n+                        result.append('FALSE')\n+                    else:\n+                        raise EmptyResultSet\n             if full_needed == 0:\n                 if self.negated:\n                     raise EmptyResultSet\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-14122", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex be54ccd..eba6dec 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -54,6 +54,12 @@ class SQLCompiler:\n         \"\"\"\n         self.setup_query()\n         order_by = self.get_order_by()\n+        opts_ordering = self.query.model._meta.ordering\n+        opts_ordering_set = set()\n+        for item in opts_ordering:\n+            # Remove prefix if it's DESC or ASC\n+            field_name = item.lstrip('-+')\n+            opts_ordering_set.add(field_name)\n         self.where, self.having = self.query.where.split_having()\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n@@ -128,7 +134,8 @@ class SQLCompiler:\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n-            if not is_ref:\n+            # Also skip fields from Meta.ordering during aggregation.\n+            if not is_ref and expr.name not in opts_ordering_set:\n                 expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 94af730..d53474c 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -130,7 +130,7 @@ def expand_modules(\n                     continue\n                 if _is_in_ignore_list_re(\n                     os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n+                ) or _is_in_ignore_list_re(os.path.abspath(subfilepath), ignore_list_paths_re):\n                     continue\n \n                 modpath = _modpath_from_file(\n@@ -146,4 +146,4 @@ def expand_modules(\n                         \"basename\": modname,\n                     }\n                 )\n-    return result, errors\n+    return result, errors\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pallets__flask-5014", "model_patch": "diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\nindex 678f5f0..5f2086b 100644\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -190,6 +190,9 @@ class Blueprint(Scaffold):\n             root_path=root_path,\n         )\n \n+        if not name:\n+            raise ValueError(\"'name' must be a non-empty string.\")\n+\n         if \".\" in name:\n             raise ValueError(\"'name' may not contain a dot '.' character.\")\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "psf__requests-1724", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex e1a79e6..916b2b8 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -311,7 +311,7 @@ class Session(SessionRedirectMixin):\n         \"\"\"\n         # Create the Request.\n         req = Request(\n-            method = method.upper(),\n+            method = method.upper().encode('ascii'),\n             url = url,\n             headers = headers,\n             files = files,\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "psf__requests-1766", "model_patch": "diff --git a/requests/auth.py b/requests/auth.py\nindex ff8249e..3deb7af 100644\n--- a/requests/auth.py\n+++ b/requests/auth.py\n@@ -144,7 +144,7 @@ class HTTPDigestAuth(AuthBase):\n         if entdig:\n             base += ', digest=\"%s\"' % entdig\n         if qop:\n-            base += ', qop=auth, nc=%s, cnonce=\"%s\"' % (ncvalue, cnonce)\n+            base += ', qop=\"%s\", nc=%s, cnonce=\"%s\"' % (qop, ncvalue, cnonce)\n \n         return 'Digest %s' % (base)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7229", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 952c546..3674807 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -417,9 +417,15 @@ def merge_coordinates_without_align(\n \n     # TODO: indexes should probably be filtered in collected elements\n     # before merging them\n-    merged_coords, merged_indexes = merge_collected(\n-        filtered, prioritized, combine_attrs=combine_attrs\n-    )\n+    if combine_attrs == \"keep\":\n+        # Use 'drop' for coordinates to preserve their original attributes\n+        merged_coords, merged_indexes = merge_collected(\n+            filtered, prioritized, combine_attrs=\"drop\"\n+        )\n+    else:\n+        merged_coords, merged_indexes = merge_collected(\n+            filtered, prioritized, combine_attrs=combine_attrs\n+        )\n     merged_indexes = filter_indexes_from_coords(merged_indexes, set(merged_coords))\n \n     return merged_coords, merged_indexes\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "psf__requests-5414", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex b6afac6..1456f7c 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -354,7 +354,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         try:\n             host = idna.encode(host, uts46=True).decode('utf-8')\n         except idna.IDNAError:\n-            raise UnicodeError\n+            raise InvalidURL('URL has an invalid label.')\n         return host\n \n     def prepare_url(self, url, params):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-26342", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex db3f45f..4b0b943 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -884,6 +884,10 @@ class ContourSet(ContourLabeler, mcoll.Collection):\n         self.labelTexts = []\n         self.labelCValues = []\n \n+        def set_paths(self, paths):\n+            for collection, contour_paths in zip(self.collections, paths):\n+                collection.set_paths(contour_paths)\n+\n         self.set_cmap(cmap)\n         if norm is not None:\n             self.set_norm(norm)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4629", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 1328b95..5caed6a 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -501,7 +501,7 @@ def merge_attrs(variable_attrs, combine_attrs):\n     if combine_attrs == \"drop\":\n         return {}\n     elif combine_attrs == \"override\":\n-        return variable_attrs[0]\n+        return dict(variable_attrs[0])\n     elif combine_attrs == \"no_conflicts\":\n         result = dict(variable_attrs[0])\n         for attrs in variable_attrs[1:]:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "psf__requests-2931", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 85fd980..5a8e763 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -444,7 +444,10 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                 (body, content_type) = self._encode_files(files, data)\n             else:\n                 if data:\n-                    body = self._encode_params(data)\n+                    if isinstance(data, bytes):\n+                        body = data\n+                    else:\n+                        body = self._encode_params(data)\n                     if isinstance(data, basestring) or hasattr(data, 'read'):\n                         content_type = None\n                     else:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "psf__requests-1921", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 4ec0f7c..11613c2 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -288,7 +288,7 @@ class Session(SessionRedirectMixin):\n             url=request.url,\n             files=request.files,\n             data=request.data,\n-            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),\n+            headers=merge_setting(request.headers, self.headers, remove_none=True, dict_class=CaseInsensitiveDict),\n             params=merge_setting(request.params, self.params),\n             auth=merge_setting(auth, self.auth),\n             cookies=merged_cookies,\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 609c102..31d96c5 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -647,7 +647,8 @@ class Continuous(ContinuousBase):\n             formatter = EngFormatter(unit, sep=sep)\n \n         else:\n-            formatter = ScalarFormatter()\n+            formatter = ScalarFormatter(useOffset=True, useMathText=True)\n+            formatter.set_powerlimits((-3, 3))  # Setting limits to show offset for large numbers\n \n         return formatter\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6721", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py\nindex 5d9b9b4..5615f07 100644\n--- a/lib/matplotlib/backends/backend_agg.py\n+++ b/lib/matplotlib/backends/backend_agg.py\n@@ -205,8 +205,9 @@ class RendererAgg(RendererBase):\n         # We pass '0' for angle here, since it will be rotated (in raster\n         # space) in the following call to draw_text_image).\n         font.set_text(s, 0, flags=get_hinting_flag())\n+        antialiased = getattr(text_obj, '_antialiased', mpl.rcParams['text.antialiased'])\n         font.draw_glyphs_to_bitmap(\n-            antialiased=mpl.rcParams['text.antialiased'])\n+            antialiased=antialiased)\n         d = font.get_descent() / 64.0\n         # The descent needs to be adjusted for the angle.\n         xo, yo = font.get_bitmap_offset()\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-13989", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 6b68737..57efec6 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6686,7 +6686,7 @@ optional.\n \n         density = bool(density) or bool(normed)\n         if density and not stacked:\n-            hist_kwargs = dict(density=density)\n+            hist_kwargs = dict(density=density, range=bin_range)\n \n         # List to store all the top coordinates of the histograms\n         tops = []\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-2905", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex d82c4a0..cffa2b5 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -855,7 +855,11 @@ class Variable(\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n \n         if not isinstance(value, Variable):\n-            value = as_compatible_data(value)\n+            # Only use as_compatible_data if value is not an instance of HasValues or similar problematic objects\n+            if hasattr(value, 'values') and not isinstance(value, (np.ndarray, xr.DataArray)):\n+                value = value.values\n+            else:\n+                value = as_compatible_data(value)\n             if value.ndim > len(dims):\n                 raise ValueError(\n                     \"shape mismatch: value array of shape %s could not be \"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/categorical.py b/seaborn/categorical.py\nindex ec4f4c2..6b10bd1 100644\n--- a/seaborn/categorical.py\n+++ b/seaborn/categorical.py\n@@ -198,7 +198,7 @@ class _CategoricalPlotterNew(_RelationalPlotter):\n         # But two reasons not to do that:\n         # - If it happens before plotting, autoscaling messes up the plot limits\n         # - It would change existing plots from other seaborn functions\n-        if self.var_types[axis] != \"categorical\":\n+        if self.var_types[axis] not in [\"categorical\", \"nominal\"]:\n             return\n \n         # If both x/y data are empty, the correct way to set up the plot is\n@@ -218,10 +218,11 @@ class _CategoricalPlotterNew(_RelationalPlotter):\n         if axis == \"x\":\n             ax.xaxis.grid(False)\n             ax.set_xlim(-.5, n - .5, auto=None)\n-        else:\n+        elif axis == \"y\":\n             ax.yaxis.grid(False)\n             # Note limits that correspond to previously-inverted y axis\n             ax.set_ylim(n - .5, -.5, auto=None)\n+            ax.invert_yaxis()\n \n     @property\n     def _native_width(self):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-16950", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 71f23cb..da445ff 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1177,7 +1177,7 @@ class BaseInlineFormSet(BaseModelFormSet):\n                 to_field = self.instance._meta.get_field(kwargs[\"to_field\"])\n             else:\n                 to_field = self.instance._meta.pk\n-            if to_field.has_default():\n+            if to_field.has_default() and not isinstance(to_field, models.UUIDField):\n                 setattr(self.instance, to_field.attname, None)\n \n         form.fields[name] = InlineForeignKeyField(self.instance, **kwargs)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-21568", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex f565bc8..9e9462c 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -596,8 +596,10 @@ def _wrap_in_tex(text):\n     ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n     # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n+    ret_text = '$\\\\mathdefault{' + ret_text.replace('-', '{-}') + '}$'\n     ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n+    # Ensure math font is the same as text font\n+    ret_text = r'\\everymath{\\mathsf{' + ret_text + r'}}'\n     return ret_text\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3677", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex cad360a..2146bfc 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -389,7 +389,9 @@ def coerce_pandas_values(objects: Iterable[\"CoercibleMapping\"]) -> List[\"Dataset\n             variables: \"DatasetLike\" = obj\n         else:\n             variables = {}\n-            if isinstance(obj, PANDAS_TYPES):\n+            if isinstance(obj, DataArray):\n+                obj = obj.to_dataset()\n+            elif isinstance(obj, PANDAS_TYPES):\n                 obj = dict(obj.iteritems())\n             for k, v in obj.items():\n                 if isinstance(v, PANDAS_TYPES):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex d47134b..c266d91 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -191,13 +191,22 @@ class HTTPAdapter(BaseAdapter):\n             )\n         else:\n             proxy_headers = self.proxy_headers(proxy)\n-            manager = self.proxy_manager[proxy] = proxy_from_url(\n-                proxy,\n-                proxy_headers=proxy_headers,\n-                num_pools=self._pool_connections,\n-                maxsize=self._pool_maxsize,\n-                block=self._pool_block,\n-                **proxy_kwargs)\n+            # Explicitly check and pass auth headers\n+            if proxy_headers:\n+                manager = self.proxy_manager[proxy] = proxy_from_url(\n+                    proxy,\n+                    proxy_headers=proxy_headers,\n+                    num_pools=self._pool_connections,\n+                    maxsize=self._pool_maxsize,\n+                    block=self._pool_block,\n+                    **proxy_kwargs)\n+            else:\n+                manager = self.proxy_manager[proxy] = proxy_from_url(\n+                    proxy,\n+                    num_pools=self._pool_connections,\n+                    maxsize=self._pool_maxsize,\n+                    block=self._pool_block,\n+                    **proxy_kwargs)\n \n         return manager\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5262", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6744", "model_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex eae2351..e383684 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,9 +270,17 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[: int(self.window[0])] = 0\n+        window_size = int(self.window[0])\n+        half_window_size = window_size // 2\n+        stops = np.arange(window_size, len(self.window_labels) + 1)\n+        starts = stops - window_size\n+        if self.center:\n+            starts += half_window_size\n+            stops = starts + window_size\n+            starts[: half_window_size] = 0\n+            stops[-half_window_size:] = len(self.window_labels)\n+        else:\n+            starts[: window_size] = 0\n         for (label, start, stop) in zip(self.window_labels, starts, stops):\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6461", "model_patch": "diff --git a/xarray/core/ops.py b/xarray/core/ops.py\nindex 00a392c..a0f1177 100644\n--- a/xarray/core/ops.py\n+++ b/xarray/core/ops.py\n@@ -173,6 +173,7 @@ def where_method(self, cond, other=dtypes.NA):\n \n     # alignment for three arguments is complicated, so don't support it yet\n     join = \"inner\" if other is dtypes.NA else \"exact\"\n+    keep_attrs = True if isinstance(other, (xr.DataArray, xr.Dataset)) else False\n     return apply_ufunc(\n         duck_array_ops.where_method,\n         self,\n@@ -181,7 +182,7 @@ def where_method(self, cond, other=dtypes.NA):\n         join=join,\n         dataset_join=join,\n         dask=\"allowed\",\n-        keep_attrs=True,\n+        keep_attrs=keep_attrs,\n     )\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 33ea6ed..2bc3766 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1,3 +1,4 @@\n+\n import collections\n import json\n import re\n@@ -1785,7 +1786,7 @@ class SQLUpdateCompiler(SQLCompiler):\n                 update_params.append(val)\n             else:\n                 values.append(\"%s = NULL\" % qn(name))\n-        table = self.query.base_table\n+        table = self.query.model._meta.db_table\n         result = [\n             \"UPDATE %s SET\" % qn(table),\n             \", \".join(values),\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-26208", "model_patch": "diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex 3c3cee4..aa377aa 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -124,4 +124,7 @@ def stackplot(axes, x, *args,\n                                    facecolor=next(colors),\n                                    label=next(labels, None),\n                                    **kwargs))\n-    return r\n+    return r\n+\n+    # Ensure the data limits are set after stackplot\n+    axes.set_data_interval(*axes.dataLim.intervaly)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6903", "model_patch": "diff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex aabf0aa..be65da4 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -52,12 +52,12 @@ def _query_cpu() -> int | None:\n         with open(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n             cpu_period = int(file.read().rstrip())\n         # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n-        avail_cpu = int(cpu_quota / cpu_period)\n+        avail_cpu = int(cpu_quota / cpu_period) or 1\n     elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n         with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n             cpu_shares = int(file.read().rstrip())\n         # For AWS, gives correct value * 1024.\n-        avail_cpu = int(cpu_shares / 1024)\n+        avail_cpu = int(cpu_shares / 1024) or 1\n     return avail_cpu\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6992", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1a9b7a7..31afac8 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -365,7 +365,7 @@ class DataVariables(Mapping[Any, \"DataArray\"]):\n         )\n \n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        return max(0, len(self._dataset._variables) - len(self._dataset._coord_names))\n \n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4966", "model_patch": "diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py\nindex 30db316..3c5bf48 100644\n--- a/xarray/coding/variables.py\n+++ b/xarray/coding/variables.py\n@@ -316,6 +316,15 @@ class UnsignedIntegerCoder(VariableCoder):\n                     if \"_FillValue\" in attrs:\n                         new_fill = unsigned_dtype.type(attrs[\"_FillValue\"])\n                         attrs[\"_FillValue\"] = new_fill\n+            \n+            elif data.dtype.kind == \"u\":\n+                if unsigned == \"false\":\n+                    signed_dtype = np.dtype(\"i%s\" % data.dtype.itemsize)\n+                    transform = partial(np.asarray, dtype=signed_dtype)\n+                    data = lazy_elemwise_func(data, transform, signed_dtype)\n+                    if \"_FillValue\" in attrs:\n+                        new_fill = signed_dtype.type(attrs[\"_FillValue\"])\n+                        attrs[\"_FillValue\"] = new_fill\n             else:\n                 warnings.warn(\n                     \"variable %r has _Unsigned attribute but is not \"\n@@ -324,4 +333,4 @@ class UnsignedIntegerCoder(VariableCoder):\n                     stacklevel=3,\n                 )\n \n-        return Variable(dims, data, attrs, encoding)\n+        return Variable(dims, data, attrs, encoding)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-7277", "model_patch": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 79f7224..20af430 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,7 +96,8 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+    if sys.path[0] in (\"\", \".\", os.getcwd()):\n+        sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n@@ -105,4 +106,4 @@ def modify_sys_path() -> None:\n         sys.path.pop(1)\n \n \n-version = __version__\n+version = __version__\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7236", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6599", "model_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 3ef7ed0..cd3f20a 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -447,7 +447,13 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n         # Convert to specified timedelta units.\n         if datetime_unit:\n             array = array / np.timedelta64(1, datetime_unit)\n-        return np.where(isnull(array), np.nan, array.astype(dtype))\n+        else:\n+            # Default to a common unit for conversion, e.g., 'ns'\n+            array = array / np.timedelta64(1, 'ns')\n+            \n+        # Ensure the array is cast to the desired dtype\n+        array = np.where(isnull(array), np.nan, array.astype('float64'))\n+        return array.astype(dtype)\n \n \n def timedelta_to_numeric(value, datetime_unit=\"ns\", dtype=float):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7324", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7521", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-10081", "model_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 28c146e..bf5dec2 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -316,7 +316,7 @@ class TestCaseFunction(Function):\n             # Arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed.\n-            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n+            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj) and not _is_skipped(self._testcase.__class__):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5631", "model_patch": "diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\nindex c84507d..84039c6 100644\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -67,8 +67,9 @@ def num_mock_patch_args(function):\n     mock_modules = [sys.modules.get(\"mock\"), sys.modules.get(\"unittest.mock\")]\n     if any(mock_modules):\n         sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n+        import numpy as np\n         return len(\n-            [p for p in patchings if not p.attribute_name and p.new in sentinels]\n+            [p for p in patchings if not p.attribute_name and not isinstance(p.new, np.ndarray) and p.new in sentinels]\n         )\n     return len(patchings)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5809", "model_patch": "diff --git a/src/_pytest/pastebin.py b/src/_pytest/pastebin.py\nindex 9c2c4cd..7200d8d 100644\n--- a/src/_pytest/pastebin.py\n+++ b/src/_pytest/pastebin.py\n@@ -79,7 +79,7 @@ def create_new_paste(contents):\n \n     params = {\n         \"code\": contents,\n-        \"lexer\": \"python3\" if sys.version_info[0] >= 3 else \"python\",\n+        \"lexer\": \"text\",\n         \"expiry\": \"1week\",\n     }\n     url = \"https://bpaste.net\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25960", "model_patch": "diff --git a/lib/matplotlib/_constrained_layout.py b/lib/matplotlib/_constrained_layout.py\nindex 81fd88a..2aa369b 100644\n--- a/lib/matplotlib/_constrained_layout.py\n+++ b/lib/matplotlib/_constrained_layout.py\n@@ -352,7 +352,7 @@ def make_layout_margins(layoutgrids, fig, renderer, *, w_pad=0, h_pad=0,\n                             w_pad=w_pad, h_pad=h_pad,\n                             hspace=hspace, wspace=wspace)\n \n-        margins = get_margin_from_padding(sfig, w_pad=0, h_pad=0,\n+        margins = get_margin_from_padding(sfig, w_pad=w_pad, h_pad=h_pad,\n                                           hspace=hspace, wspace=wspace)\n         layoutgrids[gs].edit_outer_margin_mins(margins, ss)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7982", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..5f05969 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,9 +112,9 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a semicolon separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in value.split(';'):\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-10051", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 9234395..8301c97 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -441,6 +441,9 @@ class LogCaptureFixture:\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n+        for when in [\"setup\", \"call\", \"teardown\"]:\n+            if when in self._item.stash[caplog_records_key]:\n+                self._item.stash[caplog_records_key][when].clear()\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n         \"\"\"Set the level of a logger for the duration of a test.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7205", "model_patch": "diff --git a/src/_pytest/setuponly.py b/src/_pytest/setuponly.py\nindex 7d5414b..58f1a96 100644\n--- a/src/_pytest/setuponly.py\n+++ b/src/_pytest/setuponly.py\n@@ -66,7 +66,8 @@ def _show_fixture_action(fixturedef, msg):\n             tw.write(\" (fixtures used: {})\".format(\", \".join(deps)))\n \n     if hasattr(fixturedef, \"cached_param\"):\n-        tw.write(\"[{}]\".format(fixturedef.cached_param))\n+        from pytest._repr import saferepr\n+        tw.write(\"[{}]\".format(saferepr(fixturedef.cached_param)))\n \n     tw.flush()\n \n@@ -77,4 +78,4 @@ def _show_fixture_action(fixturedef, msg):\n @pytest.hookimpl(tryfirst=True)\n def pytest_cmdline_main(config):\n     if config.option.setuponly:\n-        config.option.setupshow = True\n+        config.option.setupshow = True\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-6202", "model_patch": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 26752a6..46129d3 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -286,7 +286,7 @@ class PyobjMixin(PyobjContext):\n             parts.append(name)\n         parts.reverse()\n         s = \".\".join(parts)\n-        return s.replace(\".[\", \"[\")\n+        return s\n \n     def reportinfo(self):\n         # XXX caching?\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5840", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10844", "model_patch": "diff --git a/sklearn/metrics/cluster/supervised.py b/sklearn/metrics/cluster/supervised.py\nindex a5624b4..5454538 100644\n--- a/sklearn/metrics/cluster/supervised.py\n+++ b/sklearn/metrics/cluster/supervised.py\n@@ -856,7 +856,7 @@ def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):\n     tk = np.dot(c.data, c.data) - n_samples\n     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples\n     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples\n-    return tk / np.sqrt(pk * qk) if tk != 0. else 0.\n+    return np.sqrt(tk / pk) * np.sqrt(tk / qk) if tk != 0. else 0.\n \n \n def entropy(labels):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8399", "model_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex ae115dc..07abb32 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -144,7 +144,7 @@ def _make_xunit_fixture(\n         scope=scope,\n         autouse=True,\n         # Use a unique name to speed up lookup.\n-        name=f\"unittest_{setup_name}_fixture_{obj.__qualname__}\",\n+        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n     )\n     def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n         if _is_skipped(self):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12585", "model_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 8dd093e..42f6f43 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -48,7 +48,7 @@ def clone(estimator, safe=True):\n     # XXX: not handling dictionaries\n     if estimator_type in (list, tuple, set, frozenset):\n         return estimator_type([clone(e, safe=safe) for e in estimator])\n-    elif not hasattr(estimator, 'get_params'):\n+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):\n         if not safe:\n             return copy.deepcopy(estimator)\n         else:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-6197", "model_patch": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 272731b..1b0efca 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -178,9 +178,11 @@ def pytest_collect_file(path, parent):\n     if ext == \".py\":\n         if not parent.session.isinitpath(path):\n             if not path_matches_patterns(\n-                path, parent.config.getini(\"python_files\") + [\"__init__.py\"]\n+                path, parent.config.getini(\"python_files\")\n             ):\n                 return\n+            if path.basename == \"__init__.py\" and \"__init__.py\" not in parent.config.getini(\"python_files\"):\n+                return\n         ihook = parent.session.gethookproxy(path)\n         return ihook.pytest_pycollect_makemodule(path=path, parent=parent)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11578", "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 6a330d0..62cb0da 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -922,7 +922,7 @@ def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,\n         check_input=False, max_squared_sum=max_squared_sum,\n         sample_weight=sample_weight)\n \n-    log_reg = LogisticRegression(fit_intercept=fit_intercept)\n+    log_reg = LogisticRegression(fit_intercept=fit_intercept, multi_class=multi_class)\n \n     # The score method of Logistic Regression has a classes_ attribute.\n     if multi_class == 'ovr':\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6386", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10908", "model_patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex 7e240fc..1b7a5ef 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -993,7 +993,11 @@ class CountVectorizer(BaseEstimator, VectorizerMixin):\n \n     def get_feature_names(self):\n         \"\"\"Array mapping from feature integer indices to feature name\"\"\"\n-        self._check_vocabulary()\n+        if not hasattr(self, 'vocabulary_') or self.vocabulary_ is None:\n+            if self.vocabulary is not None:\n+                self.vocabulary_ = dict((v, i) for i, v in enumerate(self.vocabulary))\n+            else:\n+                self._check_vocabulary()\n \n         return [t for t, i in sorted(six.iteritems(self.vocabulary_),\n                                      key=itemgetter(1))]\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14496", "model_patch": "diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py\nindex 29ab900..301f9cf 100644\n--- a/sklearn/cluster/optics_.py\n+++ b/sklearn/cluster/optics_.py\n@@ -437,7 +437,7 @@ if metric=\u2019precomputed\u2019.\n     n_samples = X.shape[0]\n     _validate_size(min_samples, n_samples, 'min_samples')\n     if min_samples <= 1:\n-        min_samples = max(2, min_samples * n_samples)\n+        min_samples = int(round(max(2, min_samples * n_samples)))\n \n     # Start all points as 'unprocessed' ##\n     reachability_ = np.empty(n_samples)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11310", "model_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex 0f3216b..88511e1 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -764,12 +764,15 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,\n                 self.best_index_]\n \n         if self.refit:\n+            import time\n+            start_time = time.time()\n             self.best_estimator_ = clone(base_estimator).set_params(\n                 **self.best_params_)\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n             else:\n                 self.best_estimator_.fit(X, **fit_params)\n+            self.refit_time_ = time.time() - start_time\n \n         # Store the only scorer not as a dict for single metric evaluation\n         self.scorer_ = scorers if self.multimetric_ else scorers['score']\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4687", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 81d2785..418c7a0 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1196,12 +1196,13 @@ class DataArray(AbstractArray, DataWithCoords):\n         DataArray.isel\n \n         \"\"\"\n+        indexers, other_kwargs = either_dict_or_kwargs(indexers, indexers_kwargs, \"sel\", return_kwargs=True)\n+        indexers = {k: v for k, v in indexers.items() if k not in [\"method\", \"tolerance\"]}\n         ds = self._to_temp_dataset().sel(\n             indexers=indexers,\n             drop=drop,\n-            method=method,\n-            tolerance=tolerance,\n-            **indexers_kwargs,\n+            method=other_kwargs.get(\"method\", None),\n+            tolerance=other_kwargs.get(\"tolerance\", None),\n         )\n         return self._from_temp_dataset(ds)\n \ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex f2cfd70..85d38f9 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -2227,7 +2227,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         Dataset.isel\n         DataArray.sel\n         \"\"\"\n-        indexers = either_dict_or_kwargs(indexers, indexers_kwargs, \"sel\")\n+        indexers, other_kwargs = either_dict_or_kwargs(indexers, indexers_kwargs, \"sel\", return_kwargs=True)\n+        indexers = {k: v for k, v in indexers.items() if k not in [\"method\", \"tolerance\"]}\n         pos_indexers, new_indexes = remap_label_indexers(\n             self, indexers=indexers, method=method, tolerance=tolerance\n         )\ndiff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 4b06bfd..224364a 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -188,7 +188,7 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n                     )\n                 indexer = index.get_loc(label_value)\n             else:\n-                indexer = index.get_loc(label_value, method=method, tolerance=tolerance)\n+                indexer = index.get_loc(label_value, method=method if method is not None else \"nearest\", tolerance=tolerance)\n         elif label.dtype.kind == \"b\":\n             indexer = label\n         else:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..26cfdcf 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -412,13 +412,19 @@ def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data[\"_report_type\"] = report.__class__.__name__\n+        if isinstance(report, TestReport) and report.longrepr:\n+            # Ensure the full traceback is serialized, including chained exceptions\n+            data[\"longrepr\"] = str(report.longrepr)\n         return data\n \n \n def pytest_report_from_serializable(data):\n     if \"_report_type\" in data:\n         if data[\"_report_type\"] == \"TestReport\":\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n+            if \"longrepr\" in data:\n+                report.longrepr = TerminalRepr.fromrepr(data[\"longrepr\"])\n+            return report\n         elif data[\"_report_type\"] == \"CollectReport\":\n             return CollectReport._from_json(data)\n         assert False, \"Unknown report_type unserialize data: {}\".format(\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex d345d83..dbe5c86 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -355,12 +355,15 @@ class MarkDecorator:\n         return self.with_args(*args, **kwargs)\n \n \n+import itertools\n+from _pytest.mark.structures import Mark, MarkDecorator\n+\n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n-    return normalize_mark_list(mark_list)\n+    \"\"\"Obtain the unpacked marks that are stored on an object, considering MRO.\"\"\"\n+    mark_lists = [getattr(cls, \"pytestmark\", []) for cls in reversed(obj.__class__.__mro__) if hasattr(cls, \"pytestmark\")]\n+    combined_marks = list(itertools.chain.from_iterable(mark_lists))\n+    # Normalize the combined marks list\n+    return normalize_mark_list(combined_marks)\n \n \n def normalize_mark_list(\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..fc7c096 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -356,6 +356,8 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+            if logger_name is None:\n+                self.handler.setLevel(level)\n \n     @property\n     def handler(self) -> LogCaptureHandler:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13124", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 1bd5697..ad6686d 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -651,10 +651,16 @@ class StratifiedKFold(_BaseKFold):\n         # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n         # will break when the data is not 100% stratifiable for all classes.\n         # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n-        per_cls_cvs = [\n-            KFold(self.n_splits, shuffle=self.shuffle,\n-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n-            for count in y_counts]\n+        per_cls_cvs = []\n+        for count in y_counts:\n+            # Create an array of indices for the current class\n+            class_indices = np.arange(n_samples)[y == unique_y[len(per_cls_cvs)]]\n+            # Shuffle the indices if shuffle is True\n+            if self.shuffle:\n+                rng.shuffle(class_indices)\n+            # Split the shuffled indices into n_splits folds\n+            per_cls_cv = KFold(self.n_splits, shuffle=False, random_state=None).split(class_indices)\n+            per_cls_cvs.append(per_cls_cv)\n \n         test_folds = np.zeros(n_samples, dtype=np.int)\n         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12973", "model_patch": "diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\nindex b1d16f1..26e3c00 100644\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):\n         self.eps = eps\n         self.fit_path = True\n \n-    def fit(self, X, y, copy_X=True):\n+    def fit(self, X, y, copy_X=None):\n         \"\"\"Fit the model using X, y as training data.\n \n         Parameters\n@@ -1490,8 +1490,9 @@ class LassoLarsIC(LassoLars):\n         y : array-like, shape (n_samples,)\n             target values. Will be cast to X's dtype if necessary\n \n-        copy_X : boolean, optional, default True\n+        copy_X : boolean, optional, default None\n             If ``True``, X will be copied; else, it may be overwritten.\n+            If None, the value of self.copy_X will be used.\n \n         Returns\n         -------\n@@ -1500,8 +1501,11 @@ class LassoLarsIC(LassoLars):\n         \"\"\"\n         X, y = check_X_y(X, y, y_numeric=True)\n \n+        if copy_X is None:\n+            copy_X = self.copy_X\n+\n         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(\n-            X, y, self.fit_intercept, self.normalize, self.copy_X)\n+            X, y, self.fit_intercept, self.normalize, copy_X)\n         max_iter = self.max_iter\n \n         Gram = self.precompute\n@@ -1543,4 +1547,4 @@ class LassoLarsIC(LassoLars):\n         self.alpha_ = alphas_[n_best]\n         self.coef_ = coef_path_[:, n_best]\n         self._set_intercept(Xmean, ymean, Xstd)\n-        return self\n+        return self\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14141", "model_patch": "diff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nindex 72f054a..fdad4bf 100644\n--- a/sklearn/utils/_show_versions.py\n+++ b/sklearn/utils/_show_versions.py\n@@ -103,6 +103,8 @@ def show_versions():\n     sys_info = _get_sys_info()\n     deps_info = _get_deps_info()\n     blas_info = _get_blas_info()\n+    import sklearn\n+    sklearn_version = parse_version(sklearn.__version__)\n \n     print('\\nSystem:')\n     for k, stat in sys_info.items():\n@@ -114,4 +116,12 @@ def show_versions():\n \n     print('\\nPython deps:')\n     for k, stat in deps_info.items():\n-        print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n+        print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n+\n+    if sklearn_version > parse_version('0.20'):\n+        try:\n+            import joblib\n+            joblib_version = joblib.__version__\n+        except ImportError:\n+            joblib_version = \"Not installed\"\n+        print(\"{k:>10}: {stat}\".format(k='joblib', stat=joblib_version))\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15100", "model_patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex d954f48..f6d64db 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -130,10 +130,7 @@ def strip_accents_unicode(s):\n         ASCII equivalent.\n     \"\"\"\n     normalized = unicodedata.normalize('NFKD', s)\n-    if normalized == s:\n-        return s\n-    else:\n-        return ''.join([c for c in normalized if not unicodedata.combining(c)])\n+    return ''.join([c for c in normalized if not unicodedata.combining(c)])\n \n \n def strip_accents_ascii(s):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12682", "model_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8cfbe5f..7d6a8b4 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -991,12 +991,13 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n \n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n-                 split_sign=False, n_jobs=None, positive_code=False):\n+                 split_sign=False, n_jobs=None, positive_code=False, max_iter=1000):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n                                        positive_code)\n+        self.max_iter = max_iter\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10614", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13135", "model_patch": "diff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py\nindex c5fe0ab..10a76e4 100644\n--- a/sklearn/preprocessing/_discretization.py\n+++ b/sklearn/preprocessing/_discretization.py\n@@ -172,6 +172,7 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):\n                 # 1D k-means procedure\n                 km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)\n                 centers = km.fit(column[:, None]).cluster_centers_[:, 0]\n+                centers.sort()  # Sort the centers to ensure bin edges are sorted\n                 bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5\n                 bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7462", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14053", "model_patch": "diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex 8644d61..12b70ee 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -890,9 +890,9 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n         value_fmt = \"{}{} value: {}\\n\"\n \n     if feature_names:\n-        feature_names_ = [feature_names[i] for i in tree_.feature]\n+        feature_names_ = [feature_names[i] for i in tree_.feature if i != _tree.TREE_UNDEFINED]\n     else:\n-        feature_names_ = [\"feature_{}\".format(i) for i in tree_.feature]\n+        feature_names_ = [\"feature_{}\".format(i) for i in tree_.feature if i != _tree.TREE_UNDEFINED]\n \n     export_text.report = \"\"\n \n@@ -928,20 +928,23 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n             info_fmt_right = info_fmt\n \n             if tree_.feature[node] != _tree.TREE_UNDEFINED:\n-                name = feature_names_[node]\n-                threshold = tree_.threshold[node]\n-                threshold = \"{1:.{0}f}\".format(decimals, threshold)\n-                export_text.report += right_child_fmt.format(indent,\n-                                                             name,\n-                                                             threshold)\n-                export_text.report += info_fmt_left\n-                print_tree_recurse(tree_.children_left[node], depth+1)\n-\n-                export_text.report += left_child_fmt.format(indent,\n-                                                            name,\n-                                                            threshold)\n-                export_text.report += info_fmt_right\n-                print_tree_recurse(tree_.children_right[node], depth+1)\n+                if tree_.feature[node] != _tree.TREE_UNDEFINED:\n+                    name = feature_names_[node]\n+                    threshold = tree_.threshold[node]\n+                    threshold = \"{1:.{0}f}\".format(decimals, threshold)\n+                    export_text.report += right_child_fmt.format(indent,\n+                                                                 name,\n+                                                                 threshold)\n+                    export_text.report += info_fmt_left\n+                    print_tree_recurse(tree_.children_left[node], depth+1)\n+\n+                    export_text.report += left_child_fmt.format(indent,\n+                                                                name,\n+                                                                threshold)\n+                    export_text.report += info_fmt_right\n+                    print_tree_recurse(tree_.children_right[node], depth+1)\n+                else:\n+                    _add_leaf(value, class_name, indent)\n             else:  # leaf\n                 _add_leaf(value, class_name, indent)\n         else:\n@@ -954,4 +957,4 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n                                                             trunc_report)\n \n     print_tree_recurse(0, 1)\n-    return export_text.report\n+    return export_text.report\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-26194", "model_patch": "diff --git a/sklearn/metrics/_ranking.py b/sklearn/metrics/_ranking.py\nindex 0841d1d..5791ee9 100644\n--- a/sklearn/metrics/_ranking.py\n+++ b/sklearn/metrics/_ranking.py\n@@ -1083,7 +1083,10 @@ def roc_curve(\n     # to make sure that the curve starts at (0, 0)\n     tps = np.r_[0, tps]\n     fps = np.r_[0, fps]\n-    thresholds = np.r_[thresholds[0] + 1, thresholds]\n+    if y_score.max() <= 1:\n+        thresholds = np.r_[min(thresholds[0] + 1, 1), thresholds]\n+    else:\n+        thresholds = np.r_[thresholds[0] + 1, thresholds]\n \n     if fps[-1] <= 0:\n         warnings.warn(\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13328", "model_patch": "diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py\nindex 774a22b..6ac20c5 100644\n--- a/sklearn/linear_model/huber.py\n+++ b/sklearn/linear_model/huber.py\n@@ -79,7 +79,7 @@ def _huber_loss_and_gradient(w, X, y, epsilon, alpha, sample_weight=None):\n \n     # Calculate the quadratic loss due to the non-outliers.-\n     # This is equal to |(y - X'w - c)**2 / sigma**2| * sigma\n-    non_outliers = linear_loss[~outliers_mask]\n+    non_outliers = linear_loss[outliers_mask.astype(bool)]\n     weighted_non_outliers = sample_weight[~outliers_mask] * non_outliers\n     weighted_loss = np.dot(weighted_non_outliers.T, non_outliers)\n     squared_loss = weighted_loss / sigma\n@@ -90,7 +90,7 @@ def _huber_loss_and_gradient(w, X, y, epsilon, alpha, sample_weight=None):\n         grad = np.zeros(n_features + 1)\n \n     # Gradient due to the squared loss.\n-    X_non_outliers = -axis0_safe_slice(X, ~outliers_mask, n_non_outliers)\n+    X_non_outliers = -axis0_safe_slice(X, outliers_mask.astype(bool), n_non_outliers)\n     grad[:n_features] = (\n         2. / sigma * safe_sparse_dot(weighted_non_outliers, X_non_outliers))\n \n@@ -98,7 +98,7 @@ def _huber_loss_and_gradient(w, X, y, epsilon, alpha, sample_weight=None):\n     signed_outliers = np.ones_like(outliers)\n     signed_outliers_mask = linear_loss[outliers_mask] < 0\n     signed_outliers[signed_outliers_mask] = -1.0\n-    X_outliers = axis0_safe_slice(X, outliers_mask, num_outliers)\n+    X_outliers = axis0_safe_slice(X, outliers_mask.astype(bool), num_outliers)\n     sw_outliers = sample_weight[outliers_mask] * signed_outliers\n     grad[:n_features] -= 2. * epsilon * (\n         safe_sparse_dot(sw_outliers, X_outliers))\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14629", "model_patch": "diff --git a/sklearn/model_selection/_validation.py b/sklearn/model_selection/_validation.py\nindex 224ebb4..fffbfa6 100644\n--- a/sklearn/model_selection/_validation.py\n+++ b/sklearn/model_selection/_validation.py\n@@ -856,14 +856,16 @@ def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params,\n     if method in ['decision_function', 'predict_proba', 'predict_log_proba']:\n         if isinstance(predictions, list):\n             predictions = [_enforce_prediction_order(\n-                estimator.classes_[i_label], predictions[i_label],\n+                estimator.estimators_[i_label].classes_, predictions[i_label],\n                 n_classes=len(set(y[:, i_label])), method=method)\n                 for i_label in range(len(predictions))]\n         else:\n             # A 2D y array should be a binary label indicator matrix\n             n_classes = len(set(y)) if y.ndim == 1 else y.shape[1]\n-            predictions = _enforce_prediction_order(\n-                estimator.classes_, predictions, n_classes, method)\n+            predictions = [_enforce_prediction_order(\n+                estimator.estimators_[i].classes_, predictions[:, i],\n+                n_classes=n_classes, method=method)\n+                for i in range(y.shape[1])]\n     return predictions, test\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14710", "model_patch": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py\nindex f6e53af..e46cab5 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py\n@@ -426,11 +426,15 @@ class BaseHistGradientBoosting(BaseEstimator, ABC):\n \n         Scores are computed on validation data or on training data.\n         \"\"\"\n+        if hasattr(self, 'classes_'):\n+            y_small_train = self.classes_[y_small_train.astype(int)]\n         self.train_score_.append(\n             self.scorer_(self, X_binned_small_train, y_small_train)\n         )\n \n         if self._use_validation_data:\n+            if hasattr(self, 'classes_'):\n+                y_val = self.classes_[y_val.astype(int)]\n             self.validation_score_.append(\n                 self.scorer_(self, X_binned_val, y_val)\n             )\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10435", "model_patch": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex 2dc462a..6952336 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -1710,11 +1710,11 @@ class LaTeXTranslator(SphinxTranslator):\n         # TODO: Use nowrap option once LaTeX formatter supports it\n         # https://github.com/pygments/pygments/pull/1343\n         hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n-                                r'\\sphinxcode{\\sphinxupquote{')\n+                                r'\\sphinxcode{\\sphinxupquote{%')\n         # get consistent trailer\n-        hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n+        hlcode = hlcode.rstrip()[:-14].rstrip()  # strip \\end{Verbatim} and any extra spaces\n         self.body.append(hlcode)\n-        self.body.append('}}')\n+        self.body.append('%}}')\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25931", "model_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex d995c25..e8b8be0 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -345,7 +345,10 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             return self\n \n         # else, define offset_ wrt contamination parameter\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        if isinstance(X, pd.DataFrame):\n+            self.offset_ = np.percentile(self.score_samples(pd.DataFrame(X, columns=X.columns)), 100.0 * self.contamination)\n+        else:\n+            self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n \n         return self\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25973", "model_patch": "diff --git a/sklearn/feature_selection/_sequential.py b/sklearn/feature_selection/_sequential.py\nindex 2854ca5..5fe27dd 100644\n--- a/sklearn/feature_selection/_sequential.py\n+++ b/sklearn/feature_selection/_sequential.py\n@@ -305,6 +305,9 @@ class SequentialFeatureSelector(SelectorMixin, MetaEstimatorMixin, BaseEstimator\n             if self.direction == \"backward\":\n                 candidate_mask = ~candidate_mask\n             X_new = X[:, candidate_mask]\n+            if isinstance(self.cv, Iterable) and not hasattr(self.cv, 'split'):\n+                # Convert iterable of splits to a _CVIterableWrapper\n+                self.cv = _CVIterableWrapper(self.cv)\n             scores[feature_idx] = cross_val_score(\n                 estimator,\n                 X_new,\n@@ -323,4 +326,4 @@ class SequentialFeatureSelector(SelectorMixin, MetaEstimatorMixin, BaseEstimator\n     def _more_tags(self):\n         return {\n             \"allow_nan\": _safe_tags(self.estimator, key=\"allow_nan\"),\n-        }\n+        }\ndiff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex f742a36..acd9b92 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -2403,9 +2403,78 @@ class _CVIterableWrapper(BaseCrossValidator):\n             yield train, test\n \n \n+from collections.abc import Iterable\n+\n def check_cv(cv=5, y=None, *, classifier=False):\n     \"\"\"Input checker utility for building a cross-validator.\n \n+    Parameters\n+    ----------\n+    cv : int, cross-validation generator or an iterable, default=None\n+        Determines the cross-validation splitting strategy.\n+        Possible inputs for cv are:\n+        - None, to use the default 5-fold cross validation,\n+        - integer, to specify the number of folds.\n+        - :term:`CV splitter`,\n+        - An iterable that generates (train, test) splits as arrays of indices.\n+\n+        For integer/None inputs, if classifier is True and ``y`` is either\n+        binary or multiclass, :class:`StratifiedKFold` is used. In all other\n+        cases, :class:`KFold` is used.\n+\n+        Refer :ref:`User Guide <cross_validation>` for the various\n+        cross-validation strategies that can be used here.\n+\n+        .. versionchanged:: 0.22\n+            ``cv`` default value changed from 3-fold to 5-fold.\n+\n+    y : array-like, default=None\n+        The target variable for supervised learning problems.\n+\n+    classifier : bool, default=False\n+        Whether the task is a classification task, in which case\n+        stratified KFold will be used.\n+\n+    Returns\n+    -------\n+    checked_cv : a cross-validator instance.\n+        The return value is a cross-validator which generates the train/test\n+        splits via the ``split`` method.\n+    \"\"\"\n+    class _CVIterableWrapper:\n+        def __init__(self, cv):\n+            self.cv = cv\n+\n+        def split(self, X=None, y=None, groups=None):\n+            for train, test in self.cv:\n+                yield train, test\n+\n+        def get_n_splits(self, X=None, y=None, groups=None):\n+            return len(list(self.cv))\n+\n+    cv = 5 if cv is None else cv\n+    if isinstance(cv, numbers.Integral):\n+        if (\n+            classifier\n+            and (y is not None)\n+            and (type_of_target(y, input_name=\"y\") in (\"binary\", \"multiclass\"))\n+        ):\n+            return StratifiedKFold(cv)\n+        else:\n+            return KFold(cv)\n+\n+    if not hasattr(cv, \"split\") or isinstance(cv, str):\n+        if not isinstance(cv, Iterable) or isinstance(cv, str):\n+            raise ValueError(\n+                \"Expected cv as an integer, cross-validation \"\n+                \"object (from sklearn.model_selection) \"\n+                \"or an iterable. Got %s.\" % cv\n+            )\n+        return _CVIterableWrapper(cv)\n+\n+    return cv  # New style cv objects are passed without any modification\n+    \"\"\"Input checker utility for building a cross-validator.\n+\n     Parameters\n     ----------\n     cv : int, cross-validation generator or an iterable, default=None\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7889", "model_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 6801938..7644aa3 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -70,7 +70,18 @@ class _MockObject:\n \n def _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n                    attributes: Any = None) -> Any:\n-    attrs = {'__module__': module, '__display_name__': module + '.' + name}\n+    attrs = {'__module__': module}\n+    if isinstance(superclass, tuple):\n+        # Check if superclass is a tuple, which could be a generic class\n+        superclass_name = getattr(superclass[0], '__name__', 'Unknown')\n+    else:\n+        superclass_name = getattr(superclass, '__name__', 'Unknown')\n+    attrs['__display_name__'] = module + '.' + name\n+    if isinstance(superclass, (TypeVar, GenericMeta)):\n+        # If superclass is a TypeVar or GenericMeta, we avoid using it in display name\n+        attrs['__display_name__'] = module + '.' + name\n+    else:\n+        attrs['__display_name__'] = module + '.' + name + '.' + superclass_name\n     attrs.update(attributes or {})\n \n     return type(name, (superclass,), attrs)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-9288", "model_patch": "diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex 915d041..706a604 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -426,6 +426,7 @@ def _kmeans_single_elkan(X, sample_weight, n_clusters, max_iter=300,\n     # init\n     centers = _init_centroids(X, n_clusters, init, random_state=random_state,\n                               x_squared_norms=x_squared_norms)\n+    centers = centers.astype(X.dtype)  # Ensure centers have the same precision as X\n     centers = np.ascontiguousarray(centers)\n     if verbose:\n         print('Initialization complete')\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..4691245 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -356,9 +356,24 @@ class LiteralIncludeReader:\n \n     def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         if 'dedent' in self.options:\n-            return dedent_lines(lines, self.options.get('dedent'), location=location)\n-        else:\n-            return lines\n+            dedent_amount = self.options.get('dedent')\n+            # Dedent only the lines read from the file\n+            lines = dedent_lines(lines, dedent_amount, location=location)\n+        return lines\n+\n+    def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n+        append = self.options.get('append')\n+        if append:\n+            lines.append(append)\n+\n+        return lines\n+\n+    def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n+        prepend = self.options.get('prepend')\n+        if prepend:\n+            lines.insert(0, prepend)\n+\n+        return lines\n \n \n class LiteralInclude(SphinxDirective):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10466", "model_patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex c138802..9bcd625 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -32,9 +32,13 @@ class Message:\n     \"\"\"An entry of translatable message.\"\"\"\n     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):\n         self.text = text\n-        self.locations = locations\n+        self.locations = self.uniqueLocation(locations)\n         self.uuids = uuids\n \n+    def uniqueLocation(self, locations: List[Tuple[str, int]]):\n+        loc_set = set(locations)\n+        return list(loc_set)\n+\n \n class Catalog:\n     \"\"\"Catalog of translatable messages.\"\"\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25102", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..d57d4da 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -1,3 +1,4 @@\n+\n from functools import wraps\n \n from scipy.sparse import issparse\n@@ -131,6 +132,7 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         data_to_wrap=data_to_wrap,\n         index=getattr(original_input, \"index\", None),\n         columns=estimator.get_feature_names_out,\n+        dtypes=getattr(original_input, \"dtypes\", None) if configuration.get(\"preserve_dtypes\", False) else None,\n     )\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 671dde0..9310fcc 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -28,8 +28,21 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation, mode)\n-            if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation, mode)\n+            if sig.return_annotation is not sig.empty and sig.return_annotation is not None:\n+                if sig.return_annotation is None and self.config.autodoc_typehints_description_target != \"all\":\n+                    # Do not add return type if it is None and the target is not \"all\"\n+                    pass\n+                elif sig.return_annotation is not None and sig.return_annotation != 'NoneType' and self.config.autodoc_typehints_description_target == \"all\":\n+                    annotation['return'] = typing.stringify(sig.return_annotation, mode)\n+                elif sig.return_annotation is not None and sig.return_annotation != 'NoneType' and self.config.autodoc_typehints_description_target != \"all\":\n+                    annotation['return'] = typing.stringify(sig.return_annotation, mode)\n+                elif sig.return_annotation is not None and sig.return_annotation == 'NoneType' and self.config.autodoc_typehints_description_target != \"all\":\n+                    # Do not add return type for __init__ method if it is NoneType and the target is not \"all\"\n+                    pass\n+                elif sig.return_annotation is not None and sig.return_annotation == 'NoneType' and self.config.autodoc_typehints_description_target == \"all\":\n+                    # Check if the method is __init__ and avoid adding return type\n+                    if signature['fullname'] != '__init__':\n+                        annotation['return'] = typing.stringify(sig.return_annotation, mode)\n     except (TypeError, ValueError):\n         pass\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-11510", "model_patch": "diff --git a/sphinx/io.py b/sphinx/io.py\nindex 2cbe59f..a4a0264 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -112,6 +112,8 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         # emit \"source-read\" event\n         arg = [content]\n         env.events.emit('source-read', env.docname, arg)\n+        # Force Sphinx to re-read the document by adding it to all_docs\n+        env.all_docs.add(env.docname)\n         return arg[0]\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..64d5745 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -318,7 +318,15 @@ class CheckExternalLinksBuilder(Builder):\n                 continue\n             uri = refnode['refuri']\n             lineno = get_node_line(refnode)\n-            self.wqueue.put((uri, docname, lineno), False)\n+            if uri.startswith('#'):  # skip anchor-only links\n+                continue\n+            if not url_re.match(uri) and uri != 'self':  # if it's not an external link\n+                if uri in self.env.found_docs:  # check if the local link exists\n+                    self.wqueue.put((uri + '.html', docname, lineno), False)  # add .html for target file\n+                else:\n+                    self.broken.append((docname, lineno, 'missing', uri))\n+            else:\n+                self.wqueue.put((uri, docname, lineno), False)\n             n += 1\n \n         # image nodes\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7757", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3555587..654e5b0 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -178,7 +178,7 @@ def _parse_arglist(arglist: str) -> addnodes.desc_parameterlist:\n                 node += nodes.Text(' ')\n             else:\n                 node += addnodes.desc_sig_operator('', '=')\n-            node += nodes.inline('', param.default, classes=['default_value'],\n+            node += nodes.inline('', str(param.default), classes=['default_value'],\n                                  support_smartquotes=False)\n \n         params += node\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex cf5467b..8bf44e9 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -31,9 +31,15 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    if param.annotation is type(None):\n+                        annotation[param.name] = 'None'\n+                    else:\n+                        annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                if sig.return_annotation is type(None):\n+                    annotation['return'] = 'None'\n+                else:\n+                    annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..e1720ad 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4658,12 +4658,23 @@ class DefinitionParser(BaseParser):\n             return ASTBooleanLiteral(True)\n         if self.skip_word('false'):\n             return ASTBooleanLiteral(False)\n+        # user-defined-literal\n+        udl_regex = re.compile(r\"[0-9]+(\\.[0-9]+)?[a-zA-Z_][a-zA-Z0-9_]*\")\n         for regex in [float_literal_re, binary_literal_re, hex_literal_re,\n-                      integer_literal_re, octal_literal_re]:\n+                      integer_literal_re, octal_literal_re, udl_regex]:\n             pos = self.pos\n             if self.match(regex):\n-                while self.current_char in 'uUlLfF':\n-                    self.pos += 1\n+                if self.current_char in 'uUlLfFeE':\n+                    while self.current_char in 'uUlLfFeE':\n+                        self.pos += 1\n+                    return ASTNumberLiteral(self.definition[pos:self.pos])\n+                else:\n+                    # Check if the following character is a valid UDL suffix\n+                    if self.current_char.isalpha():\n+                        suffix_start = self.pos\n+                        while self.current_char.isalpha():\n+                            self.pos += 1\n+                        return ASTLiteral(self.definition[pos:suffix_start] + self.definition[pos:self.pos])\n                 return ASTNumberLiteral(self.definition[pos:self.pos])\n \n         string = self._parse_string()\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-26323", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex eec24f1..352cd79 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -303,6 +303,10 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        # Ensure the remainder transformer is also set to the correct output format\n+        if self._remainder[1] not in [\"passthrough\", \"drop\"] and hasattr(self._remainder[1], \"set_output\"):\n+            _safe_set_output(self._remainder[1], transform=transform)\n+\n         return self\n \n     def get_params(self, deep=True):\n@@ -375,7 +379,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 for (name, trans, _), column in zip(self.transformers, self._columns)\n             ]\n             # add transformer tuple for remainder\n-            if self._remainder[2]:\n+            # Ensure the _remainder is processed when fitted=True\n+            if self._remainder[2] and (fitted or self._remainder[0] != \"remainder\"):\n                 transformers = chain(transformers, [self._remainder])\n         get_weight = (self.transformer_weights or {}).get\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10673", "model_patch": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 52ac0d3..b78c7e2 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -147,22 +147,32 @@ class TocTree:\n                                            location=ref, type='toc', subtype='circular')\n                             continue\n                         refdoc = ref\n-                        toc = self.env.tocs[ref].deepcopy()\n-                        maxdepth = self.env.metadata[ref].get('tocdepth', 0)\n-                        if ref not in toctree_ancestors or (prune and maxdepth > 0):\n-                            self._toctree_prune(toc, 2, maxdepth, collapse)\n-                        process_only_nodes(toc, builder.tags)\n-                        if title and toc.children and len(toc.children) == 1:\n-                            child = toc.children[0]\n-                            for refnode in child.findall(nodes.reference):\n-                                if refnode['refuri'] == ref and \\\n-                                   not refnode['anchorname']:\n-                                    refnode.children = [nodes.Text(title)]\n-                    if not toc.children:\n-                        # empty toc means: no titles will show up in the toctree\n-                        logger.warning(__('toctree contains reference to document %r that '\n-                                          'doesn\\'t have a title: no link will be generated'),\n-                                       ref, location=toctreenode)\n+                        if ref in ('genindex', 'modindex', 'search'):\n+                            # Create references to the special generated files\n+                            reference = nodes.reference('', '', internal=False,\n+                                                        refuri=ref+'.html',\n+                                                        anchorname='',\n+                                                        *[nodes.Text(ref.capitalize())])\n+                            para = addnodes.compact_paragraph('', '', reference)\n+                            item = nodes.list_item('', para)\n+                            toc = nodes.bullet_list('', item)\n+                        else:\n+                            toc = self.env.tocs[ref].deepcopy()\n+                            maxdepth = self.env.metadata[ref].get('tocdepth', 0)\n+                            if ref not in toctree_ancestors or (prune and maxdepth > 0):\n+                                self._toctree_prune(toc, 2, maxdepth, collapse)\n+                            process_only_nodes(toc, builder.tags)\n+                            if title and toc.children and len(toc.children) == 1:\n+                                child = toc.children[0]\n+                                for refnode in child.findall(nodes.reference):\n+                                    if refnode['refuri'] == ref and \\\n+                                       not refnode['anchorname']:\n+                                        refnode.children = [nodes.Text(title)]\n+                        if not toc.children:\n+                            # empty toc means: no titles will show up in the toctree\n+                            logger.warning(__('toctree contains reference to document %r that '\n+                                              'doesn\\'t have a title: no link will be generated'),\n+                                           ref, location=toctreenode)\n                 except KeyError:\n                     # this is raised if the included file does not exist\n                     if excluded(self.env.doc2path(ref, False)):\n@@ -170,9 +180,9 @@ class TocTree:\n                     elif not included(self.env.doc2path(ref, False)):\n                         message = __('toctree contains reference to non-included document %r')\n                     else:\n-                        message = __('toctree contains reference to nonexisting document %r')\n-\n-                    logger.warning(message, ref, location=toctreenode)\n+                        if ref not in ('genindex', 'modindex', 'search'):\n+                            message = __('toctree contains reference to nonexisting document %r')\n+                            logger.warning(message, ref, location=toctreenode)\n                 else:\n                     # if titles_only is given, only keep the main title and\n                     # sub-toctrees\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex f48faa1..f5f642f 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -762,9 +762,13 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n     * inherited docstring\n     * inherited decorated methods\n     \"\"\"\n+    original_obj = obj\n+    if hasattr(obj, '__wrapped__'):\n+        obj = obj.__wrapped__\n+\n     doc = attrgetter(obj, '__doc__', None)\n-    if ispartial(obj) and doc == obj.__class__.__doc__:\n-        return getdoc(obj.func)\n+    if ispartial(original_obj) and doc == original_obj.__class__.__doc__:\n+        return getdoc(original_obj.func)\n     elif doc is None and allow_inherited:\n         doc = inspect.getdoc(obj)\n \n@@ -778,4 +782,4 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n                     if doc:\n                         break\n \n-    return doc\n+    return doc\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..8ee8b36 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1092,6 +1092,12 @@ class NumpyDocstring(GoogleDocstring):\n         line = next(self._line_iter)\n         if parse_type:\n             _name, _, _type = self._partition_field_on_colon(line)\n+            # Split type and optional if present\n+            if ', optional' in _type:\n+                _type = _type.replace(', optional', '')\n+                _optional = 'optional'\n+            else:\n+                _optional = ''\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n@@ -1101,6 +1107,14 @@ class NumpyDocstring(GoogleDocstring):\n             location=self._get_location(),\n             translations=self._config.napoleon_type_aliases or {},\n         )\n+        _desc = self._dedent(self._consume_indented_block(indent + 1))\n+        _desc = self.__class__(_desc, self._config).lines()\n+        \n+        # Reattach optional if it was found\n+        if _optional:\n+            _type = f'{_type}, {_optional}'\n+        \n+        return _name, _type, _desc\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 6a4748c..1331874 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -311,9 +311,10 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         # append instance attributes (cf. self.attr1) if analyzer knows\n         namespace = '.'.join(objpath)\n         for (ns, name), docstring in analyzer.attr_docs.items():\n-            if namespace == ns and name not in members:\n-                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n-                                               '\\n'.join(docstring))\n+            if namespace == ns or ns.startswith(namespace + '.'):\n+                if name not in members:\n+                    members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                   '\\n'.join(docstring))\n \n     return members\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8459", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..93e2819 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -111,8 +111,18 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            # Use the type alias if available\n+            type_hint = app.config.autodoc_type_aliases.get(annotation, annotation)\n+            field += nodes.field_body('', nodes.paragraph('', type_hint))\n             node += field\n+        else:\n+            # If the type is already specified, replace it with the alias if available\n+            for field in fields:\n+                field_name = field[0].astext()\n+                if field_name == 'type ' + name:\n+                    type_hint = app.config.autodoc_type_aliases.get(annotation, annotation)\n+                    field.body = nodes.field_body('', nodes.paragraph('', type_hint))\n+                    break\n         if not arg.get('param'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25232", "model_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 62cdd57..71b9f48 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -281,6 +281,7 @@ class IterativeImputer(_BaseImputer):\n         \"initial_strategy\": [\n             StrOptions({\"mean\", \"median\", \"most_frequent\", \"constant\"})\n         ],\n+        \"fill_value\": [None, Real, Integral, str, object],\n         \"imputation_order\": [\n             StrOptions({\"ascending\", \"descending\", \"roman\", \"arabic\", \"random\"})\n         ],\n@@ -301,6 +302,7 @@ class IterativeImputer(_BaseImputer):\n         tol=1e-3,\n         n_nearest_features=None,\n         initial_strategy=\"mean\",\n+        fill_value=None,\n         imputation_order=\"ascending\",\n         skip_complete=False,\n         min_value=-np.inf,\n@@ -613,6 +615,7 @@ class IterativeImputer(_BaseImputer):\n             self.initial_imputer_ = SimpleImputer(\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n+                fill_value=self.fill_value,\n                 keep_empty_features=self.keep_empty_features,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\n@@ -886,4 +889,4 @@ class IterativeImputer(_BaseImputer):\n         \"\"\"\n         input_features = _check_feature_names_in(self, input_features)\n         names = self.initial_imputer_.get_feature_names_out(input_features)\n-        return self._concatenate_indicator_feature_names_out(names, input_features)\n+        return self._concatenate_indicator_feature_names_out(names, input_features)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8265", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex facb103..729f272 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1089,11 +1089,11 @@ class NumpyDocstring(GoogleDocstring):\n \n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n-\n-        if \", \" in name:\n-            return \", \".join(func(param) for param in name.split(\", \"))\n-        else:\n-            return func(name)\n+        # Use regex to split by comma not within parentheses\n+        import re\n+        param_pattern = re.compile(r'\\s*(?![^()]*\\))([^,]+)')\n+        params = param_pattern.split(name)\n+        return \", \".join(func(param.strip()) for param in params if param.strip())\n \n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b8c505d..5b81da4 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -117,7 +117,9 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n             result.extend(unparse(node.right))\n             return result\n         elif isinstance(node, ast.BitOr):\n-            return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]\n+            left_nodes = unparse(node.left)\n+            right_nodes = unparse(node.right)\n+            return left_nodes + [addnodes.desc_sig_punctuation('', ' | ')] + right_nodes\n         elif isinstance(node, ast.Constant):  # type: ignore\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', \"...\")]\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8593", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c412096..7e84bcd 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2296,7 +2296,12 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type:\n               not isinstance(member, type)):\n             return True\n         else:\n-            return False\n+            # Check if the member is explicitly marked as public in the docstring\n+            docstring = inspect.getdoc(member) or ''\n+            if ':meta public:' in docstring:\n+                return True\n+            # Continue with the original logic for determining public members\n+            return not membername.startswith('_') or membername in parent.modindex_entries\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8475", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 49ae1f0..af28437 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -172,6 +172,12 @@ class CheckExternalLinksBuilder(Builder):\n                                                  config=self.app.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\n+                    except requests.exceptions.TooManyRedirects:\n+                        # retry with GET request if that fails, some servers\n+                        # don't like HEAD requests or have too many redirects.\n+                        response = requests.get(req_url, stream=True, config=self.app.config,\n+                                                auth=auth_info, **kwargs)\n+                        response.raise_for_status()\n                     except HTTPError:\n                         # retry with GET request if that fails, some servers\n                         # don't like HEAD requests.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8120", "model_patch": "diff --git a/sphinx/util/i18n.py b/sphinx/util/i18n.py\nindex e138044..ef63d06 100644\n--- a/sphinx/util/i18n.py\n+++ b/sphinx/util/i18n.py\n@@ -142,12 +142,18 @@ def find_catalog_files(docname: str, srcdir: str, locale_dirs: List[str],\n                        lang: str, compaction: bool) -> List[str]:\n     warnings.warn('find_catalog_files() is deprecated.',\n                   RemovedInSphinx40Warning, stacklevel=2)\n+    import logging\n+    logger = logging.getLogger(__name__)\n+\n     if not(lang and locale_dirs):\n+        logger.debug(\"No language or locale_dirs specified.\")\n         return []\n \n     domain = find_catalog(docname, compaction)\n+    logger.debug(f\"Searching for domain '{domain}' in locale_dirs: {locale_dirs} with language: {lang}\")\n     files = [gettext.find(domain, path.join(srcdir, dir_), [lang])\n              for dir_ in locale_dirs]\n+    logger.debug(f\"Found files: {files}\")\n     files = [relpath(f, srcdir) for f in files if f]\n     return files\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9711", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9367", "model_patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex 5db5a4a..89c3c4a 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -214,7 +214,8 @@ class _UnparseVisitor(ast.NodeVisitor):\n \n     def visit_Tuple(self, node: ast.Tuple) -> str:\n         if node.elts:\n-            return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n+            elements = \", \".join(self.visit(e) for e in node.elts)\n+            return \"(\" + elements + (\",\" if len(node.elts) == 1 else \"\") + \")\"\n         else:\n             return \"()\"\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9281", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex da040b3..76c49d4 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -121,6 +121,8 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n         elif isinstance(node, ast.Constant):  # type: ignore\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', \"...\")]\n+            elif isinstance(node.value, Enum):\n+                return [nodes.Text(node.value.name)]\n             else:\n                 return [nodes.Text(node.value)]\n         elif isinstance(node, ast.Expr):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..6f1dcac 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -494,8 +494,14 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            raw_content = node.astext()\n+            # Escape the special characters if they are not part of a compound key\n+            if raw_content in ('-', '+', '^'):\n+                escaped_content = raw_content\n+            else:\n+                escaped_content = raw_content.replace('-', '&#45;').replace('+', '&#43;').replace('^', '&#94;')\n             self.body.append(self.starttag(node, 'kbd', '',\n-                                           CLASS='docutils literal notranslate'))\n+                                           CLASS='docutils literal notranslate') + escaped_content)\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..7f4f1f7 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -445,8 +445,14 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            raw_content = node.astext()\n+            # Escape the special characters if they are not part of a compound key\n+            if raw_content in ('-', '+', '^'):\n+                escaped_content = raw_content\n+            else:\n+                escaped_content = raw_content.replace('-', '&#45;').replace('+', '&#43;').replace('^', '&#94;')\n             self.body.append(self.starttag(node, 'kbd', '',\n-                                           CLASS='docutils literal notranslate'))\n+                                           CLASS='docutils literal notranslate') + escaped_content)\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9698", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex bcb7471..aaa0b4e 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -796,7 +796,7 @@ class PyMethod(PyObject):\n         if 'classmethod' in self.options:\n             return _('%s() (%s class method)') % (methname, clsname)\n         elif 'property' in self.options:\n-            return _('%s() (%s property)') % (methname, clsname)\n+            return _('%s (%s property)') % (methname, clsname)\n         elif 'staticmethod' in self.options:\n             return _('%s() (%s static method)') % (methname, clsname)\n         else:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8269", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 8266583..82f89d4 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -162,27 +162,38 @@ class CheckExternalLinksBuilder(Builder):\n             kwargs['headers'] = get_request_headers()\n \n             try:\n-                if anchor and self.app.config.linkcheck_anchors:\n-                    # Read the whole document and see if #anchor exists\n+                try:\n+                    # try a HEAD request first, which should be easier on\n+                    # the server and the network\n+                    response = requests.head(req_url, config=self.app.config,\n+                                             auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n+                except HTTPError:\n+                    # retry with GET request if that fails, some servers\n+                    # don't like HEAD requests.\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n+\n+                if anchor and self.app.config.linkcheck_anchors:\n+                    # Read the whole document and see if #anchor exists\n                     found = check_anchor(response, unquote(anchor))\n \n                     if not found:\n                         raise Exception(__(\"Anchor '%s' not found\") % anchor)\n+\n+                if response.url.rstrip('/') == req_url.rstrip('/'):\n+                    return 'working', '', 0\n                 else:\n-                    try:\n-                        # try a HEAD request first, which should be easier on\n-                        # the server and the network\n-                        response = requests.head(req_url, config=self.app.config,\n-                                                 auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n-                    except HTTPError:\n-                        # retry with GET request if that fails, some servers\n-                        # don't like HEAD requests.\n-                        response = requests.get(req_url, stream=True, config=self.app.config,\n-                                                auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n+                    new_url = response.url\n+                    if anchor:\n+                        new_url += '#' + anchor\n+                    # history contains any redirects, get last\n+                    if response.history:\n+                        code = response.history[-1].status_code\n+                        return 'redirected', new_url, code\n+                    else:\n+                        return 'redirected', new_url, 0\n             except HTTPError as err:\n                 if err.response.status_code == 401:\n                     # We'll take \"Unauthorized\" as working.\n@@ -191,24 +202,12 @@ class CheckExternalLinksBuilder(Builder):\n                     # We'll take \"Service Unavailable\" as ignored.\n                     return 'ignored', str(err), 0\n                 else:\n-                    return 'broken', str(err), 0\n+                    return 'broken', str(err), err.response.status_code\n             except Exception as err:\n                 if is_ssl_error(err):\n                     return 'ignored', str(err), 0\n                 else:\n                     return 'broken', str(err), 0\n-            if response.url.rstrip('/') == req_url.rstrip('/'):\n-                return 'working', '', 0\n-            else:\n-                new_url = response.url\n-                if anchor:\n-                    new_url += '#' + anchor\n-                # history contains any redirects, get last\n-                if response.history:\n-                    code = response.history[-1].status_code\n-                    return 'redirected', new_url, code\n-                else:\n-                    return 'redirected', new_url, 0\n \n         def check() -> Tuple[str, str, int]:\n             # check for various conditions without bothering the network\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..a429ea8 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1259,6 +1259,11 @@ class PythonDomain(Domain):\n                     fullname = modname + '.' + classname + '.' + name\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n+                if not newname and modname:\n+                    # First check if the name exists in the context of the current module\n+                    modname_target = modname + '.' + name\n+                    if modname_target in self.objects and self.objects[modname_target].objtype in objtypes:\n+                        newname = modname_target\n                 if not newname:\n                     if modname and modname + '.' + name in self.objects and \\\n                        self.objects[modname + '.' + name].objtype in objtypes:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11618", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c58cbf..75bd675 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -266,8 +266,12 @@ class Point(GeometryEntity):\n         sqrt(x**2 + y**2)\n \n         \"\"\"\n-        return sqrt(sum([(a - b)**2 for a, b in zip(\n-            self.args, p.args if isinstance(p, Point) else p)]))\n+        p_args = p.args if isinstance(p, Point) else p\n+        # Ensure both points have the same dimension by padding the shorter one with zeros\n+        max_dim = max(len(self.args), len(p_args))\n+        self_args_padded = self.args + (max_dim - len(self.args)) * (S.Zero,)\n+        p_args_padded = p_args + (max_dim - len(p_args)) * (S.Zero,)\n+        return sqrt(sum([(a - b)**2 for a, b in zip(self_args_padded, p_args_padded)]))\n \n     def taxicab_distance(self, p):\n         \"\"\"The Taxicab Distance from self to point p.\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8035", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d3cef15..9e8c07f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -859,7 +859,7 @@ class ModuleDocumenter(Documenter):\n         'show-inheritance': bool_option, 'synopsis': identity,\n         'platform': identity, 'deprecated': bool_option,\n         'member-order': member_order_option, 'exclude-members': members_set_option,\n-        'private-members': bool_option, 'special-members': members_option,\n+        'private-members': members_set_option, 'special-members': members_option,\n         'imported-members': bool_option, 'ignore-module-all': bool_option\n     }  # type: Dict[str, Callable]\n \n@@ -1279,7 +1279,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         'noindex': bool_option, 'inherited-members': inherited_members_option,\n         'show-inheritance': bool_option, 'member-order': member_order_option,\n         'exclude-members': members_set_option,\n-        'private-members': bool_option, 'special-members': members_option,\n+        'private-members': members_set_option, 'special-members': members_option,\n     }  # type: Dict[str, Callable]\n \n     _signature_class = None  # type: Any\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9320", "model_patch": "diff --git a/sphinx/cmd/quickstart.py b/sphinx/cmd/quickstart.py\nindex 9978773..2ba76c6 100644\n--- a/sphinx/cmd/quickstart.py\n+++ b/sphinx/cmd/quickstart.py\n@@ -148,6 +148,8 @@ def do_prompt(text: str, default: str = None, validator: Callable[[str], Any] =\n         x = term_input(prompt).strip()\n         if default and not x:\n             x = default\n+        if x == default and validator == nonempty and x == '':  # Allow exit on empty input for root path\n+            return False\n         try:\n             x = validator(x)\n         except ValidationError as err:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9602", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex fbfe7b9..a685c2e 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -123,7 +123,8 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', \"...\")]\n             else:\n-                return [nodes.Text(node.value)]\n+                # Convert directly to text without creating a cross-reference\n+                return [nodes.Text(repr(node.value))]\n         elif isinstance(node, ast.Expr):\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9658", "model_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 281da6f..9a42314 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -52,7 +52,8 @@ class _MockObject:\n         return iter([])\n \n     def __mro_entries__(self, bases: Tuple) -> Tuple:\n-        return (self.__class__,)\n+        # Include a mock object representing the base class that was mocked\n+        return (types.SimpleNamespace(__name__=self.__display_name__),)\n \n     def __getitem__(self, key: Any) -> \"_MockObject\":\n         return _make_subclass(str(key), self.__display_name__, self.__class__)()\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 953c85e..66ef221 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3666,7 +3666,13 @@ class ASTDeclaration(ASTBase):\n         elif self.objectType == 'member':\n             pass\n         elif self.objectType == 'function':\n-            pass\n+            for overload in self.declaration.get_overloads():\n+                overloadDeclNode = addnodes.desc_signature_line()\n+                overloadDeclNode.sphinx_line_type = 'declarator'\n+                if self.visibility and self.visibility != \"public\":\n+                    overloadDeclNode += addnodes.desc_annotation(self.visibility + \" \", self.visibility + \" \")\n+                overload.describe_signature(overloadDeclNode, mode, env, self.symbol)\n+                signode += overloadDeclNode\n         elif self.objectType == 'class':\n             assert self.directiveType in ('class', 'struct')\n             prefix = self.directiveType + ' '\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12096", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 654774e..ed56d87 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -507,7 +507,9 @@ class Function(Application, Expr):\n             func = getattr(mpmath, fname)\n         except (AttributeError, KeyError):\n             try:\n-                return Float(self._imp_(*self.args), prec)\n+                # Recursively evaluate arguments\n+                eval_args = [arg.evalf(prec) for arg in self.args]\n+                return Float(self._imp_(*eval_args), prec)\n             except (AttributeError, TypeError, ValueError):\n                 return\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9591", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..cd28a2a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -157,20 +157,32 @@ def augment_descriptions_with_types(\n     # Add 'type' for parameters with a description but no declared type.\n     for name in annotations:\n         if name == 'return':\n-            continue\n+            if 'return' in arguments:\n+                continue\n+            if 'return' in has_description and 'return' not in has_type:\n+                field = nodes.field()\n+                field += nodes.field_name('', 'rtype')\n+                # Use cross-reference for the return type\n+                field += nodes.field_body('', xref_role(type_='class', target=annotations['return'])(''))\n+                node += field\n+                has_type.add('return')\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            # Use cross-reference for the type\n+            field += nodes.field_body('', xref_role(type_='class', target=annotations[name])(''))\n             node += field\n+            has_type.add(name)\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            # Use cross-reference for the return type\n+            field += nodes.field_body('', xref_role(type_='class', target=annotations['return'])(''))\n             node += field\n+            has_type.add('return')\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15017", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9230", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex ea465e6..f9b83d1 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -935,18 +935,68 @@ def _tokenize_type_spec(spec: str) -> List[str]:\n             # can't be separated by anything other than a single space\n             # for now\n             other = item[8:]\n-\n             return [default, \" \", other]\n         else:\n             return [item]\n \n-    tokens = list(\n-        item\n-        for raw_token in _token_regex.split(spec)\n-        for item in postprocess(raw_token)\n-        if item\n-    )\n-    return tokens\n+    def is_brace_balanced(s):\n+        balance = 0\n+        for char in s:\n+            if char == '(':\n+                balance += 1\n+            elif char == ')':\n+                balance -= 1\n+        return balance == 0\n+\n+    token_queue = deque()\n+    in_type_spec = False\n+    current_token = ''\n+\n+    for char in spec:\n+        if char == '(':\n+            if not in_type_spec or not current_token:\n+                in_type_spec = True\n+                current_token += char\n+            else:\n+                if is_brace_balanced(current_token):\n+                    token_queue.append(current_token)\n+                    current_token = char\n+                else:\n+                    current_token += char\n+        elif char == ')':\n+            if in_type_spec:\n+                current_token += char\n+                if is_brace_balanced(current_token):\n+                    token_queue.append(current_token)\n+                    current_token = ''\n+                    in_type_spec = False\n+            else:\n+                current_token += char\n+        else:\n+            if in_type_spec:\n+                current_token += char\n+            else:\n+                if current_token:\n+                    token_queue.append(current_token)\n+                current_token = char\n+\n+    if current_token:\n+        token_queue.append(current_token)\n+\n+    def combine_set(tokens):\n+        while True:\n+            try:\n+                token = tokens.popleft()\n+            except IndexError:\n+                break\n+\n+            if token == \"{\":\n+                tokens.appendleft(\"{\")\n+                yield \"\".join(takewhile_set(tokens))\n+            else:\n+                yield token\n+\n+    return list(combine_set(token_queue))\n \n \n def _token_type(token: str, location: str = None) -> str:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13372", "model_patch": "diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex d47040b..dae5c44 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -584,8 +584,13 @@ def evalf_mul(v, prec, options):\n         elif im:\n             (s, m, e, b), w_acc = im, im_acc\n             direction += 1\n+        elif re:\n+            (s, m, e, b), w_acc = re, re_acc\n+        elif im:\n+            (s, m, e, b), w_acc = im, im_acc\n+            direction += 1\n         else:\n-            return None, None, None, None\n+            raise NotImplementedError(\"evalf_mul does not handle this argument type\")\n         direction += 2*s\n         man *= m\n         exp += e\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..5065c51 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -275,18 +275,8 @@ class Product(ExprWithIntLimits):\n             return poly.LC()**(n - a + 1) * A * B\n \n         elif term.is_Add:\n-            p, q = term.as_numer_denom()\n-            q = self._eval_product(q, (k, a, n))\n-            if q.is_Number:\n-\n-                # There is expression, which couldn't change by\n-                # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).\n-                # We have to catch this case.\n-\n-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n-            else:\n-                p = self._eval_product(p, (k, a, n))\n-            return p / q\n+            # Directly evaluate the product term by term for Add expressions\n+            return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n \n         elif term.is_Mul:\n             exclude, include = [], []\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15809", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12489", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 007fa70..ea9e1ce 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -924,8 +924,8 @@ class Permutation(Basic):\n         obj._size = size\n         return obj\n \n-    @staticmethod\n-    def _af_new(perm):\n+    @classmethod\n+    def _af_new(cls, perm):\n         \"\"\"A method to produce a Permutation object from a list;\n         the list is bound to the _array_form attribute, so it must\n         not be modified; this method is meant for internal use only;\n@@ -944,7 +944,7 @@ class Permutation(Basic):\n         Permutation([2, 1, 3, 0])\n \n         \"\"\"\n-        p = Basic.__new__(Perm, perm)\n+        p = Basic.__new__(cls, perm)\n         p._array_form = perm\n         p._size = len(perm)\n         return p\n@@ -1629,7 +1629,7 @@ class Permutation(Basic):\n                 perm[j], perm[i] = perm[i], perm[j]\n                 i += 1\n                 j -= 1\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n \n     @classmethod\n     def unrank_nonlex(self, n, r):\n@@ -1661,7 +1661,7 @@ class Permutation(Basic):\n         n = int(n)\n         r = r % ifac(n)\n         _unrank1(n, r, id_perm)\n-        return _af_new(id_perm)\n+        return cls._af_new(id_perm)\n \n     def rank_nonlex(self, inv_perm=None):\n         \"\"\"\n@@ -2423,7 +2423,7 @@ class Permutation(Basic):\n                     perm[i] = perm[i - 1]\n                 perm[k] = j - 1\n             r2 = r1\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n \n     def next_trotterjohnson(self):\n         \"\"\"\n@@ -2734,7 +2734,7 @@ class Permutation(Basic):\n         except IndexError:\n             raise ValueError(\"The inversion vector is not valid.\")\n         perm.extend(N)\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n \n     @classmethod\n     def random(self, n):\n@@ -2753,7 +2753,7 @@ class Permutation(Basic):\n         \"\"\"\n         perm_array = list(range(n))\n         random.shuffle(perm_array)\n-        return _af_new(perm_array)\n+        return cls._af_new(perm_array)\n \n     @classmethod\n     def unrank_lex(self, size, rank):\n@@ -2787,7 +2787,7 @@ class Permutation(Basic):\n                 if perm_array[j] > d - 1:\n                     perm_array[j] += 1\n             psize = new_psize\n-        return _af_new(perm_array)\n+        return cls._af_new(perm_array)\n \n     # global flag to control how permutations are printed\n     # when True, Permutation([0, 2, 1, 3]) -> Cycle(1, 2)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13798", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex e32266f..3f9b5a6 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -156,11 +156,16 @@ class LatexPrinter(Printer):\n             \"times\": r\" \\times \"\n         }\n \n-        self._settings['mul_symbol_latex'] = \\\n-            mul_symbol_table[self._settings['mul_symbol']]\n+        user_mul_symbol = self._settings['mul_symbol']\n+        if user_mul_symbol in mul_symbol_table:\n+            self._settings['mul_symbol_latex'] = mul_symbol_table[user_mul_symbol]\n+        else:\n+            self._settings['mul_symbol_latex'] = str(user_mul_symbol)\n \n         self._settings['mul_symbol_latex_numbers'] = \\\n-            mul_symbol_table[self._settings['mul_symbol'] or 'dot']\n+            mul_symbol_table.get(self._settings['mul_symbol'], r\" \\cdot \")\n+        if user_mul_symbol is not None:\n+            self._settings['mul_symbol_latex_numbers'] = str(user_mul_symbol)\n \n         self._delim_dict = {'(': ')', '[': ']'}\n \n@@ -2155,7 +2160,8 @@ def latex(expr, **settings):\n     \\frac{1}{2 \\pi} \\int r\\, dr\n \n     mul_symbol: The symbol to use for multiplication. Can be one of None,\n-    \"ldot\", \"dot\", or \"times\".\n+    \"ldot\", \"dot\", or \"times\". Alternatively, any string can be provided\n+    to use as a custom multiplication symbol.\n \n     >>> print(latex((2*tau)**sin(Rational(7,2)), mul_symbol=\"times\"))\n     \\left(2 \\times \\tau\\right)^{\\sin{\\left (\\frac{7}{2} \\right )}}\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/core/exprtools.py b/sympy/core/exprtools.py\nindex 8f86407..74c9b1d 100644\n--- a/sympy/core/exprtools.py\n+++ b/sympy/core/exprtools.py\n@@ -1176,7 +1176,7 @@ def factor_terms(expr, radical=False, clear=False, fraction=False, sign=True):\n         if p.is_Add:\n             list_args = [do(a) for a in Add.make_args(p)]\n             # get a common negative (if there) which gcd_terms does not remove\n-            if all(a.as_coeff_Mul()[0] < 0 for a in list_args):\n+            if all(a.as_coeff_Mul()[0].is_real and a.as_coeff_Mul()[0] < 0 for a in list_args):\n                 cont = -cont\n                 list_args = [-a for a in list_args]\n             # watch out for exp(-(x+2)) which gcd_terms will change to exp(-x-2)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14711", "model_patch": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex 77e79b6..52e3de7 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -57,6 +57,8 @@ class Vector(object):\n \n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..31ca0bc 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1176,6 +1176,13 @@ class PythonDomain(Domain):\n                 newname = modname + '.' + classname + '.' + name\n         if newname is not None:\n             matches.append((newname, self.objects[newname]))\n+        # Ensure that instance variables are prioritized within the class context\n+        if type == 'attr' and clsname and not matches:\n+            # Try to find the instance variable within the class context again\n+            class_fullname = '.'.join(filter(None, [modname, clsname]))\n+            for oname in self.objects:\n+                if oname.startswith(class_fullname + '.') and oname.endswith('.' + name) and self.objects[oname].objtype == 'attr':\n+                    matches.append((oname, self.objects[oname]))\n         return matches\n \n     def resolve_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder,\n@@ -1187,9 +1194,11 @@ class PythonDomain(Domain):\n         matches = self.find_obj(env, modname, clsname, target,\n                                 type, searchmode)\n \n-        if not matches and type == 'attr':\n-            # fallback to meth (for property)\n-            matches = self.find_obj(env, modname, clsname, target, 'meth', searchmode)\n+        # Remove the automatic fallback to 'meth' for instance variables (attrs)\n+        # As a workaround, users can explicitly link if needed\n+        # if not matches and type == 'attr':\n+        #     # fallback to meth (for property)\n+        #     matches = self.find_obj(env, modname, clsname, target, 'meth', searchmode)\n \n         if not matches:\n             return None\n@@ -1296,4 +1305,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'env_version': 3,\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16886", "model_patch": "diff --git a/sympy/crypto/crypto.py b/sympy/crypto/crypto.py\nindex 156e471..ec6f49b 100644\n--- a/sympy/crypto/crypto.py\n+++ b/sympy/crypto/crypto.py\n@@ -1520,7 +1520,7 @@ morse_char = {\n     \"..-\": \"U\", \"...-\": \"V\",\n     \".--\": \"W\", \"-..-\": \"X\",\n     \"-.--\": \"Y\", \"--..\": \"Z\",\n-    \"-----\": \"0\", \"----\": \"1\",\n+    \"-----\": \"0\", \".----\": \"1\",\n     \"..---\": \"2\", \"...--\": \"3\",\n     \"....-\": \"4\", \".....\": \"5\",\n     \"-....\": \"6\", \"--...\": \"7\",\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14976", "model_patch": "diff --git a/sympy/printing/lambdarepr.py b/sympy/printing/lambdarepr.py\nindex 9830637..6556f69 100644\n--- a/sympy/printing/lambdarepr.py\n+++ b/sympy/printing/lambdarepr.py\n@@ -57,6 +57,9 @@ class LambdaPrinter(PythonCodePrinter):\n     def _print_NumberSymbol(self, expr):\n         return str(expr)\n \n+    def _print_Rational(self, expr):\n+        return 'mpmath.mpq({}, {})'.format(expr.p, expr.q)\n+\n \n class TensorflowPrinter(LambdaPrinter):\n     \"\"\"\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16766", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 5576888..8a05740 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -357,6 +357,10 @@ class PythonCodePrinter(AbstractPythonCodePrinter):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n+    def _print_Indexed(self, expr):\n+        base, *index = expr.args\n+        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9673", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex ea465e6..93d8e07 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     sphinx.ext.napoleon.docstring\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -778,18 +779,21 @@ class GoogleDocstring:\n         for _name, _type, _desc in fields:\n             if use_rtype:\n                 field = self._format_field(_name, '', _desc)\n-            else:\n-                field = self._format_field(_name, _type, _desc)\n-\n-            if multi:\n-                if lines:\n-                    lines.extend(self._format_block('          * ', field))\n-                else:\n-                    lines.extend(self._format_block(':returns: * ', field))\n-            else:\n                 lines.extend(self._format_block(':returns: ', field))\n                 if _type and use_rtype:\n                     lines.extend([':rtype: %s' % _type, ''])\n+            else:\n+                # Include type in the description if use_rtype is False\n+                if _type:\n+                    _desc = f\"{_desc} ({_type})\"\n+                field = self._format_field(_name, '', _desc)\n+                lines.extend(self._format_block(':returns: ', field))\n+                # Check if rtype is documented separately and add if not\n+                if _type and 'rtype' not in lines:\n+                    lines.extend([':rtype: %s' % _type, ''])\n+\n+        if lines and lines[-1]:\n+            lines.append('')\n         if lines and lines[-1]:\n             lines.append('')\n         return lines\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13757", "model_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c4501f6..2d6bbfe 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -4053,9 +4053,11 @@ class Poly(Expr):\n             try:\n                 g = f.__class__(g, *f.gens)\n             except PolynomialError:\n-                return g*f.as_expr()\n+                # First try to convert the expression to a polynomial\n+                # If it fails, multiply the polynomial expression (as_expr()) with g\n+                return f.as_expr()*g\n \n-        return g.mul(f)\n+        return f.mul(g)\n \n     @_sympifyit('n', NotImplemented)\n     def __pow__(f, n):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13091", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex a947e2a..9e59612 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -313,10 +313,10 @@ class Basic(with_metaclass(ManagedProperties)):\n             try:\n                 other = _sympify(other)\n             except SympifyError:\n-                return False    # sympy != other\n+                return NotImplemented    # sympy != other\n \n             if type(self) != type(other):\n-                return False\n+                return NotImplemented\n \n         return self._hashable_content() == other._hashable_content()\n \ndiff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 49f8815..028443e 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -248,7 +248,7 @@ class Expr(Basic, EvalfMixin):\n         try:\n             other = _sympify(other)\n         except SympifyError:\n-            raise TypeError(\"Invalid comparison %s >= %s\" % (self, other))\n+            return NotImplemented    # sympy >= other\n         for me in (self, other):\n             if (me.is_complex and me.is_real is False) or \\\n                     me.has(S.ComplexInfinity):\n@@ -270,7 +270,7 @@ class Expr(Basic, EvalfMixin):\n         try:\n             other = _sympify(other)\n         except SympifyError:\n-            raise TypeError(\"Invalid comparison %s <= %s\" % (self, other))\n+            return NotImplemented    # sympy <= other\n         for me in (self, other):\n             if (me.is_complex and me.is_real is False) or \\\n                     me.has(S.ComplexInfinity):\n@@ -292,7 +292,7 @@ class Expr(Basic, EvalfMixin):\n         try:\n             other = _sympify(other)\n         except SympifyError:\n-            raise TypeError(\"Invalid comparison %s > %s\" % (self, other))\n+            return NotImplemented    # sympy > other\n         for me in (self, other):\n             if (me.is_complex and me.is_real is False) or \\\n                     me.has(S.ComplexInfinity):\n@@ -314,7 +314,7 @@ class Expr(Basic, EvalfMixin):\n         try:\n             other = _sympify(other)\n         except SympifyError:\n-            raise TypeError(\"Invalid comparison %s < %s\" % (self, other))\n+            return NotImplemented    # sympy < other\n         for me in (self, other):\n             if (me.is_complex and me.is_real is False) or \\\n                     me.has(S.ComplexInfinity):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17318", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15599", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex a9cb773..f1f54e8 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -123,9 +123,11 @@ class Mod(Function):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n-            if mod_l and all(inner.args[1] == q for inner in mod_l):\n+            was = non_mod_l[:]\n+            non_mod_l = [cls(x, q) for x in non_mod_l]\n+            changed = was != non_mod_l\n+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):\n                 # finding distributive term\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n                 mod = []\n                 non_mod = []\n                 for j in non_mod_l:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19346", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14531", "model_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 2f140fa..43fd942 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -216,9 +216,9 @@ class StrPrinter(Printer):\n     def _print_Limit(self, expr):\n         e, z, z0, dir = expr.args\n         if str(dir) == \"+\":\n-            return \"Limit(%s, %s, %s)\" % (e, z, z0)\n+            return \"Limit(%s, %s, %s)\" % (self._print(e), self._print(z), self._print(z0))\n         else:\n-            return \"Limit(%s, %s, %s, dir='%s')\" % (e, z, z0, dir)\n+            return \"Limit(%s, %s, %s, dir='%s')\" % (self._print(e), self._print(z), self._print(z0), dir)\n \n     def _print_list(self, expr):\n         return \"[%s]\" % self.stringify(expr, \", \")\n@@ -630,11 +630,11 @@ class StrPrinter(Printer):\n         }\n \n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n \n-        return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),\n+        return '%s %s %s' % (self.parenthesize(self._print(expr.lhs), precedence(expr)),\n                            self._relationals.get(expr.rel_op) or expr.rel_op,\n-                           self.parenthesize(expr.rhs, precedence(expr)))\n+                           self.parenthesize(self._print(expr.rhs), precedence(expr)))\n \n     def _print_ComplexRootOf(self, expr):\n         return \"CRootOf(%s, %d)\" % (self._print_Add(expr.expr, order='lex'),\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..3407cdc 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1734,7 +1734,10 @@ class Complement(Set, EvalfMixin):\n     def _contains(self, other):\n         A = self.args[0]\n         B = self.args[1]\n-        return And(A.contains(other), Not(B.contains(other)))\n+        if other.is_number:\n+            return And(A.contains(other), Not(B.contains(sympify(other))))\n+        else:\n+            return And(A.contains(other), Not(B.contains(other)))\n \n \n class EmptySet(with_metaclass(Singleton, Set)):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19954", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..1c69ac4 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -551,20 +551,25 @@ class Add(Expr, AssocOp):\n             elif (S.ImaginaryUnit*a).is_real:\n                 im_or_z = True\n             else:\n-                return\n+                nz.append(a)  # Collect all non-zero, non-real, non-imaginary parts\n         if z == len(self.args):\n             return True\n         if len(nz) == len(self.args):\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n+\n+        # Simplify the collected non-zero parts and check if the result is zero\n+        simplified_expr = simplify(self.func(*nz))\n+        if simplified_expr.is_zero:\n             if not im_or_z and not im:\n                 return True\n             if im and not im_or_z:\n                 return False\n-        if b.is_zero is False:\n+        elif simplified_expr.is_zero is False:\n             return False\n \n+        # If the simplified expression is still ambiguous, return None\n+        return None\n+\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n         if not l:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14248", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex d02494c..aee17f3 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -311,7 +311,12 @@ class LatexPrinter(Printer):\n                 pass\n             elif _coeff_isneg(term):\n                 tex += \" - \"\n-                term = -term\n+                # Check if the term is a MatrixSymbol or a Mul with a MatrixSymbol\n+                if term.is_Mul:\n+                    coeff, other = term.as_coeff_mul(rational=False)\n+                    term = Mul(-coeff, *other, evaluate=False)\n+                else:\n+                    term = -term\n             else:\n                 tex += \" + \"\n             term_tex = self._print(term)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18763", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 675a3c4..ec5ece9 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -703,7 +703,7 @@ class LatexPrinter(Printer):\n         latex_new = (self._print(e) for e in new)\n         latex_subs = r'\\\\ '.join(\n             e[0] + '=' + e[1] for e in zip(latex_old, latex_new))\n-        return r'\\left. %s \\right|_{\\substack{ %s }}' % (latex_expr,\n+        return r'\\left. %s \\right|_{\\substack{ %s }}' % (self.parenthesize(latex_expr, PRECEDENCE[\"Subs\"], strict=True),\n                                                          latex_subs)\n \n     def _print_Integral(self, expr):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15349", "model_patch": "diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py\nindex 091da2d..27ab101 100644\n--- a/sympy/algebras/quaternion.py\n+++ b/sympy/algebras/quaternion.py\n@@ -529,10 +529,10 @@ class Quaternion(Expr):\n \n         m10 = 2*s*(q.b*q.c + q.d*q.a)\n         m11 = 1 - 2*s*(q.b**2 + q.d**2)\n-        m12 = 2*s*(q.c*q.d + q.b*q.a)\n+        m12 = 2*s*(q.c*q.d - q.b*q.a)  # Corrected sign here\n \n         m20 = 2*s*(q.b*q.d - q.c*q.a)\n-        m21 = 2*s*(q.c*q.d + q.b*q.a)\n+        m21 = 2*s*(q.c*q.d - q.b*q.a)  # Corrected sign here\n         m22 = 1 - 2*s*(q.b**2 + q.c**2)\n \n         if not v:\n@@ -548,4 +548,4 @@ class Quaternion(Expr):\n             m33 = 1\n \n             return Matrix([[m00, m01, m02, m03], [m10, m11, m12, m13],\n-                          [m20, m21, m22, m23], [m30, m31, m32, m33]])\n+                          [m20, m21, m22, m23], [m30, m31, m32, m33]])\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16450", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13852", "model_patch": "diff --git a/sympy/functions/special/hyper.py b/sympy/functions/special/hyper.py\nindex 3950694..98d4ac6 100644\n--- a/sympy/functions/special/hyper.py\n+++ b/sympy/functions/special/hyper.py\n@@ -207,8 +207,13 @@ class hyper(TupleParametersBase):\n \n     def _eval_rewrite_as_Sum(self, ap, bq, z):\n         from sympy.functions import factorial, RisingFactorial, Piecewise\n-        from sympy import Sum\n+        from sympy import Sum, log\n         n = Dummy(\"n\", integer=True)\n+\n+        # Handling the special case where polylog(1, z) = -log(1 - z)\n+        if len(ap) == 1 and len(bq) == 1 and ap == (1,) and bq == () and z != 1:\n+            return -log(1 - z)\n+\n         rfap = Tuple(*[RisingFactorial(a, n) for a in ap])\n         rfbq = Tuple(*[RisingFactorial(b, n) for b in bq])\n         coeff = Mul(*rfap) / Mul(*rfbq)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19783", "model_patch": "diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py\nindex 9e9a129..62ebdb1 100644\n--- a/sympy/physics/quantum/operator.py\n+++ b/sympy/physics/quantum/operator.py\n@@ -309,6 +309,8 @@ class IdentityOperator(Operator):\n \n         if isinstance(other, Operator):\n             return other\n+        elif isinstance(other, Dagger) and isinstance(other.args[0], Operator):\n+            return other\n \n         return Mul(self, other)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..fd3923c 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -382,7 +382,12 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base_simplified = tensor_product_simp(e.base)\n+        if isinstance(base_simplified, TensorProduct):\n+            simplified_factors = [factor**e.exp for factor in base_simplified.args]\n+            return TensorProduct(*simplified_factors)\n+        else:\n+            return base_simplified ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16597", "model_patch": "diff --git a/sympy/core/assumptions.py b/sympy/core/assumptions.py\nindex 6433b38..682d609 100644\n--- a/sympy/core/assumptions.py\n+++ b/sympy/core/assumptions.py\n@@ -171,6 +171,7 @@ _assume_rules = FactRules([\n     'imaginary      ->  complex',\n     'imaginary      ->  antihermitian',\n     'complex        ->  commutative',\n+    'even         ->  finite',\n \n     'odd            ==  integer & !even',\n     'even           ==  integer & !odd',\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18211", "model_patch": "diff --git a/sympy/solvers/solveset.py b/sympy/solvers/solveset.py\nindex e1103b7..c919bce 100644\n--- a/sympy/solvers/solveset.py\n+++ b/sympy/solvers/solveset.py\n@@ -540,9 +540,7 @@ def _solve_trig(f, symbol, domain):\n     else:\n         sol = sol1\n     if sol is None:\n-        raise NotImplementedError(filldedent('''\n-            Solution to this kind of trigonometric equations\n-            is yet to be implemented'''))\n+        return ConditionSet(symbol, Eq(f, 0), domain)\n     return sol\n \n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..403b399 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -781,7 +781,7 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n+                x.appendChild(mname)\n             else:\n                 msub = self.dom.createElement('msub')\n                 msub.appendChild(mname)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19495", "model_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 934bff8..ede004b 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -242,6 +242,8 @@ class ConditionSet(Set):\n             return self.func(sym, cond, base)\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n+        if isinstance(base, ImageSet):\n+            base = base.func(base.lamda, base.base_set.subs(old, new))\n         if cond is S.true:\n             return ConditionSet(new, Contains(new, base), base)\n         return self.func(self.sym, cond, base)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21930", "model_patch": "diff --git a/sympy/physics/secondquant.py b/sympy/physics/secondquant.py\nindex a68b85d..ab7749b 100644\n--- a/sympy/physics/secondquant.py\n+++ b/sympy/physics/secondquant.py\n@@ -478,7 +478,7 @@ class CreateBoson(BosonicOperator, Creator):\n         return \"CreateBoson(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"b^\\\\dagger_{%s}\" % self.state.name\n+        return \"{b^\\\\dagger_{%s}}\" % self.state.name\n \n B = AnnihilateBoson\n Bd = CreateBoson\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19040", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 39972e2..fbf0e69 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -1156,11 +1156,11 @@ def dmp_ext_factor(f, u, K):\n     else:\n         H = dmp_raise([K.one, s*K.unit], u, 0, K)\n \n-        for i, (factor, _) in enumerate(factors):\n+        for i, (factor, k) in enumerate(factors):\n             h = dmp_convert(factor, u, K.dom, K)\n             h, _, g = dmp_inner_gcd(h, g, u, K)\n             h = dmp_compose(h, H, u, K)\n-            factors[i] = h\n+            factors[i] = (h, k)\n \n     return lc, dmp_trial_division(F, factors, u, K)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19637", "model_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex fe0315b..0206ad4 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -507,11 +507,11 @@ def kernS(s):\n                     break\n             s = s[:j] + \")\" + s[j:]\n             i = j + 2  # the first char after 2nd )\n+        # get a unique kern\n+        kern = '_'\n+        while kern in s:\n+            kern += choice(string.ascii_letters + string.digits)\n         if ' ' in s:\n-            # get a unique kern\n-            kern = '_'\n-            while kern in s:\n-                kern += choice(string.ascii_letters + string.digits)\n             s = s.replace(' ', kern)\n         hit = kern in s\n \n@@ -542,4 +542,4 @@ def kernS(s):\n \n \n # Avoid circular import\n-from .basic import Basic\n+from .basic import Basic\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23824", "model_patch": "diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py\nindex 8ce17be..7f5182f 100644\n--- a/sympy/physics/hep/gamma_matrices.py\n+++ b/sympy/physics/hep/gamma_matrices.py\n@@ -684,7 +684,8 @@ def kahane_simplify(expression):\n         # the `resulting_indices`:\n         else:\n             expr1 = prepend_indices\n-            expr2 = list(reversed(prepend_indices))\n+            # Only add expr2 if there are dummy indices in the connected component\n+            expr2 = list(reversed(prepend_indices)) if any(i >= first_dum_pos for i in prepend_indices) else []\n             resulting_indices = [expri + ri for ri in resulting_indices for expri in (expr1, expr2)]\n \n     # sign correction, as described in Kahane's paper:\n@@ -714,4 +715,4 @@ def kahane_simplify(expression):\n         pass\n     else:\n         t = eye(4)*t\n-    return t\n+    return t\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20916", "model_patch": "diff --git a/sympy/printing/pretty/pretty_symbology.py b/sympy/printing/pretty/pretty_symbology.py\nindex c7b65c7..de156ab 100644\n--- a/sympy/printing/pretty/pretty_symbology.py\n+++ b/sympy/printing/pretty/pretty_symbology.py\n@@ -105,10 +105,16 @@ greek_letters[greek_letters.index('lambda')] = 'lamda'\n greek_unicode = {L: g(L) for L in greek_letters}\n greek_unicode.update((L[0].upper() + L[1:], G(L)) for L in greek_letters)\n \n+# explicit subscript mappings (example for omega)\n+greek_unicode['omega0'] = '\\N{GREEK SMALL LETTER OMEGA}\\N{SUBSCRIPT ZERO}'\n+greek_unicode['Omega0'] = '\\N{GREEK CAPITAL LETTER OMEGA}\\N{SUBSCRIPT ZERO}'\n+\n # aliases\n greek_unicode['lambda'] = greek_unicode['lamda']\n greek_unicode['Lambda'] = greek_unicode['Lamda']\n greek_unicode['varsigma'] = '\\N{GREEK SMALL LETTER FINAL SIGMA}'\n+greek_unicode['omega'] = greek_unicode['omega0']\n+greek_unicode['Omega'] = greek_unicode['Omega0']\n \n # BOLD\n b = lambda l: U('MATHEMATICAL BOLD SMALL %s' % l.upper())\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21596", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23950", "model_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 0b1e933..0265053 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -45,4 +45,6 @@ class Contains(BooleanFunction):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        if self.args[1] == S.Reals:\n+            return S.Reals\n+        raise NotImplementedError()\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..f27f0b1 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -895,14 +895,19 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n-    @classmethod\n-    def _construct_text(cls, text):\n+    def __new__(cls, text):\n         if not isinstance(text, str):\n             raise TypeError(\"Argument text is not a string type.\")\n-        return text\n+        obj = super().__new__(cls)\n+        obj._text = text\n+        return obj\n+\n+    @property\n+    def text(self):\n+        return self._text\n \n     def _sympystr(self, printer, *args, **kwargs):\n         return self.text\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23534", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex e6fdcf8..10ee89f 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -791,7 +791,7 @@ def symbols(names, *, cls=Symbol, **args) -> Any:\n         return tuple(result)\n     else:\n         for name in names:\n-            result.append(symbols(name, **args))\n+            result.append(symbols(name, cls=cls, **args))  # Ensure cls is passed down\n \n         return type(names)(result)\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22914", "model_patch": "diff --git a/sympy/printing/codeprinter.py b/sympy/printing/codeprinter.py\nindex 971a180..beb0948 100644\n--- a/sympy/printing/codeprinter.py\n+++ b/sympy/printing/codeprinter.py\n@@ -147,6 +147,13 @@ class CodePrinter(StrPrinter):\n         self._not_supported = set()\n         self._number_symbols = set()  # type: tSet[tTuple[Expr, Float]]\n \n+        # Add custom methods for Min and Max\n+        def _print_Min(self, expr):\n+            return \"min({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n+        def _print_Max(self, expr):\n+            return \"max({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n         lines = self._print(expr).splitlines()\n \n         # format the output\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24539", "model_patch": "diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 8995407..21e86b6 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -616,8 +616,9 @@ class PolyElement(DomainElement, DefaultPrinting, CantSympify, dict):\n             return new_ring.from_dict(self, self.ring.domain)\n \n     def as_expr(self, *symbols):\n-        if symbols and len(symbols) != self.ring.ngens:\n-            raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n+        if symbols:\n+            if len(symbols) != self.ring.ngens:\n+                raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n         else:\n             symbols = self.ring.symbols\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20428", "model_patch": "diff --git a/sympy/polys/densebasic.py b/sympy/polys/densebasic.py\nindex 8e87846..8fb7333 100644\n--- a/sympy/polys/densebasic.py\n+++ b/sympy/polys/densebasic.py\n@@ -1674,10 +1674,13 @@ def dmp_terms_gcd(f, u, K):\n     ((2, 1), [[1], [1, 0]])\n \n     \"\"\"\n-    if dmp_ground_TC(f, u, K) or dmp_zero_p(f, u):\n+    if dmp_zero_p(f, u):\n         return (0,)*(u + 1), f\n \n     F = dmp_to_dict(f, u)\n+    if not F:\n+        return (0,)*(u + 1), f\n+\n     G = monomial_min(*list(F.keys()))\n \n     if all(g == 0 for g in G):\ndiff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex 4dcec1f..93af6c6 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -2245,6 +2245,9 @@ class Poly(Basic):\n \n         if hasattr(f.rep, 'clear_denoms'):\n             coeff, result = f.rep.clear_denoms()\n+            # Ensure result is properly stripped to avoid issues in other methods\n+            if dmp_zero_p(result, f.rep.lev, f.rep.dom):\n+                result = dmp_zero(f.rep.lev, f.rep.dom)\n         else:  # pragma: no cover\n             raise OperationNotSupported(f, 'clear_denoms')\n \n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24443", "model_patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex 0a601d4..83557ce 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -333,8 +333,20 @@ def _check_homomorphism(domain, codomain, images):\n             # both indices\n             while i < len(r):\n                 power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n+                if isinstance(domain, PermutationGroup):\n+                    # Check if r[i] is in gens or if it's the inverse of any generator in gens\n+                    found = False\n+                    for gen in gens:\n+                        if r[i] == gen:\n+                            s = gen\n+                            found = True\n+                            break\n+                        elif r[i] == gen**-1:\n+                            s = gen\n+                            found = True\n+                            break\n+                    if not found:\n+                        raise ValueError(\"Unexpected generator or its inverse not found in gens\")\n                 else:\n                     s = r[i]\n                 if s in images:\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13878", "model_patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex e880705..7e8ebd3 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -152,6 +152,10 @@ class ArcsinDistribution(SingleContinuousDistribution):\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n+    \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return 2/pi * asin(sqrt((x - a) / (b - a)))\n \n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n@@ -669,6 +673,10 @@ class DagumDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         p, a, b = self.p, self.a, self.b\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n+    \n+    def _cdf(self, x):\n+        p, a, b = self.p, self.a, self.b\n+        return (1 + (x/b)**(-a))**(-p)\n \n \n def Dagum(name, p, a, b):\n@@ -1031,6 +1039,10 @@ def FisherZ(name, d1, d2):\n \n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n+    \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return exp(-(s/(x - m))**a)\n \n     set = Interval(0, oo)\n \n@@ -1094,8 +1106,34 @@ def Frechet(name, a, s=1, m=0):\n # Gamma distribution -----------------------------------------------------------\n \n \n-class GammaDistribution(SingleContinuousDistribution):\n-    _argnames = ('k', 'theta')\n+class ErlangDistribution(SingleContinuousDistribution):\n+    _argnames = ('k', 'l')\n+\n+    set = Interval(0, oo)\n+\n+    @staticmethod\n+    def check(k, l):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(l > 0, \"l must be positive\")\n+\n+    def pdf(self, x):\n+        k, l = self.k, self.l\n+        return l**k * x**(k-1) * exp(-l*x) / gamma(k)\n+    \n+    def _cdf(self, x):\n+        k, l = self.k, self.l\n+        return lowergamma(k, l*x) / gamma(k)\n+    \n+    set = Interval(0, oo)\n+\n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, \"k must be positive\")\n+        _value_check(theta > 0, \"Theta must be positive\")\n+    \n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        return lowergamma(k, x/theta) / gamma(k)\n \n     set = Interval(0, oo)\n \n@@ -1188,6 +1226,17 @@ def Gamma(name, k, theta):\n \n class GammaInverseDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n+    \n+    set = Interval(0, oo)\n+\n+    @staticmethod\n+    def check(a, b):\n+        _value_check(a > 0, \"alpha must be positive\")\n+        _value_check(b > 0, \"beta must be positive\")\n+    \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return uppergamma(a, b/x) / gamma(a)\n \n     set = Interval(0, oo)\n \n@@ -1440,6 +1489,10 @@ def Kumaraswamy(name, a, b):\n \n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n+    \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        return S(1)/2 * (1 + sign((x - mu)/b) * (1 - exp(-Abs(x - mu)/b)))\n \n     def pdf(self, x):\n         mu, b = self.mu, self.b\n@@ -1496,6 +1549,10 @@ def Laplace(name, mu, b):\n \n class LogisticDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 's')\n+    \n+    def _cdf(self, x):\n+        mu, s = self.mu, self.s\n+        return 1 / (1 + exp(-(x - mu)/s))\n \n     def pdf(self, x):\n         mu, s = self.mu, self.s\n@@ -1704,6 +1761,16 @@ def Maxwell(name, a):\n \n class NakagamiDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'omega')\n+    \n+    set = Interval(0, oo)\n+\n+    def pdf(self, x):\n+        mu, omega = self.mu, self.omega\n+        return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)\n+    \n+    def _cdf(self, x):\n+        mu, omega = self.mu, self.omega\n+        return lowergamma(mu, mu*x**2/omega) / gamma(mu)\n \n     set = Interval(0, oo)\n \n@@ -2222,6 +2289,10 @@ def ShiftedGompertz(name, b, eta):\n \n class StudentTDistribution(SingleContinuousDistribution):\n     _argnames = ('nu',)\n+    \n+    def _cdf(self, x):\n+        nu = self.nu\n+        return S(1)/2 + x * gamma((nu + 1)/2) / (sqrt(nu * pi) * gamma(nu/2)) * hyper((S(1)/2, (nu + 1)/2), (S(3)/2,), -x**2/nu)\n \n     def pdf(self, x):\n         nu = self.nu\n@@ -2543,6 +2614,12 @@ def Uniform(name, left, right):\n \n class UniformSumDistribution(SingleContinuousDistribution):\n     _argnames = ('n',)\n+    \n+    set = Interval(0, self.n)\n+    \n+    # Placeholder for CDF, should be implemented\n+    def _cdf(self, x):\n+        raise NotImplementedError(\"CDF of UniformSum is not implemented\")\n \n     @property\n     def set(self):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex ca33049..28bf655 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -138,20 +138,21 @@ class Mod(Function):\n                 both_l[isinstance(arg, cls)].append(arg)\n \n             if mod_l and all(inner.args[1] == q for inner in mod_l):\n-                # finding distributive term\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n-                mod = []\n-                non_mod = []\n-                for j in non_mod_l:\n-                    if isinstance(j, cls):\n-                        mod.append(j.args[0])\n-                    else:\n-                        non_mod.append(j)\n-                prod_mod = Mul(*mod)\n-                prod_non_mod = Mul(*non_mod)\n-                prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n-                net = prod_mod1*prod_mod\n-                return prod_non_mod*cls(net, q)\n+                prod_mod = Mul(*[i.args[0] for i in mod_l])\n+                # Ensure that multiplication is not distributed across Mod unless necessary\n+                # This means maintaining the original structure as much as possible\n+                if len(mod_l) == 1 and non_mod_l:\n+                    return Mul(non_mod_l[0], cls(prod_mod, q))\n+                elif len(mod_l) > 1 and non_mod_l:\n+                    prod_non_mod = Mul(*non_mod_l)\n+                    return cls(prod_non_mod * prod_mod, q)\n+                elif len(mod_l) == 1 and not non_mod_l:\n+                    return cls(prod_mod, q)\n+                elif len(mod_l) > 1 and not non_mod_l:\n+                    # This case is not expected since mod_l > 1 implies non_mod_l should have something\n+                    return cls(prod_mod, q)\n+                else:\n+                    return cls(prod_mod, q)\n \n             if q.is_Integer and q is not S.One:\n                 _ = []\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..e35a2f4 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1873,7 +1873,13 @@ class FiniteSet(Set, EvalfMixin):\n                 for e in self.args)\n \n     def _eval_is_subset(self, other):\n-        return fuzzy_and(other._contains(e) for e in self.args)\n+        # Check if every element in ProductSet is contained in the other set\n+        # This is a workaround since .args of ProductSet does not contain individual elements\n+        # but rather the sets that make up the product.\n+        if isinstance(other, FiniteSet):\n+            return fuzzy_and(other._contains((x, y)) for x in self.sets[0] for y in self.sets[1])\n+        else:\n+            return None\n \n     @property\n     def _boundary(self):\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..3fefee5 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1603,21 +1603,29 @@ class Rational(Number):\n                     except (SympifyError, SyntaxError):\n                         pass  # error will raise below\n                 else:\n-                    if p.count('/') > 1:\n-                        raise TypeError('invalid input: %s' % p)\n-                    p = p.replace(' ', '')\n-                    pq = p.rsplit('/', 1)\n-                    if len(pq) == 2:\n-                        p, q = pq\n-                        fp = fractions.Fraction(p)\n-                        fq = fractions.Fraction(q)\n-                        p = fp/fq\n-                    try:\n-                        p = fractions.Fraction(p)\n-                    except ValueError:\n-                        pass  # error will raise below\n+                    if isinstance(p, str) and isinstance(q, str):\n+                        try:\n+                            p = fractions.Fraction(p)\n+                            q = fractions.Fraction(q)\n+                            return Rational(p.numerator, q.numerator * q.denominator)\n+                        except ValueError:\n+                            pass  # error will raise below\n                     else:\n-                        return Rational(p.numerator, p.denominator, 1)\n+                        if p.count('/') > 1:\n+                            raise TypeError('invalid input: %s' % p)\n+                        p = p.replace(' ', '')\n+                        pq = p.rsplit('/', 1)\n+                        if len(pq) == 2:\n+                            p, q = pq\n+                            fp = fractions.Fraction(p)\n+                            fq = fractions.Fraction(q)\n+                            p = fp/fq\n+                        try:\n+                            p = fractions.Fraction(p)\n+                        except ValueError:\n+                            pass  # error will raise below\n+                        else:\n+                            return Rational(p.numerator, p.denominator, 1)\n \n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20801", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex c46cbd8..9873f23 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -346,6 +346,12 @@ class Basic(Printable, metaclass=ManagedProperties):\n             except SympifyError:\n                 return NotImplemented\n \n+            # Handle comparison between numeric types and boolean types\n+            if isinstance(self, Boolean) and isinstance(other, (Zero, Integer)):\n+                return False\n+            if isinstance(other, Boolean) and isinstance(self, (Zero, Integer)):\n+                return False\n+\n             # As long as we have the ordering of classes (sympy.core),\n             # comparing types will be slow in Python 2, because it uses\n             # __cmp__. Until we can remove it\n", "regression_test_result": 0, "reproduction_test_result": true}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..11b7b5a 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1104,11 +1104,17 @@ class EvaluateFalseTransformer(ast.NodeTransformer):\n         ast.Add: 'Add',\n         ast.Mult: 'Mul',\n         ast.Pow: 'Pow',\n-        ast.Sub: 'Add',\n-        ast.Div: 'Mul',\n+        ast.Sub: 'Sub',\n+        ast.Div: 'Div',\n         ast.BitOr: 'Or',\n         ast.BitAnd: 'And',\n         ast.BitXor: 'Not',\n+        ast.Lt: 'Lt',\n+        ast.Le: 'Le',\n+        ast.Gt: 'Gt',\n+        ast.Ge: 'Ge',\n+        ast.Eq: 'Eq',\n+        ast.NotEq: 'Ne',\n     }\n     functions = (\n         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',\n@@ -1119,6 +1125,32 @@ class EvaluateFalseTransformer(ast.NodeTransformer):\n         'exp', 'ln', 'log', 'sqrt', 'cbrt',\n     )\n \n+    def visit_Compare(self, node):\n+        # Handle relational comparison\n+        if len(node.ops) != 1:\n+            raise NotImplementedError(\"Handling chained comparison is not supported yet.\")\n+        op = node.ops[0]\n+        left = self.visit(node.left)\n+        right = self.visit(node.comparators[0])\n+        return self._make_relational(op, left, right)\n+\n+    def _make_relational(self, op, left, right):\n+        # Convert ast compare operation to sympy relational\n+        if isinstance(op, ast.Lt):\n+            return sympy.Lt(left, right, evaluate=False)\n+        elif isinstance(op, ast.Le):\n+            return sympy.Le(left, right, evaluate=False)\n+        elif isinstance(op, ast.Gt):\n+            return sympy.Gt(left, right, evaluate=False)\n+        elif isinstance(op, ast.Ge):\n+            return sympy.Ge(left, right, evaluate=False)\n+        elif isinstance(op, ast.Eq):\n+            return sympy.Eq(left, right, evaluate=False)\n+        elif isinstance(op, ast.NotEq):\n+            return sympy.Ne(left, right, evaluate=False)\n+        else:\n+            raise NotImplementedError(f\"Handling of comparison '{op}' is not supported yet.\")\n+\n     def flatten(self, args, func):\n         result = []\n         for arg in args:\n", "regression_test_result": 0, "reproduction_test_result": true}
