{
    "summary": "",
    "suspicious_code": [
        {
            "keyword": "models",
            "file_path": ""
        },
        {
            "keyword": "PositionField",
            "file_path": ""
        },
        {
            "keyword": "ManyToManyField",
            "file_path": ""
        },
        {
            "keyword": "Error",
            "file_path": ""
        },
        {
            "keyword": "IntegerField",
            "file_path": "django/db/models/fields/__init__.py"
        },
        {
            "keyword": "ThingAdmin",
            "file_path": ""
        },
        {
            "keyword": "os",
            "file_path": ""
        },
        {
            "keyword": "Thing",
            "file_path": ""
        },
        {
            "keyword": "ModelAdmin",
            "file_path": "django/contrib/admin/options.py"
        },
        {
            "keyword": "FieldDoesNotExist",
            "file_path": ""
        },
        {
            "keyword": "admin",
            "file_path": ""
        },
        {
            "keyword": "checks",
            "file_path": ""
        },
        {
            "keyword": "_check_list_display_item",
            "file_path": ""
        },
        {
            "keyword": "Field",
            "file_path": "django/db/models/fields/__init__.py"
        },
        {
            "keyword": "Model",
            "file_path": "django/db/models/base.py"
        }
    ],
    "suspicious_code_from_tracer": [],
    "related_source_code": "\ndef _check_list_display_item(self, obj, item, label):\n    if callable(item):\n        return []\n    elif hasattr(obj, item):\n        return []\n    else:\n        try:\n            field = obj.model._meta.get_field(item)\n        except FieldDoesNotExist:\n            try:\n                field = getattr(obj.model, item)\n            except AttributeError:\n                return [\n                    checks.Error(\n                        \"The value of '%s' refers to '%s', which is not a callable, \"\n                        \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n                            label, item, obj.__class__.__name__,\n                            obj.model._meta.app_label, obj.model._meta.object_name,\n                        ),\n                        obj=obj.__class__,\n                        id='admin.E108',\n                    )\n                ]\n        if isinstance(field, models.ManyToManyField):\n            return [\n                checks.Error(\n                    \"The value of '%s' must not be a ManyToManyField.\" % label,\n                    obj=obj.__class__,\n                    id='admin.E109',\n                )\n            ]\n        return []\n",
    "is_reproduce_pass": false,
    "reproduce_code": "import os\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\n\nfrom django.db import models\nfrom django.contrib import admin\n\nclass PositionField(models.Field):\n    pass\n\nclass Thing(models.Model):\n    number = models.IntegerField(default=0)\n    order = PositionField()\n\n@admin.register(Thing)\nclass ThingAdmin(admin.ModelAdmin):\n    list_display = ['number', 'order']",
    "env_reproduce_path": "/django__django/reproducer_django__django-11551.py"
}